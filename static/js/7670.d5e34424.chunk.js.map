{"version":3,"file":"static/js/7670.d5e34424.chunk.js","mappings":"2TAqCA,MAkaA,EAlakBA,IAA6B,IAA5B,UAAEC,EAAS,QAAEC,GAASF,EAKvC,MAAMG,GAAWC,EAAAA,EAAAA,OAEVC,IAAWC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAY,WAChCC,IAAWF,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAY,WAShCE,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,OAQjDK,EAAAA,EAAAA,YAAU,KACRC,QAAQC,IAAI,eAAiBX,GAC7BY,GAAmB,GAElB,CAACZ,IAGJ,MAaOa,EAAWC,IAAgBV,EAAAA,EAAAA,WAAS,IAGpCW,EAAWC,IAAgBZ,EAAAA,EAAAA,aAG3Ba,EAAWC,IAAgBd,EAAAA,EAAAA,UAAS,KAGpCe,EAAaC,IAAkBhB,EAAAA,EAAAA,UACpC,CACE,QAAW,GACX,UAAa,GACb,UAAa,KAOXQ,EAAoBS,UAExB,IACE,MAGMC,SAHiBC,EAAAA,EAAcC,IAAI,eAAiBxB,IAGpCsB,KAEtBN,EAAaM,GACbZ,QAAQC,IAAI,iCACZD,QAAQC,IAAIW,GACZG,GAEF,CAAE,MAAOC,GAEPhB,QAAQC,IAAIe,IACZC,EAAAA,EAAAA,IAAWD,EAAMzB,EACnB,GAKIwB,EAAmBJ,UAEvB,IACE,MAGMC,SAHiBC,EAAAA,EAAcC,IAAI,eAAiBxB,EAAU,WAG9CsB,KAEtBJ,EAAaI,GACbZ,QAAQC,IAAI,4BACZD,QAAQC,IAAIW,EAEd,CAAE,MAAOI,GAEPhB,QAAQC,IAAIe,IACZC,EAAAA,EAAAA,IAAWD,EAAMzB,EACnB,GAqJF,OACE2B,EAAAA,EAAAA,MAACC,EAAAA,GAAU,CAAAC,SAAA,EACTC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAAAF,UACHC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAAAH,UACHF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,6BAAa,KAACC,EAAAA,EAAAA,KAAA,gBAExBA,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,SACPf,GACCa,EAAAA,EAAAA,MAACU,EAAAA,GAAK,CACJH,UAAU,2BACVI,YAAU,EACV1B,UAAWA,EACX2B,SA9JUnB,UACxBoB,EAAEC,iBAEFhC,QAAQC,IAAII,GACZD,GAAa,GAEb,IAA6B,IADhB2B,EAAEE,cACNC,gBAEP,YADAH,EAAEI,kBAMJ,GAFeC,OAAOC,QAAQ,qDAO9B,IACE,MAAMC,QAAiBzB,EAAAA,EAAc0B,KAAK,eAAiBjD,EAASe,EAAW,CAC7EmC,QAAS,CACP,eAAgB,yBAIpBxC,QAAQC,IAAI,oBAAWqC,EAAS1B,MAGhC6B,MAAM,+CACNrC,GAAa,EACf,CAAE,MAAOY,GAEPhB,QAAQC,IAAIe,IACZC,EAAAA,EAAAA,IAAWD,EAAMzB,EACnB,MApBEa,GAAa,EAoBf,EA4H0CgB,SAAA,EAE5BC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,GAAGtB,UACXF,EAAAA,EAAAA,MAACyB,EAAAA,GAAU,CAACC,QAAQ,qBAAoBxB,SAAA,CAAC,QAAM9B,QAEjD4B,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACwB,EAAAA,GAAa,CAACC,SAAO,EAAA1B,SAAC,uCACvBC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAW,CAACC,MAAM,2BAAOC,GAAG,yBAAyBC,UAAQ,EAACC,eAAgB9C,EAAU+C,MAAOC,SAAWtB,GAAMzB,EAAa,IAAKD,EAAW+C,MAAOrB,EAAEuB,OAAOC,cAEhKrC,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,GAAGtB,SAAA,EACXC,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,CAACC,SAAO,EAACC,WAAS,EAACC,MAAM,SAASC,IAAKC,EAAUC,MAAO,IAAKC,OAAQ,OAC5E1C,EAAAA,EAAAA,KAACM,EAAAA,GAAS,CAAAP,UACRC,EAAAA,EAAAA,KAAC2C,EAAAA,GAAS,CAAA5C,UACRC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,WAAWC,UAAQ,YAKpDhC,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,YAAWxB,SAAC,yBAChCC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAClB,GAAG,YAAYM,MAAOlD,EAAU+D,MAAOf,SAAWtB,GAAMzB,EAAa,IAAKD,EAAW+D,MAAOrC,EAAEuB,OAAOC,QAAUL,UAAQ,EAAA9B,SACjI3B,EAAQ4E,KAAI,CAACC,EAAMC,KAClBlD,EAAAA,EAAAA,KAAA,UAAQkC,MAAOe,EAAKrB,GAAG7B,SAAckD,EAAKE,MAAbD,QAGjClD,EAAAA,EAAAA,KAACwB,EAAAA,GAAa,CAACC,SAAO,EAAA1B,SAAC,sEAEzBF,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,aAAYxB,SAAC,WACjCC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,aAAaM,MAAOlD,EAAU2C,MAAOK,SAAWtB,GAAMzB,EAAa,IAAKD,EAAW2C,MAAOjB,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,QAElKhC,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,YAAWxB,SAAC,yBAChCC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,YAAYM,MAAOlD,EAAUmE,KAAME,UAAQ,EAACrB,SAAWtB,GAAMzB,EAAa,IAAKD,EAAWmE,KAAMzC,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,KACtK7B,EAAAA,EAAAA,KAACwB,EAAAA,GAAa,CAACC,SAAO,EAAA1B,SAAC,uEAEzBF,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,eAAcxB,SAAC,+BACnCC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,eAAeM,MAAOlD,EAAUsE,OAAQD,UAAQ,EAACrB,SAAWtB,GAAMzB,EAAa,IAAKD,EAAWsE,OAAQ5C,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,KAC7K7B,EAAAA,EAAAA,KAACwB,EAAAA,GAAa,CAACC,SAAO,EAAA1B,SAAC,6EAGzBF,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACqD,GAAI,GAAGxD,SAAA,EACXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,cAAaxB,SAAC,YAClCC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,cAAcM,MAAOlD,EAAUwE,OAAQxB,SAAWtB,GAAMzB,EAAa,IAAKD,EAAWwE,OAAQ9C,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,QAGrKhC,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,GAAGtB,SAAA,EACXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,cAAaxB,SAAC,YAClCC,EAAAA,EAAAA,KAACyD,EAAAA,GAAa,CAAC7B,GAAG,cAAc8B,KAAK,IAAIxB,MAAOlD,EAAU2E,OAAQ3B,SAAWtB,GAAMzB,EAAa,IAAKD,EAAW2E,OAAQjD,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,QAErKhC,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,eAAcxB,SAAC,+BACnCF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAW,CAAClB,GAAG,eAAeM,MAAOlD,EAAU4E,UAAW5B,SAAWtB,GAAMzB,EAAa,IAAKD,EAAW4E,UAAWlD,EAAEuB,OAAOC,QAAUL,UAAQ,EAAA9B,SAC5IxB,EAAQyE,KAAI,CAACC,EAAMC,KAClBlD,EAAAA,EAAAA,KAAA,UAAQkC,MAAOe,EAAKrB,GAAG7B,SAAckD,EAAKE,MAAbD,QAGjClD,EAAAA,EAAAA,KAACwB,EAAAA,GAAa,CAACC,SAAO,EAAA1B,SAAC,gFAG3BF,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,SAAA,EACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,mBAAkBxB,SAAC,wBACvCF,EAAAA,EAAAA,MAAA,OAAKgE,MAAO,CAAEC,QAAS,OAAQrB,MAAO,QAAS1C,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,OAAK6D,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,YAAa,GAAIjE,UACpEC,EAAAA,EAAAA,KAACiE,EAAAA,EAAK,CAAC7D,UAAU,iBAAiB8D,KAAMC,EAAAA,EAAaC,KAAK,UAE5DpE,EAAAA,EAAAA,KAAA,OAAK6D,MAAO,CAAEpB,MAAO,OAAQ1C,UAC3BC,EAAAA,EAAAA,KAACqE,IAAU,CAACxC,UAAQ,EAClByC,SAAU9F,EACVwD,SA/TCuC,IACvB,MAAMC,EAAgBD,EAAKE,cAAcC,MAAM,EAAG,IAClDjG,EAAgB8F,GAChBtF,EAAa,IAAKD,EAAW2F,YAAaH,GAAgB,EA6TpCI,WAAY,aACZC,qBAAmB,EACnBC,QAAS,IAAIC,KAAK,cAClBC,QAAS,IAAID,KACb3E,UAAU,aACV8B,MAAOlD,EAAU2F,uBAKzB9E,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACqD,GAAI,GAAGxD,SAAA,EACXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,YAAWxB,SAAC,kBAChCC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,YAAYM,MAAOlD,EAAUiG,WAAYjD,SAAWtB,GAAMzB,EAAa,IAAKD,EAAWiG,WAAYvE,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,QAE3KhC,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACqD,GAAI,GAAGxD,SAAA,EACXC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,YAAWxB,SAAC,WAChCC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,YAAYM,MAAOlD,EAAU6E,MAAO7B,SAAWtB,GAAMzB,EAAa,IAAKD,EAAW6E,MAAOnD,EAAEuB,OAAOC,QAAUkB,UAAW,IAAKvB,UAAQ,QAEjK7B,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qBAGdJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gCAA+BL,UACjDC,EAAAA,EAAAA,KAACkF,EAAAA,GAAQ,gBAOnBrF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBF,EAAAA,EAAAA,MAACQ,EAAAA,GAAW,CAAAN,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAU,KAACC,EAAAA,EAAAA,KAAA,eAEpBhB,GACCa,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAAAF,SAAA,EACHC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,QAAQM,MAAM,KAAKiD,UAAQ,EAACC,WAAS,OAElEpF,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,iBAAiBM,MAAM,gBAAgBiD,UAAQ,EAACC,WAAS,OAEtFpF,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,WAAWM,MAAM,SAASiD,UAAQ,EAACC,WAAS,OAEzEpF,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,iBAAiBM,MAAM,gBAAgBiD,UAAQ,EAACC,WAAS,SAGvFlG,EAAU8D,KAAI,CAACC,EAAMC,KACpBrD,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAAAF,SAAA,EACHC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAI,mBAAoBM,MAAOhD,EAAUmG,OAASnC,EAAOiC,UAAQ,EAACC,WAAS,OAErGpF,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAI,yBAA0BM,MAAOe,EAAKqC,YAAaH,UAAQ,EAACC,WAAS,OAEnGpF,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAI,uBAAwBM,MAAOe,EAAKsC,UAAWJ,UAAQ,EAACC,WAAS,OAE/FpF,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAI,0BAA2BM,MAAOe,EAAKuC,QAASL,UAAQ,EAACC,WAAS,QAXvFlC,SAgBZlD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gCAA+BL,UACjDC,EAAAA,EAAAA,KAACkF,EAAAA,GAAQ,WAIF,C,sEC1bjB,MAqDA,EArD4BnH,IAAgD,IAA/C,WAAE0H,EAAU,YAAEC,EAAW,aAAEC,GAAc5H,EAkCpE,OACE8B,EAAAA,EAAAA,MAAC+F,EAAAA,GAAW,CAAC,aAAW,0BAAyB7F,SAAA,EAC/CC,EAAAA,EAAAA,KAAC6F,EAAAA,GAAe,CAAC,aAAW,WAAWhE,SAA0B,IAAhB6D,EAAmBI,QAASA,IAAMH,EAAaD,EAAc,GAAG3F,UAC/GC,EAAAA,EAAAA,KAAA,QAAM,cAAY,OAAMD,SAAC,WApCDgG,MAC5B,MAAMC,EAAQ,GAERC,EAAiBC,KAAKC,MAAMC,KAGlC,IAAIC,EAAQH,KAAKI,IAAI,EAAGZ,EAAcO,GAClCM,EAAML,KAAKM,IAAIf,EAAYY,EALZ,EAKiC,GAIhDX,GAAeO,GACjBI,EAAQ,EACRE,EAAML,KAAKM,IAAIf,EAXE,IAeVC,GAAeD,EAAaQ,IACnCI,EAAQH,KAAKI,IAAI,EAAGb,EAhBH,EAgB6B,GAC9Cc,EAAMd,GAIR,IAAK,IAAIgB,EAAIJ,EAAOI,GAAKF,EAAKE,IAC5BT,EAAMU,MACJ1G,EAAAA,EAAAA,KAAC6F,EAAAA,GAAe,CAASc,OAAQF,IAAMf,EAAaI,QAASA,IAAMH,EAAac,GAAG1G,SAChF0G,GADmBA,IAK1B,OAAOT,CAAK,EAQTD,IACD/F,EAAAA,EAAAA,KAAC6F,EAAAA,GAAe,CAAC,aAAW,OAAOhE,SAAU6D,IAAgBD,EAAYK,QAASA,IAAMH,EAAaD,EAAc,GAAG3F,UACpHC,EAAAA,EAAAA,KAAA,QAAM,cAAY,OAAMD,SAAC,aAEf,C,wKCLlB,MA4bA,EA5biBhC,IAAsC,IAArC,UAAEC,EAAS,iBAAE4I,GAAkB7I,EAI/C,MAAMG,GAAWC,EAAAA,EAAAA,OAEVC,IAAWC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAY,WAChCC,IAAWF,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAY,WAOhCE,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,OAC1CwI,EAAeC,IAAoBzI,EAAAA,EAAAA,UAAS,OAE5CqH,EAAaqB,IAAkB1I,EAAAA,EAAAA,UAAS,IACxCoH,EAAYuB,IAAiB3I,EAAAA,EAAAA,UAAS,IACtC4I,EAAcC,IAAmB7I,EAAAA,EAAAA,UAAS,IAuB3C8I,EAAa5C,IAEjB9F,EAAgB,MAChBqI,EAAiB,MAEjBM,EAAc,CACZ,OAAU,GACV,UAAa,GACb,cAAiB,GACjB,WAAc,GACd,KAAQ,GACR,KAAQ,EACR,KAAQ,GACR,gBAAmB,GACnB,UAAa,GACb,UAAc,KAGhBL,EAAe,GACfC,EAAc,GACdK,EAAkBC,MAAMpI,EAAUqI,SAASlC,QAAQmC,MAAK,IACxDrI,EAAa,CAAEoI,SAAU,KACzBE,GAAa,EAAM,GAUdvI,EAAWC,IAAgBd,EAAAA,EAAAA,UAAS,CAAEkJ,SAAU,MAGhDG,EAAYN,IAAiB/I,EAAAA,EAAAA,UAAS,CAAC,IAGvCsJ,EAAgBN,IAAqBhJ,EAAAA,EAAAA,UAASiJ,MAAMpI,EAAUqI,SAASlC,QAAQmC,MAAK,KAqBpFI,EAAaC,IAAkBxJ,EAAAA,EAAAA,UAAS,CAAC,GAe1CyJ,EAAoBxI,UACxB4H,EAAgB,IAChBvI,QAAQC,IAAI8I,GAETK,GAAQ,IACTX,GAAcY,IAAS,IAClBA,EACHD,KAAMA,MAGRL,EAAWK,KAAOA,GAGpB,IACE,MAMMxI,SANiBC,EAAAA,EAAcC,IAAI,aAAc,CACrDwI,OAAQP,EACRvG,QAAS,CAAE,eAAgB,uBAIP5B,KAEtBJ,EAAaI,GAEbZ,QAAQC,IAAIW,GACZyH,EAAczH,EAAKkG,WAErB,CAAE,MAAO9F,GAEPhB,QAAQC,IAAIe,IACZC,EAAAA,EAAAA,IAAWD,EAAMzB,EACnB,IAKFQ,EAAAA,EAAAA,YAAU,KACRyI,GAAY,GACX,IAEH,MAAOe,EAAWT,IAAgBpJ,EAAAA,EAAAA,WAAS,GA6F3C,OACE2B,EAAAA,EAAAA,KAAAmI,EAAAA,SAAA,CAAApI,UACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAAAF,UACHC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAAAH,UACHF,EAAAA,EAAAA,MAACM,EAAAA,GAAK,CAACC,UAAU,OAAML,SAAA,EACrBC,EAAAA,EAAAA,KAACK,EAAAA,GAAW,CAAAN,SAAC,wBACbF,EAAAA,EAAAA,MAACS,EAAAA,GAAS,CAAAP,SAAA,EACRF,EAAAA,EAAAA,MAACU,EAAAA,GAAK,CAACH,UAAU,MAAMK,SAAUqH,EAAkB/H,SAAA,EACjDF,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACG,UAAU,OAAML,SAAA,EACpBC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,aAAanB,UAAU,iBAAgBL,SAAC,0BAE9DC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVF,EAAAA,EAAAA,MAACiD,EAAAA,GAAW,CAAClB,GAAG,aAAa,aAAW,qBAAMI,SAAWtB,GAAM0G,EAAc,IAAKM,EAAYU,UAAW1H,EAAEuB,OAAOC,QAASnC,SAAA,EACzHC,EAAAA,EAAAA,KAAA,UAAQkC,MAAO,GAAGnC,SAAC,mBAClB3B,EAAQ4E,KAAI,CAACC,EAAMC,KAClBlD,EAAAA,EAAAA,KAAA,UAAQkC,MAAOe,EAAKrB,GAAG7B,SAAckD,EAAKE,MAAbD,WAInClD,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,kBAAkBnB,UAAU,iBAAgBL,SAAE,oBAEpEC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,kBAAkB,aAAW,eAAKyG,YAAY,eAAKrG,SAAWtB,GAAM0G,EAAc,IAAKM,EAAYnC,UAAW7E,EAAEuB,OAAOC,gBAGtJrC,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACG,UAAU,OAAML,SAAA,EACpBC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,kBAAkBnB,UAAU,iBAAgBL,SAAE,oBAEpEC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,kBAAkB,aAAW,eAAKyG,YAAY,eAAKrG,SAAWtB,GAAM0G,EAAc,IAAKM,EAAYzC,WAAYvE,EAAEuB,OAAOC,aAErJlC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,YAAYnB,UAAU,iBAAgBL,SAAC,0BAE7DC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,YAAY,aAAW,qBAAMyG,YAAY,eAAKrG,SAAWtB,GAAM0G,EAAc,IAAKM,EAAYY,UAAW5H,EAAEuB,OAAOC,gBAGjJrC,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACG,UAAU,OAAML,SAAA,EACpBC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,cAAcnB,UAAU,iBAAgBL,SAAC,gCAE/DC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACqD,GAAI,EAAExD,UACVC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAU,CAACC,KAAK,OAAOjB,GAAG,cAAc,aAAW,2BAAOyG,YAAY,eAAKrG,SAAWtB,GAAM0G,EAAc,IAAKM,EAAYpE,OAAQ5C,EAAEuB,OAAOC,aAE/IlC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACqD,GAAI,EAAExD,UACVC,EAAAA,EAAAA,KAACsB,EAAAA,GAAU,CAACC,QAAQ,cAAcnB,UAAU,iBAAgBL,SAAC,0BAE/DC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACqD,GAAI,EAAExD,UACVF,EAAAA,EAAAA,MAAA,OAAKgE,MAAO,CAAEC,QAAS,QAAS/D,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAK6D,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,YAAa,GAAIjE,UACpEC,EAAAA,EAAAA,KAACiE,EAAAA,EAAK,CAAC7D,UAAU,iBAAiB8D,KAAMC,EAAAA,EAAaC,KAAK,UAE5DpE,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACqE,IAAU,CACTC,SAAU9F,EACVwD,SA5RCuC,IAEvB,GADA9F,EAAgB8F,GACbA,EAAK,CACN,MAAMC,EAAgBD,EAAKE,cAAcC,MAAM,EAAG,IAClD0C,EAAc,IAAKM,EAAYa,gBAAiB/D,GAClD,GAwRsBI,WAAY,aACZC,qBAAmB,EACnBC,QAAS,IAAIC,KAAK,cAClBC,QAAS,IAAID,KACb3E,UAAU,kBAGdJ,EAAAA,EAAAA,KAAA,OAAK6D,MAAO,CAAE2E,WAAY,WAAY1E,QAAS,OAAQC,WAAY,UAAWhE,UAC5EC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,WAERC,EAAAA,EAAAA,KAAA,OAAK6D,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,YAAa,GAAIjE,UACpEC,EAAAA,EAAAA,KAACiE,EAAAA,EAAK,CAAC7D,UAAU,iBAAiB8D,KAAMC,EAAAA,EAAaC,KAAK,UAE5DpE,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACqE,IAAU,CACTC,SAAUuC,EACV7E,SArSEuC,IAExB,GADAuC,EAAiBvC,GACdA,EAAK,CACN,MAAMC,EAAgBD,EAAKE,cAAcC,MAAM,EAAG,IAClD0C,EAAc,IAAKM,EAAYe,cAAejE,GAChD,GAiSsBI,WAAY,aACZC,qBAAmB,EACnBC,QAAS,IAAIC,KAAK,cAClBC,QAAS,IAAID,KACb3E,UAAU,0BAMpBJ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcL,UAC3BF,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACG,UAAU,0BAAyBL,SAAA,EACvCC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVC,EAAAA,EAAAA,KAAC0I,EAAAA,GAAO,CAACC,UAAU,QAAQ9F,KAAK,SAAS+F,MAAM,OAAO1G,MAAM,eAAK4D,QA9H9DxG,UAIrB,GAHAoB,EAAEC,iBACFhC,QAAQC,IAAIqI,GAEe,GAAvBA,EAAa5B,OAEf,YADAjE,MAAM,qDAKN,IAFeL,OAAOC,QAAQ,+EAG5B,QAKyB,IADhBN,EAAEE,cACNC,iBAKTqG,EAAgB,IAChBO,GAAa,GACbJ,EAAkBC,MAAMpI,EAAUqI,SAASlC,QAAQmC,MAAK,IAIxDZ,EAAiBK,IAVfvG,EAAEI,iBAU0B,OAqGdd,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACmB,GAAI,EAAEtB,UACVF,EAAAA,EAAAA,MAAA,OAAKO,UAAU,gDAA+CL,SAAA,EAC5DC,EAAAA,EAAAA,KAAC0I,EAAAA,GAAO,CAACC,UAAU,QAAQ9F,KAAK,QAAQ+F,MAAM,QAAQ1G,MAAM,qBAAM4D,QAASqB,KAC3EnH,EAAAA,EAAAA,KAAC0I,EAAAA,GAAO,CAACC,UAAU,QAAQ9F,KAAK,QAAQ+F,MAAM,UAAU1G,MAAM,2BAAO4D,QAAUpF,GAnQ/EA,KACpBA,EAAEC,iBACFmH,GAAmB,EAiQsFe,CAAanI,mBAM5GV,EAAAA,EAAAA,KAAA,UACAH,EAAAA,EAAAA,MAACiJ,EAAAA,GAAM,CAACxG,MAAM,SAASlC,UAAU,cAAc2I,OAAK,EAACC,YAAU,EAAAjJ,SAAA,EAC7DC,EAAAA,EAAAA,KAACiJ,EAAAA,GAAU,CAACL,MAAM,QAAO7I,UACvBF,EAAAA,EAAAA,MAACqJ,EAAAA,GAAS,CAAAnJ,SAAA,EACRC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,UACrCC,EAAAA,EAAAA,KAAA,SAEI4B,GAAI,YACJiB,KAAK,WACLb,SAlLSoH,KAGjC,GAFA3B,GAAcS,GACdb,EAAkBC,MAAMpI,EAAUqI,SAASlC,QAAQmC,MAAMU,IACzC,GAAbA,EAAmB,CACpB,IAAIX,EAAWrI,EAAUqI,SACzB5I,QAAQC,IAAI2I,GACZ,IAAI8B,EAAgB,GACpB,GAAG9B,EAAS,CACV,IAAI,IAAId,EAAI,EAAIA,EAAIc,EAASlC,OAAQoB,IACnC4C,EAAc3C,KAAKa,EAASd,IAE9BS,EAAgBmC,GAChB1K,QAAQC,IAAI,oBACZD,QAAQC,IAAIyK,EACd,CAEF,MACEnC,EAAgB,GAClB,EAiKwBoC,QAASpB,OAIjBlI,EAAAA,EAAAA,KAACmJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAC,QAC1CC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAC,wBAC1CC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAC,wBAC1CC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAC,8BAC1CC,EAAAA,EAAAA,KAACmJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAC,kBAC1CF,EAAAA,EAAAA,MAACsJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAA,CAAC,SAAKC,EAAAA,EAAAA,KAAA,SAAK,aACpDH,EAAAA,EAAAA,MAACsJ,EAAAA,GAAgB,CAAC/I,UAAU,cAAaL,SAAA,CAAC,WAAOC,EAAAA,EAAAA,KAAA,SAAK,gBAG1DA,EAAAA,EAAAA,KAACuJ,EAAAA,GAAU,CAAAxJ,SACRb,EAAUqI,UAAYrI,EAAUqI,SAASlC,OAAS,EACjDnG,EAAUqI,SAASvE,KAAI,CAACC,EAAMC,KAC5BrD,EAAAA,EAAAA,MAACqJ,EAAAA,GAAS,CAAC,QAAM,qBAAoBnJ,SAAA,EACnCC,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,cAAaL,UACrCC,EAAAA,EAAAA,KAAA,SACE4B,GAAI,OAASsB,EACbL,KAAK,WACLb,SAAWtB,GA/NhBpB,OAAMoB,EAAGuC,EAAMC,KAM9BxC,EAAEuB,OAAOqH,QACXpC,GAAiBuC,GAAa,IAAIA,EAAUxG,KAE5CiE,GAAiBwC,GAAcA,EAAUC,QAAOF,GAAYA,EAASG,SAAW3G,EAAK2G,WAEvF,MAAMC,EAAwB,IAAIlC,GAClChJ,QAAQC,IAAIiL,GACZA,EAAsB3G,IAAU2G,EAAsB3G,GACtDmE,EAAkBwC,EAAsB,EAiNCC,CAAapJ,EAAGuC,EAAMC,GACvCoG,QAAS3B,EAAezE,QAG5BlD,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,cAAaL,UACvCC,EAAAA,EAAAA,KAAA,SAAOuB,QAAS,OAAS2B,EAAMnD,UAACC,EAAAA,EAAAA,KAAA,UAAAD,SAASkD,EAAK2G,cAE9C5J,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,cAAaL,UACrCC,EAAAA,EAAAA,KAAA,UAAAD,SAASkD,EAAK8G,eAEhB/J,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,YAAWL,SAClCkD,EAAKqF,aAERtI,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,YAAWL,SAClCkD,EAAKK,UAERtD,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,YAAWL,UACnCF,EAAAA,EAAAA,MAAA,SAAO0B,QAAS,OAAS2B,EAAMnD,SAAA,CAAC,KAACC,EAAAA,EAAAA,KAAA,UAAAD,SAASkD,EAAKsC,kBAEjDvF,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,cAAaL,SACpCkD,EAAK+G,aAERhK,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,cAAaL,SACpCkD,EAAKuC,YA5BiCtC,MAkC3ClD,EAAAA,EAAAA,KAACkJ,EAAAA,GAAS,CAAC,QAAM,qBAAoBnJ,UACnCC,EAAAA,EAAAA,KAACwJ,EAAAA,GAAc,CAACpJ,UAAU,cAAc6J,QAAS,EAAElK,SAAS,yEAAH,WAQnEC,EAAAA,EAAAA,KAAA,SACCd,EAAUqI,UAAYrI,EAAUqI,SAASlC,OAAS,GACjDxF,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAAAF,SAAA,EACHC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACqD,GAAI,CAAE2G,KAAM,EAAGC,OAAQ,GAAIpK,UACjCC,EAAAA,EAAAA,KAACoK,EAAAA,EAAmB,CAAC3E,WAAYA,EAAYC,YAAaA,EAAaC,aA/T7DoC,IACxBpJ,QAAQC,IAAI,mCACZD,QAAQC,IAAImJ,GACZhB,EAAegB,GACfD,EAAkBC,GAClBV,EAAkBC,MAAMpI,EAAUqI,SAASlC,QAAQmC,MAAK,IACxDC,GAAa,EAAM,OA4TL5H,EAAAA,EAAAA,MAACK,EAAAA,GAAI,CAACqD,GAAI,EAAExD,SAAA,CAAC,UACRb,EAAUmL,WAAW,eAG1B,cAKX,C,mCC7dG,IAACC,EAAU,CAAC,UAAW,wc","sources":["views/common/AlbumInfo.js","views/common/PaginationComponent.js","views/common/SongList.js","../node_modules/@coreui/icons/src/free/cil-sync.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList, throwError } from '../../common/utils'\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\nimport PropTypes from 'prop-types';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n  CSpinner,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nimport axiosInstance from '../../common/axiosInstance';\nconst AlbumInfo = ({ openModal, albumId }) => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  //목록이동\n  const goListClick = () => {\n    navigate('/music/albumList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setAlbumData({ ...albumData, releaseDate: formattedDate })\n\n  }\n\n  useEffect(() => {\n    console.log('albumId>>>> ' + albumId)\n    submitSearchAlbum();\n\n  }, [albumId]); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n\n\n  const setSongRuntime = (e) => {\n    const value = e.target.value;\n\n    if (/^[\\d:]*$/.test(value)) {\n      setSongReqData({ ...songReqData, runtime: e.target.value });\n    }\n\n  }\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n  **********************************************************************/\n  //앨범 유효성검사\n  const [validated, setValidated] = useState(false);\n\n  //앨범 상세 \n  const [albumData, setAlbumData] = useState();\n\n  // 곡조회리스트\n  const [songDatas, setSongDatas] = useState([]);\n\n  // 곡등록\n  const [songReqData, setSongReqData] = useState(\n    {\n      \"runtime\": \"\",\n      \"trackName\": \"\",\n      \"trackInfo\": \"\"\n    }\n  );\n\n\n\n  //앨범 검색 API\n  const submitSearchAlbum = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/albums/' + albumId);\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumData(data);\n      console.log(\"앨범결과 ----\")\n      console.log(data);\n      submitSearchSong();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //곡 검색 API\n  const submitSearchSong = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/albums/' + albumId + '/songs');\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setSongDatas(data);\n      console.log(\"곡 결과 ----\")\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //앨범 수정하기 API\n  const submitUpdateAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(albumData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    const result = window.confirm('수정하시겠습니까?');\n\n    if (!result) {\n      setValidated(false);\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.post('/api/albums/' + albumId, albumData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('수정되었습니다.');\n      setValidated(false);\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //곡 등록 클릭\n  const clickReqSong = (e) => {\n    e.preventDefault();\n\n    if (!songReqData.trackInfo) {\n      alert('Track Number를 입력해 주세요.');\n      return;\n    }\n\n    if (!songReqData.trackName) {\n      alert('Title을 입력해주세요.');\n      return;\n    }\n\n    if (!songReqData.runtime) {\n      alert('Running Time을 입력해주세요/');\n      return;\n    } else {\n      if (/^\\d{0,2}:\\d{0,2}$/.test(songReqData.runtime) == false) {\n        alert('Running Time을 알맞게 입력해주세요 [00:00] 형식 /');\n        return;\n      }\n    }\n\n\n    const result = window.confirm('해당곡을 등록 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitReqSong();\n\n  };\n\n\n  //곡 등록 하기 API\n  const submitReqSong = async () => {\n\n    try {\n      const response = await axiosInstance.post('/api/albums/' + albumId + '/songs', songReqData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('등록되었습니다.');\n      setValidated(false);\n      submitSearchSong();\n      setSongReqData(\n        {\n          \"runtime\": \"\",\n          \"trackName\": \"\",\n          \"trackInfo\": \"\"\n        }\n      );\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //곡 삭제 클릭\n  const clickDeletSong = (e, songId) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 삭제 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitDeletSong(songId);\n  };\n\n  //곡 삭제 API\n  const submitDeletSong = async (songId) => {\n\n    console.log(songId);\n\n    try {\n      const response = await axiosInstance.delete('/api/songs/' + songId);\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('삭제되었습니다.');\n      setValidated(false);\n      submitSearchSong();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n\n  return (\n    <CContainer>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>앨범조회</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              {albumData ? (\n                <CForm\n                  className=\"row g-3 needs-validation\"\n                  noValidate\n                  validated={validated}\n                  onSubmit={submitUpdateAlbum}\n                >\n                  <CCol xs={10} >\n                    <CFormLabel htmlFor=\"validationCustom04\">ID : {albumId}</CFormLabel>\n                  </CCol>\n                  <CCol xs={2} >\n                    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                    <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" disabled defaultChecked={albumData.useYn} onChange={(e) => setAlbumData({ ...albumData, useYn: e.target.value })} />\n                  </CCol>\n                  <CCol xs={12}>\n                    <CImage rounded thumbnail align=\"center\" src={ReactImg} width={150} height={150} />\n                    <CCardBody>\n                      <CCardText>\n                        <CFormInput type=\"file\" id=\"formFile\" disabled />\n                      </CCardText>\n                    </CCardBody>\n                  </CCol>\n\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"lab_media\">미디어*</CFormLabel>\n                    <CFormSelect id=\"sel_media\" value={albumData.media} onChange={(e) => setAlbumData({ ...albumData, media: e.target.value })} disabled >\n                      {midiaCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                    <CFormFeedback invalid>미디어를 선택해주세요</CFormFeedback>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputLabel\">Label</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputLabel\" value={albumData.label} onChange={(e) => setAlbumData({ ...albumData, label: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputName\">앨범명*</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputName\" value={albumData.name} required onChange={(e) => setAlbumData({ ...albumData, name: e.target.value })} maxLength={100} disabled />\n                    <CFormFeedback invalid>앨범명을 입력해주세요.</CFormFeedback>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputAartist\">아티스트*</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputAartist\" value={albumData.artist} required onChange={(e) => setAlbumData({ ...albumData, artist: e.target.value })} maxLength={100} disabled />\n                    <CFormFeedback invalid>아티스트를 입력해주세요.</CFormFeedback>\n                  </CCol>\n\n                  <CCol md={12}>\n                    <CFormLabel htmlFor=\"inputSeries\">Series</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputSeries\" value={albumData.series} onChange={(e) => setAlbumData({ ...albumData, series: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n\n                  <CCol xs={12}>\n                    <CFormLabel htmlFor=\"inputFormat\">Format</CFormLabel>\n                    <CFormTextarea id=\"inputFormat\" rows=\"3\" value={albumData.format} onChange={(e) => setAlbumData({ ...albumData, format: e.target.value })} maxLength={250} disabled ></CFormTextarea>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputCountry\">발매국가*</CFormLabel>\n                    <div >\n                      <CFormSelect id=\"inputCountry\" value={albumData.countryCD} onChange={(e) => setAlbumData({ ...albumData, countryCD: e.target.value })} disabled>\n                        {cntryCD.map((item, index) => (\n                          <option value={item.id} key={index}>{item.name}</option>\n                        ))}\n                      </CFormSelect>\n                      <CFormFeedback invalid>발매국가를 선택해주세요.</CFormFeedback>\n                    </div>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputReleaseDate\">발매일</CFormLabel>\n                    <div style={{ display: 'flex', width: '100%' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div style={{ width: '90%' }}>\n                        <DatePicker disabled\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumData.releaseDate}\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                  <CCol md={12}>\n                    <CFormLabel htmlFor=\"txt_genre\">장르</CFormLabel>\n                    <CFormInput type=\"text\" id=\"txt_genre\" value={albumData.musicGenre} onChange={(e) => setAlbumData({ ...albumData, musicGenre: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n                  <CCol md={12}>\n                    <CFormLabel htmlFor=\"txt_style\">Style</CFormLabel>\n                    <CFormInput type=\"text\" id=\"txt_style\" value={albumData.style} onChange={(e) => setAlbumData({ ...albumData, style: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n                  <div className=\"d-grid gap-2\">\n                  </div>\n                </CForm>\n              ) : (<div className=\"d-flex justify-content-center\">\n                <CSpinner />\n              </div>\n              )}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          <strong>곡</strong> <small></small>\n        </CCardHeader>\n        {albumData ? (\n          <CCardBody>\n            <CRow>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staNo\" value=\"No\" readOnly plainText />\n              </CCol>\n              <CCol xs={3}>\n                <CFormInput type=\"text\" id=\"staTrackNumber\" value=\"Track Number*\" readOnly plainText />\n              </CCol>\n              <CCol xs={5}>\n                <CFormInput type=\"text\" id=\"staTitle\" value=\"Title*\" readOnly plainText />\n              </CCol>\n              <CCol xs={2}>\n                <CFormInput type=\"text\" id=\"staRunningTime\" value=\"Running Time*\" readOnly plainText />\n              </CCol>\n            </CRow>\n            {songDatas.map((item, index) => (\n              <CRow key={index}>\n                <CCol xs={1}>\n                  <CFormInput type=\"text\" id={'txtNoReq${index}'} value={songDatas.length - index} readOnly plainText />\n                </CCol>\n                <CCol xs={3}>\n                  <CFormInput type=\"text\" id={'txtTrackNumber${index}'} value={item.trackNumber} readOnly plainText />\n                </CCol>\n                <CCol xs={5}>\n                  <CFormInput type=\"text\" id={'txtTrackName${index}'} value={item.trackName} readOnly plainText />\n                </CCol>\n                <CCol xs={2}>\n                  <CFormInput type=\"text\" id={'txtTrackRuntime${index}'} value={item.runtime} readOnly plainText />\n                </CCol>\n              </CRow>\n            ))}\n          </CCardBody>\n        ) : (<div className=\"d-flex justify-content-center\">\n          <CSpinner />\n        </div>\n        )}\n      </CCard>\n    </CContainer>\n  );\n};\n\nAlbumInfo.propTypes = {\n  openModal: PropTypes.func, // openModal 프로퍼티의 타입을 지정\n  albumId: PropTypes.number, // openModal 프로퍼티의 타입을 지정\n};\n\nexport default AlbumInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CPagination, CPaginationItem } from '@coreui/react';\n\nconst PaginationComponent = ({ totalPages, currentPage, onPageChange }) => {\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxButtons = 5; // 한 번에 보여줄 최대 버튼 수\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n\n    // 현재 페이지를 중심으로 앞뒤로 최대 maxButtons/2 개씩 버튼을 표시합니다.\n    let start = Math.max(1, currentPage - halfMaxButtons);\n    let end = Math.min(totalPages, start + maxButtons - 1);\n\n    // 만약 현재 페이지가 처음 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 1로 설정하고 끝 페이지를 maxButtons 개로 설정합니다.\n    if (currentPage <= halfMaxButtons) {\n      start = 1;\n      end = Math.min(totalPages, maxButtons);\n    }\n    // 만약 현재 페이지가 마지막 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 totalPages - maxButtons + 1로 설정하고 끝 페이지를 totalPages로 설정합니다.\n    else if (currentPage >= totalPages - halfMaxButtons) {\n      start = Math.max(1, totalPages - maxButtons + 1);\n      end = totalPages;\n    }\n\n    // 페이지 버튼을 생성합니다.\n    for (let i = start; i <= end; i++) {\n      items.push(\n        <CPaginationItem key={i} active={i === currentPage} onClick={() => onPageChange(i)}>\n          {i}\n        </CPaginationItem>\n      );\n    }\n    return items;\n  };\n\n  return (\n    <CPagination aria-label=\"Page navigation example\">\n      <CPaginationItem aria-label=\"Previous\" disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}>\n        <span aria-hidden=\"true\">&laquo;</span>\n      </CPaginationItem>\n      {renderPaginationItems()}\n      <CPaginationItem aria-label=\"Next\" disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}>\n        <span aria-hidden=\"true\">&raquo;</span>\n      </CPaginationItem>\n    </CPagination>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationComponent;\n","import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList , throwError} from '../../common/utils'\nimport PaginationComponent from './PaginationComponent';\n\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CFormCheck,\n} from '@coreui/react'\nimport PropTypes from 'prop-types';\n\nimport axiosInstance from '../../common/axiosInstance';\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\n\n\n\nconst SongList = ({ openModal, sendDataToParent }) => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n\n\n  const [selectedDate, setSelectedDate] = useState(null); //등록일 from\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태\n  const [totalPages, setTotalPages] = useState(0); // 현재 페이지 상태\n  const [songChkDatas, setSongChkDatas] = useState([]); //전달할 선택데이터\n\n\n\n  // 날짜가 선택될 때 호출될 콜백 함수\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    if(date){\n      const formattedDate = date.toISOString().slice(0, 10);\n      setSongSearch({ ...songSearch, startCreateDate: formattedDate })\n    }\n\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    if(date){\n      const formattedDate = date.toISOString().slice(0, 10);\n      setSongSearch({ ...songSearch, endCreateDate: formattedDate })\n    }\n    \n  }\n\n  //초기화\n  const clickReset = date => {\n\n    setSelectedDate(null);\n    setSelectedDate2(null);\n\n    setSongSearch({\n      \"artist\": \"\",\n      \"trackName\": \"\",\n      \"endCreateDate\": \"\",\n      \"musicGenre\": \"\",\n      \"name\": \"\",\n      \"page\": 1,\n      \"size\": 10,\n      \"startCreateDate\": \"\",\n      \"mediaCode\": \"\",\n      \"albumName\" : \"\"\n    });\n\n    setCurrentPage(1);\n    setTotalPages(0);\n    setCheckboxStates(Array(songDatas.contents.length).fill(false));\n    setSongDatas({ contents: [] });\n    setSelectAll(false);\n  }\n\n\n\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [songDatas, setSongDatas] = useState({ contents: [] });\n\n  //검색조건\n  const [songSearch, setSongSearch] = useState({});\n\n  // 각 체크박스의 상태를 저장할 배열 상태\n  const [checkboxStates, setCheckboxStates] = useState(Array(songDatas.contents.length).fill(false));\n\n\n\n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    submitSearchSongs();\n  }\n\n  //페이징\n  const clickPage = (e, page) => {\n    e.preventDefault();\n    songSearch.page = page;\n    submitSearchSongs();\n    console.log(\"===page =  : \" + page);\n  }\n\n\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({});\n\n  //페이지 변경\n  const handlePageChange = (page) => {\n    console.log('현재페이지 ');\n    console.log(page);\n    setCurrentPage(page); // 페이지 변경 시 현재 페이지 상태 업데이트\n    submitSearchSongs(page);\n    setCheckboxStates(Array(songDatas.contents.length).fill(false));\n    setSelectAll(false);\n  };\n\n  \n\n  //검색 API\n  const submitSearchSongs = async (page) => {\n    setSongChkDatas([]);\n    console.log(songSearch);\n\n    if(page > -1){\n      setSongSearch(prevState => ({\n        ...prevState,\n        page: page\n      }));\n\n      songSearch.page = page;\n    }\n\n    try {\n      const response = await axiosInstance.get('/api/songs', {\n        params: songSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setSongDatas(data);\n\n      console.log(data);\n      setTotalPages(data.totalPages)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n \n  useEffect(() => {\n    clickReset();\n  }, []);\n\n  const [selectAll, setSelectAll] = useState(false);\n  //체크박스체크\n  const chkSongClick = async(e, item, index) => {\n    // 페이지 이동 방지\n    // var songChkData = {\n    //   \"songId\": id,\n    //   \"tableId\": 0\n    // };\n    if (e.target.checked) {\n      setSongChkDatas((prevData) => [...prevData, item]);\n    } else {\n      setSongChkDatas((prevDatas) => prevDatas.filter(prevData => prevData.songId !== item.songId));\n    }\n    const updatedCheckboxStates = [...checkboxStates];\n    console.log(updatedCheckboxStates);\n    updatedCheckboxStates[index] = !updatedCheckboxStates[index];\n    setCheckboxStates(updatedCheckboxStates);\n    //setSelectAll(updatedCheckboxStates.every((state) => state));\n  };\n\n   \n\n   /**\n    * 전체선택 박스\n    */\n  const handleMasterCheckboxChange = () => {\n    setSelectAll(!selectAll);\n    setCheckboxStates(Array(songDatas.contents.length).fill(!selectAll));\n    if(selectAll == false){\n      var contents = songDatas.contents;\n      console.log(contents);\n      var allChkDataArr = [];\n      if(contents){\n        for(var i = 0 ; i < contents.length; i++){\n          allChkDataArr.push(contents[i]);\n        }\n        setSongChkDatas(allChkDataArr);\n        console.log('allChkDataArr >>');\n        console.log(allChkDataArr);\n      }\n      \n    }else{\n      setSongChkDatas([]);\n    }\n  };\n\n  // const handleCheckboxChange = (index) => {\n  //   const newCheckboxStates = [...checkboxStates];\n  //   newCheckboxStates[index] = !newCheckboxStates[index];\n  //   setCheckboxStates(newCheckboxStates);\n  //   setSelectAll(newCheckboxStates.every((state) => state));\n  // };\n\n\n  \n\n  //추가\n  const submitRegAlbum = async (e) => {\n    e.preventDefault();\n    console.log(songChkDatas);\n\n    if (songChkDatas.length == 0) {\n      alert('곡을 선택해주세요');\n      return;\n    } else {\n      const result = window.confirm('해당곡을 등록 하시겠습니까?');\n\n      if (!result) {\n        return;\n      }\n    }\n\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    setSongChkDatas([]);\n    setSelectAll(false);\n    setCheckboxStates(Array(songDatas.contents.length).fill(false));\n    \n    \n\n    sendDataToParent(songChkDatas);\n\n    \n\n\n    //openModal(false);\n\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>곡검색</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchSongs}>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMedia\" className=\"col-form-label\">미디어</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormSelect id=\"inputMedia\" aria-label=\"미디어\" onChange={(e) => setSongSearch({ ...songSearch, mediaCode: e.target.value })}>\n                      <option value={''}>-전체-</option>\n                      {midiaCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMusicGenre\" className=\"col-form-label\" >곡명</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputMusicGenre\" aria-label=\"곡명\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, trackName: e.target.value })} />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMusicGenre\" className=\"col-form-label\" >장르</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputMusicGenre\" aria-label=\"장르\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, musicGenre: e.target.value })} />\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputName\" className=\"col-form-label\">앨범명</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputName\" aria-label=\"앨범명\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, albumName: e.target.value })} />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputArtist\" className=\"col-form-label\">아티스트</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <CFormInput type=\"text\" id=\"inputArtist\" aria-label=\"아티스트\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, artist: e.target.value })} />\n                  </CCol>\n                  <CCol md={1}>\n                    <CFormLabel htmlFor=\"inputEmail3\" className=\"col-form-label\">등록일</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                </CRow>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={4}>\n                      <CButton component=\"input\" type=\"button\" color=\"info\" value=\"추가\" onClick={submitRegAlbum} />\n                    </CCol>\n                    <CCol xs={4}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"reset\" color=\"light\" value=\"초기화\" onClick={clickReset} />\n                        <CButton component=\"input\" type=\"reset\" color=\"primary\" value=\"조회하기\" onClick={(e) => submitSearch(e)} />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">\n                        <input\n\n                            id={'chk_total'}\n                            type=\"checkbox\"\n                            onChange={handleMasterCheckboxChange}\n                            checked={selectAll}\n                        />\n                  \n                    </CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">미디어</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">곡명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Track<br/>Number</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Running<br/>Time</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {songDatas.contents && songDatas.contents.length > 0 ? (\n                    songDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <input\n                            id={'chk_' + index}\n                            type=\"checkbox\"\n                            onChange={(e) => chkSongClick(e, item, index)}\n                            checked={checkboxStates[index]}\n                          />\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        <label htmlFor={'chk_' + index}><strong>{item.songId}</strong></label>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.mediaName}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.albumName}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          <label htmlFor={'chk_' + index}> <strong>{item.trackName}</strong></label>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.trackInfo}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.runtime}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={8} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {songDatas.contents && songDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 5, offset: 5 }}>\n                  <PaginationComponent totalPages={totalPages} currentPage={currentPage} onPageChange={handlePageChange} />\n                    \n                  </CCol>\n                  <CCol md={2}>\n                    총 {songDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nSongList.propTypes = {\n  openModal: PropTypes.func, // openModal 프로퍼티의 타입을 지정\n  sendDataToParent: PropTypes.func,\n};\n\nexport default SongList\n","export var cilSync = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M410.168,133.046,381.21,104.088,464.017,104l-.034-32L328,72.144V208h32V128.132l27.541,27.541A152.5,152.5,0,0,1,279.972,416l.056,32a184.5,184.5,0,0,0,130.14-314.954Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M232.028,104l-.056-32a184.5,184.5,0,0,0-130.14,314.954L130.878,416H48v32H184V312H152v79.868l-27.541-27.541A152.5,152.5,0,0,1,232.028,104Z' class='ci-primary'/>\"];\n"],"names":["_ref","openModal","albumId","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","selectedDate","setSelectedDate","useEffect","console","log","submitSearchAlbum","validated","setValidated","albumData","setAlbumData","songDatas","setSongDatas","songReqData","setSongReqData","async","data","axiosInstance","get","submitSearchSong","error","throwError","_jsxs","CContainer","children","_jsx","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","window","confirm","response","post","headers","alert","xs","CFormLabel","htmlFor","CFormFeedback","invalid","CFormSwitch","label","id","disabled","defaultChecked","useYn","onChange","target","value","CImage","rounded","thumbnail","align","src","ReactImg","width","height","CCardText","CFormInput","type","CFormSelect","media","map","item","index","name","maxLength","required","artist","md","series","CFormTextarea","rows","format","countryCD","style","display","placeItems","marginRight","CIcon","icon","cilCalendar","size","DatePicker","selected","date","formattedDate","toISOString","slice","releaseDate","dateFormat","shouldCloseOnSelect","minDate","Date","maxDate","musicGenre","CSpinner","readOnly","plainText","length","trackNumber","trackName","runtime","totalPages","currentPage","onPageChange","CPagination","CPaginationItem","onClick","renderPaginationItems","items","halfMaxButtons","Math","floor","maxButtons","start","max","end","min","i","push","active","sendDataToParent","selectedDate2","setSelectedDate2","setCurrentPage","setTotalPages","songChkDatas","setSongChkDatas","clickReset","setSongSearch","setCheckboxStates","Array","contents","fill","setSelectAll","songSearch","checkboxStates","albumSearch","setAlbumSearch","submitSearchSongs","page","prevState","params","selectAll","_Fragment","mediaCode","placeholder","albumName","startCreateDate","whiteSpace","endCreateDate","CButton","component","color","submitSearch","CTable","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","handleMasterCheckboxChange","allChkDataArr","checked","CTableBody","CTableDataCell","prevData","prevDatas","filter","songId","updatedCheckboxStates","chkSongClick","mediaName","trackInfo","colSpan","span","offset","PaginationComponent","totalCount","cilSync"],"sourceRoot":""}