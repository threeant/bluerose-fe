{"version":3,"file":"static/js/6634.576e745f.chunk.js","mappings":"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","sources":["views/display/DisplayInfo.js","../node_modules/@coreui/icons/src/free/cil-caret-bottom.ts","../node_modules/@coreui/icons/src/free/cil-caret-top.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilSync,\n  cilCaretTop,\n  cilCaretBottom\n} from '@coreui/icons'\nimport { useNavigate, useLocation} from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList, getCurrentDate, throwError } from '../../common/utils'\nimport SongList from '../common/SongList'; // MyModal 컴포넌트의 경로를 알맞게 설정\nimport AlbumInfo from '../common/AlbumInfo'\nimport axiosInstance from '../../common/axiosInstance';\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CFormFeedback,\n  CFormSwitch,\n  CSpinner\n} from '@coreui/react'\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\n\nconst DisplayInfo = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const location = useLocation();\n  const {displayId} = location.state;\n\n  \n  const navigate = useNavigate();\n  const [dispCD] = useState(getCodeList('DISP')); // 전시CD\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  useEffect(() => {\n    console.log('displayId>>>> ' + displayId)\n    submitSearchDisplay();\n    submitSearchDisplaySongList();\n\n  }, [displayId]); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n\n\n  const goFormClick = () => { //등록화면이동\n    navigate('/music/albumReg');\n  }\n\n  const [visibleSong, setVisibleSong] = useState(false);\n  const [visibleAlbum, setVisibleAlbum] = useState(false)\n  //신청곡 추가 버튼\n  const popMusicAddClick = () => {\n    setVisibleSong(!visibleSong)\n  }\n\n\n  //앨범 팝업 추가 버튼\n  const popAlbumInfoClick = (e, pAlbumId) => {\n    e.preventDefault();\n    //setAlbumId('1');\n    //setVisibleAlbum(!visibleAlbum);\n  }\n\n  //목록이동\n  const goListClick = () => {\n    navigate('/display/displayList');\n  };\n\n\n\n\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //전시 유효성검사\n  const [validated, setValidated] = useState(false);\n\n  //전시 상세 \n  //onst [displayData, setDisplayData] = useState();\n  //리스트\n  const [displaySongDatas, setDisplaySongDatas] = useState([]);\n\n  //플레잉곡\n  const [nowPlayingData, setNowPlayingData] = useState({});\n\n  //전시 상세 \n  const [displayUpdateData, setDisplayUpdateData] = useState({});\n\n\n  const handleMoveUp = (index) => {\n    if (index > 0) {\n      const newData = [...displaySongDatas];\n      [newData[index - 1], newData[index]] = [newData[index], newData[index - 1]];\n      setDisplaySongDatas(newData);\n    }\n  };\n\n  const handleMoveDown = (index) => {\n    if (index < displaySongDatas.length - 1) {\n      const newData = [...displaySongDatas];\n      [newData[index], newData[index + 1]] = [newData[index + 1], newData[index]];\n      setDisplaySongDatas(newData);\n    }\n  };\n\n  //초기화후 조회\n  const refreshDisplayInfo = async () => {\n    const dateStr = getCurrentDate();\n    /*const hour = new Date().getHours();\n    if (hour < 6) {\n      dateStr = getAddDate(\"d\", -1, dateStr, \"-\")\n    }\n    */\n\n    submitSearchDisplaySongList(dateStr);\n    \n\n  };\n\n  //전시상세 API\n  const submitSearchDisplay = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/display/' + displayId);\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      //setDisplayData(data);\n      console.log(\"상세결과 ----\")\n      console.log(data);\n      setDisplayUpdateData({\n        codeId : data.displayTypeId\n        , displayCount : data.displayNum\n        , sort :  data.sort\n        , title : data.title\n        , useYn : data.useYn\n      })\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n\n\n  //전시곡 리스트 검색 API\n  const submitSearchDisplaySongList = async (dateStr) => {\n\n\n    try {\n      const response = await axiosInstance.get('/api/display/' + displayId + '/display-content', {\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setDisplaySongDatas(data);\n\n      console.log(data);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n  \n  //신청곡 삭제 클릭\n  const clickDeletDisplayInfo = (e, displayContentId) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 삭제 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitDeletDisplay(displayContentId);\n  };\n\n  //곡 삭제 API\n  const submitDeletDisplay = async (displayContentId) => {\n\n    console.log(displayContentId);\n\n    try {\n      const response = await axiosInstance.delete('/api/display/' + displayId \n                                          + '/display-content/' + displayContentId);\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('삭제되었습니다.');\n      refreshDisplayInfo();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const controllSongModal = (openYn) => {\n    setVisibleSong(openYn);\n  }\n\n  const controllAlbumModal = (openYn) => {\n    setVisibleAlbum(openYn);\n  }\n\n  //신청곡 완료 클릭\n  const clickCompleteDisplayInfo = (e) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 완료 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitCompleteDisplayInfo();\n  };\n\n\n  //신청곡 완료 API\n  const submitCompleteDisplayInfo = async () => {\n\n\n    try {\n      const response = await axiosInstance.post('/api/song-request/now-playing/complete');\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('곡이 끝났습니다.');\n      refreshDisplayInfo();\n\n\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n\n  }\n\n  //전시 수정하기 API\n  const submitUpdateDisplay = async (e) => {\n    e.preventDefault();\n\n    //console.log(displayData);\n\n    // setDisplayUpdateData({\n    //   codeId : displayData.codeId\n    //   , displayCount : displayData.displayNum\n    //   , sort :  displayData.sort\n    //   , title : displayData.title\n    //   , useYn : displayData.useYn\n\n    // })\n\n    console.log(displayUpdateData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    const result = window.confirm('수정하시겠습니까?');\n\n    if (!result) {\n      setValidated(false);\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.post('/api/display/' + displayId, displayUpdateData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('수정되었습니다.');\n      setValidated(false);\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n  }\n  const handleDataFromSongList = async(datas) => {\n    // 부모 컴포넌트에서 전달받은 데이터 처리\n    console.log('Data from child:', datas);\n    console.log(datas);\n    var songIdArr = [];\n      for(var i = 0 ; i < datas.length; i++){\n      songIdArr[i] = datas[i].songId;\n    }\n\n  var newSongDatas = {\"songIds\": songIdArr};\n    console.log(newSongDatas);\n    console.log('setNewSongDatas >>> ')\n\n\n    try {\n      const response = await axiosInstance.post('/api/display/' + displayId + '/display-content', newSongDatas, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('추가되었습니다.');\n      refreshDisplayInfo();\n      \n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n    \n  };\n  //전시순서변경\n  const updateSort = async (e) => {\n    e.preventDefault();\n    const result = window.confirm('전시순서를 변경하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n    \n    var contents = displaySongDatas;\n    console.log(contents);\n    var updateContents = [];\n    for(var i = 0; i< contents.length; i++){\n      updateContents.push(contents[i].displayContentId);\n    }\n\n    console.log(updateContents);\n    try {\n      const response = await axiosInstance.patch('/api/display/'+displayId+'/display-content', \n        {displayContentIds : updateContents}\n        ,{headers: {\n          'Content-Type': 'application/json',\n        }}\n      );\n\n      // API 응답에서 데이터 추출\n      const data = response;\n      // 데이터를 상태 변수에 저장\n      \n      console.log(data);\n      if(data.status == '200'){\n        alert('변경되었습니다.');\n      }\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n  const handleDataFromSongList2 = (datas) => {\n    // 부모 컴포넌트에서 전달받은 데이터 처리\n    console.log('Data from child:', datas);\n    console.log(datas);\n\n    console.log(displaySongDatas);\n\n  datas.map((item)=>{\n    console.log(item)\n    var newData = {\n      \"albumId\": item.albumId,\n      \"albumName\": item.albumName,\n      \"artist\": item.artist,\n      \"displayContentId\": '',\n      \"displayItemId\": item.displayId,\n      \"runtime\": item.runtime,\n      \"songId\": item.songId,\n      \"trackInfo\": item.trackInfo,\n      \"trackName\": item.trackName,\n      \"newYn\" : true\n    }\n    setDisplaySongDatas((prevData) => [...prevData, newData]);\n  })\n    \n    console.log(displaySongDatas);\n    console.log('displaySongDatas >>> ')\n    \n  };\n\n\n\n  return (\n    <>\n      <CModal\n        size=\"xl\"\n        visible={visibleSong}\n        onClose={() => setVisibleSong(false)}\n        aria-labelledby=\"OptionalSizesExample2\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"OptionalSizesExample1\">전시곡 추가</CModalTitle>\n        </CModalHeader>\n        <CModalBody><SongList openModal={controllSongModal} sendDataToParent={handleDataFromSongList}/></CModalBody>\n      </CModal>\n      <CModal\n        size=\"xl\"\n        visible={visibleAlbum}\n        onClose={() => setVisibleAlbum(false)}\n        aria-labelledby=\"OptionalSizesExample4\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"OptionalSizesExample3\">앨범정보</CModalTitle>\n        </CModalHeader>\n        <CModalBody><AlbumInfo openModal={controllAlbumModal} displayId={displayId} /></CModalBody>\n      </CModal>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>전시수정</strong></CCardHeader>\n            <CCardBody>\n              {displayUpdateData ? (\n                <CForm\n                  className=\"row g-3 needs-validation\"\n                  noValidate\n                  validated={validated}\n                  onSubmit={submitUpdateDisplay}\n                >\n                  <CCol xs={10} >\n                    <CFormLabel htmlFor=\"validationCustom04\">ID : {displayId}</CFormLabel>\n                  </CCol>\n                  <CCol xs={2} >\n                    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                    <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\"  checked={displayUpdateData.useYn}  onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, useYn: e.target.checked })} />\n                  </CCol>\n\n\n                  <CCol xs={12}>\n                    <CFormLabel htmlFor=\"inputName\">제목*</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputName\" value={displayUpdateData.title} required onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, title: e.target.value })} maxLength={100} />\n                    <CFormFeedback invalid>앨범명을 입력해주세요.</CFormFeedback>\n                  </CCol>\n                  <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">노출곡수*</CFormLabel>\n                  <CFormInput type=\"number\" id=\"inputDisplayCount\" value={displayUpdateData.displayCount}  required onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, displayCount: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>노출곡 갯수를 입력해주세요.</CFormFeedback>\n                </CCol>\n                  <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">전시타입*</CFormLabel>\n                  <CFormSelect id=\"sel_media\" value={displayUpdateData.codeId} onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, codeId: e.target.value })}  >\n                    {dispCD.map((item, index) => (\n                      <option value={item.id} key={index}>{item.name}</option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>제목을 입력해주세요.</CFormFeedback>\n                </CCol>\n                  <div className=\"d-grid gap-2\">\n                    <CRow className=\"justify-content-between\">\n                      <CCol xs={12}>\n                        <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                          <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                          <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"수정하기\" />\n                        </div>\n                      </CCol>\n                    </CRow>\n                  </div>\n                </CForm>\n              ) : (<div className=\"d-flex justify-content-center\">\n                <CSpinner />\n              </div>\n              )}\n            </CCardBody>\n          </CCard>\n\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>곡목록</strong> {displaySongDatas && displaySongDatas.length > 0 ? (<small>총 {displaySongDatas.length\n            }건</small>) : ('')}</CCardHeader>\n            <CCardBody>\n              <div className=\"d-grid gap-2\">\n                <CRow className=\"justify-content-between\">\n                  <CCol xs={12}>\n                    <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                      <CButton component=\"input\" type=\"reset\" color=\"secondary\" value=\"전시곡 추가\" onClick={popMusicAddClick} />\n                      <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"순서변경하기\" onClick={updateSort}/>\n                      <CButton color=\"light\" onClick={refreshDisplayInfo}>\n                        <CIcon icon={cilSync} title=\"Download file\" />\n                      </CButton>\n                    </div>\n                  </CCol>\n                </CRow>\n              </div>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Track Number</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">전시순서</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\"></CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {displaySongDatas && displaySongDatas.length > 0 ? (\n                    displaySongDatas.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          {/* <strong>{index+1}</strong> */}\n                          <strong>{item.displayContentId}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong><a href='/' onClick={(e) => popAlbumInfoClick(e, item.displayId)}>{item.albumName}</a></strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.trackInfo}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.trackName}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        {index !== 0  ? (\n                          <CButton color=\"info\" variant=\"outline\" onClick={() => handleMoveUp(index)} disabled={index === 0}>\n                            <CIcon icon={cilCaretTop} title=\"Download file\" />\n                          </CButton>\n                          ) : ('')}\n\n                        {index+1  !== displaySongDatas.length  ? (\n                          <CButton color=\"info\" variant=\"outline\" onClick={() => handleMoveDown(index)} disabled={index === displaySongDatas.length - 1}>\n                            <CIcon icon={cilCaretBottom} title=\"Download file\" />\n                          </CButton>\n                          ) : ('')}\n\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        {item.newYn !== true ? (\n                          <CButton color=\"dark\" shape=\"rounded-pill\" className=\"mb-3\" onClick={(e) => clickDeletDisplayInfo(e, item.displayContentId)}>\n                          삭제\n                        </CButton>\n                        ) : ('[신규]')}\n                          \n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={7} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default DisplayInfo\n","export var cilCaretBottom = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M256.286,408.357,16.333,138.548V104H496v36.45ZM56.892,136,256.358,360.287,457.042,136Z' class='ci-primary'/>\"];\n","export var cilCaretTop = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M496,400.357H16.333V363.908L256.047,96,496,365.81Zm-440.708-32H455.441L255.975,144.07Z' class='ci-primary'/>\"];\n"],"names":["DisplayInfo","location","useLocation","displayId","state","navigate","useNavigate","dispCD","useState","getCodeList","midiaCD","cntryCD","useEffect","console","log","submitSearchDisplay","submitSearchDisplaySongList","visibleSong","setVisibleSong","visibleAlbum","setVisibleAlbum","validated","setValidated","displaySongDatas","setDisplaySongDatas","nowPlayingData","setNowPlayingData","displayUpdateData","setDisplayUpdateData","refreshDisplayInfo","async","dateStr","getCurrentDate","data","axiosInstance","get","codeId","displayTypeId","displayCount","displayNum","sort","title","useYn","error","throwError","headers","submitDeletDisplay","displayContentId","response","delete","alert","_jsxs","_Fragment","children","CModal","size","visible","onClose","_jsx","CModalHeader","CModalTitle","id","CModalBody","SongList","openModal","openYn","sendDataToParent","datas","songIdArr","i","length","songId","newSongDatas","post","AlbumInfo","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","window","confirm","xs","CFormLabel","htmlFor","CFormFeedback","invalid","CFormSwitch","label","checked","onChange","target","CFormInput","type","value","required","maxLength","CFormSelect","map","item","index","name","CButton","component","color","onClick","goListClick","CSpinner","popMusicAddClick","contents","updateContents","push","patch","displayContentIds","status","CIcon","icon","cilSync","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","CTableDataCell","href","popAlbumInfoClick","pAlbumId","albumName","artist","trackInfo","trackName","variant","newData","handleMoveUp","disabled","cilCaretTop","handleMoveDown","cilCaretBottom","newYn","shape","clickDeletDisplayInfo","colSpan"],"sourceRoot":""}