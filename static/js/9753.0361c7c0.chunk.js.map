{"version":3,"file":"static/js/9753.0361c7c0.chunk.js","mappings":"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","sources":["common/ComModal.js","views/common/PaginationComponent.js","views/manage/EventList.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CPagination, CPaginationItem } from '@coreui/react';\n\nconst PaginationComponent = ({ totalPages, currentPage, onPageChange }) => {\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxButtons = 5; // 한 번에 보여줄 최대 버튼 수\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n\n    // 현재 페이지를 중심으로 앞뒤로 최대 maxButtons/2 개씩 버튼을 표시합니다.\n    let start = Math.max(1, currentPage - halfMaxButtons);\n    let end = Math.min(totalPages, start + maxButtons - 1);\n\n    // 만약 현재 페이지가 처음 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 1로 설정하고 끝 페이지를 maxButtons 개로 설정합니다.\n    if (currentPage <= halfMaxButtons) {\n      start = 1;\n      end = Math.min(totalPages, maxButtons);\n    }\n    // 만약 현재 페이지가 마지막 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 totalPages - maxButtons + 1로 설정하고 끝 페이지를 totalPages로 설정합니다.\n    else if (currentPage >= totalPages - halfMaxButtons) {\n      start = Math.max(1, totalPages - maxButtons + 1);\n      end = totalPages;\n    }\n\n    // 페이지 버튼을 생성합니다.\n    for (let i = start; i <= end; i++) {\n      items.push(\n        <CPaginationItem key={i} active={i === currentPage} onClick={() => onPageChange(i)}>\n          {i}\n        </CPaginationItem>\n      );\n    }\n    return items;\n  };\n\n  return (\n    <CPagination aria-label=\"Page navigation example\">\n      <CPaginationItem aria-label=\"Previous\" disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}>\n        <span aria-hidden=\"true\">&laquo;</span>\n      </CPaginationItem>\n      {renderPaginationItems()}\n      <CPaginationItem aria-label=\"Next\" disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}>\n        <span aria-hidden=\"true\">&raquo;</span>\n      </CPaginationItem>\n    </CPagination>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationComponent;\n","import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate , useLocation} from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList, throwError } from '../../common/utils'\nimport axiosInstance from '../../common/axiosInstance';\nimport PaginationComponent from '../common/PaginationComponent';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst EventList = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n  const [alertType, setAlertType] = useState('');\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertText, setAlertText] = useState('');\n  const [acceptType, setAcceptType] = useState('');\n \n\n\n  const alertPage = (txt) => {\n    setAlertType('alert');\n    setAlertText(txt);\n    setAlertVisible(true);\n  };\n\n  const confirmPage = (txt, type) => {\n    setAlertType('confirm');\n    setAlertText(txt);\n    setAlertVisible(true);\n    setAcceptType(type);\n  };\n\n  const handleCloseModal = () => {\n    setAlertVisible(false);\n  };\n  const handleAccept = () => {\n    setAlertVisible(false);\n    \n\n    setAcceptType('');\n    \n  };\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const [selectedDate, setSelectedDate] = useState(null); //등록일 from\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태\n  const [totalPages, setTotalPages] = useState(0); // 현재 페이지 상태\n  //const { searchParam} = location.state;\n\n\n  // 날짜가 선택될 때 호출될 콜백 함수\n  const handleDateChange = date => {\n    debugger;\n    //console.log(date);\n    setSelectedDate(date);\n    if(!date){\n      return;\n    }\n\n    \n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    \n    console.log(formattedDate);\n    setEventSearch({ ...eventSearch, startReleaseDate: formattedDate })\n\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    if(!date){\n      return;\n    }\n\n    \n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    setEventSearch({ ...eventSearch, endReleaseDate: formattedDate })\n  }\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  //검색조건\n  const [eventSearch, setEventSearch] = useState({\n    \"artist\": \"\",\n    \"endReleaseDate\": \"\",\n    \"musicGenre\": \"\",\n    \"name\": \"\",\n    \"page\": 0,\n    \"size\": 15,\n    \"startReleaseDate\": \"\",\n    \"mediaCode\": \"\"\n  });\n\n  const [albumSearchFlg, setEventSearchFlg] = useState(false);\n\n  \n\n  //초기화\n  const clickReset = date => {\n\n    setSelectedDate(null);\n    setSelectedDate2(null);\n\n    setEventSearch({\n      \"artist\": \"\",\n      \"endReleaseDate\": \"\",\n      \"musicGenre\": \"\",\n      \"name\": \"\",\n      \"page\": 1,\n      \"size\": 15,\n      \"startReleaseDate\": \"\",\n      \"mediaCode\": \"\"\n    });\n  }\n\n  const goFormClick = () => { //등록화면이동\n    navigate('/manage/eventReg');\n  }\n\n  const goInfoClick = (e, id) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    //console.log('goInfoClick : ' + id);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    //const newQuery = encodeURIComponent(eventSearch);\n    //setSearchQuery(newQuery);\n      console.log(id)\n    localStorage.setItem('alblumListSearch', JSON.stringify(eventSearch));\n    navigate('/manage/eventInfo', { state: { albumId: id , listSearch : eventSearch} });\n    //history.push('/music/albumInfo'+id);\n  };\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [eventDatas, seteventDatas] = useState({ contents: [] });\n\n  \n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    handlePageChange(1);\n  }\n\n  //페이지 변경\n  const handlePageChange = (page) => {\n    //console.log('현재페이지 ');\n    //console.log(page);\n    setCurrentPage(page); // 페이지 변경 시 현재 페이지 상태 업데이트\n    submitSearchEvents(page);\n  };\n\n  useEffect(() => {\n    \n    const dataFromStorage = JSON.parse(localStorage.getItem('alblumListSearch'));\n\n    if (dataFromStorage) {\n      setEventSearch(dataFromStorage);\n      handlePageChange(dataFromStorage.page);\n      setEventSearchFlg(true);\n      localStorage.removeItem('alblumListSearch');\n      \n    }else{\n      submitSearchEvents(0);\n    }\n\n  }, []);\n\n  useEffect(() => {\n    if (albumSearchFlg) {\n      handlePageChange(eventSearch.page); // albumSearch가 변경될 때만 호출됨\n      localStorage.removeItem('alblumListSearch');\n    }\n  }, [albumSearchFlg]);\n\n  //검색 API\n  const submitSearchEvents = async (page) => {\n\n    if(page > -1){\n      setEventSearch(prevState => ({\n        ...prevState,\n        page: page\n      }));\n\n      eventSearch.page = page;\n    }\n\n    \n\n    console.log(eventSearch);\n\n\n    if(eventSearch.endReleaseDate || eventSearch.startReleaseDate){\n      if(!eventSearch.endReleaseDate || !eventSearch.startReleaseDate){\n        alertPage('등록일 기간을 정확히 입력해주세요.')\n        return;\n      }\n    }\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: eventSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      seteventDatas(data);\n\n      console.log(data);\n      setTotalPages(data.totalPages);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      //console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const submitRegEvent = async (e) => {\n    e.preventDefault();\n\n    //console.log(eventSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: eventSearch\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      seteventDatas(data);\n\n      //console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      //console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>이벤트관리</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearch}>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMedia\" className=\"col-form-label\">타입</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormSelect id=\"inputMedia\" aria-label=\"미디어\" onChange={(e) => setEventSearch({ ...eventSearch, mediaCode: e.target.value })}>\n                      <option>-전체-</option>\n                      {midiaCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.etc1}</option>\n                      ))}\n                    </CFormSelect>\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMusicGenre\" className=\"col-form-label\" >이벤트명</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputMusicGenre\" aria-label=\"이벤트명\" placeholder=\"전체\" onChange={(e) => setEventSearch({ ...eventSearch, musicGenre: e.target.value })} />\n                  </CCol>\n                </CRow>\n                \n                <CRow className=\"mb-3\">\n                  <CCol md={1}>\n                    <CFormLabel htmlFor=\"inputEmail3\" className=\"col-form-label\">이벤트 기간</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                </CRow>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={4}>\n                      <CButton component=\"input\" type=\"button\" color=\"danger\" value=\"등록하기\" onClick={goFormClick} />\n                    </CCol>\n                    <CCol xs={4}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"reset\" color=\"light\" value=\"초기화\" onClick={clickReset} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"조회하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">이벤트타입</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">이벤트명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">이벤트기간</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">전시여부</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {eventDatas.contents && eventDatas.contents.length > 0 ? (\n                    eventDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} onClick={(e) => goInfoClick(e, item.id)}>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.id}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.type}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <a href='/' onClick={(e) => goInfoClick(e, item.name)}>{item.name}</a>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.date}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.dispYn}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {eventDatas.contents && eventDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 6, offset: 5 }}>\n                  <PaginationComponent totalPages={totalPages} currentPage={currentPage} onPageChange={handlePageChange} />\n                  </CCol>\n                  <CCol md={1}>\n                    총 {eventDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default EventList\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","totalPages","currentPage","onPageChange","CPagination","CPaginationItem","disabled","renderPaginationItems","items","halfMaxButtons","Math","floor","maxButtons","start","max","end","min","i","push","active","EventList","navigate","useNavigate","midiaCD","useLocation","useState","getCodeList","cntryCD","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","selectedDate","setSelectedDate","selectedDate2","setSelectedDate2","setCurrentPage","setTotalPages","searchQuery","setSearchQuery","eventSearch","setEventSearch","albumSearchFlg","setEventSearchFlg","goInfoClick","e","preventDefault","console","log","localStorage","setItem","JSON","stringify","state","albumId","listSearch","eventDatas","seteventDatas","contents","handlePageChange","page","submitSearchEvents","useEffect","dataFromStorage","parse","getItem","removeItem","async","prevState","endReleaseDate","startReleaseDate","txt","data","axiosInstance","get","params","headers","error","throwError","_Fragment","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","onSubmit","xs","CFormLabel","htmlFor","CFormSelect","onChange","mediaCode","target","value","map","item","index","etc1","CFormInput","placeholder","musicGenre","md","style","display","placeItems","marginRight","cilCalendar","size","DatePicker","selected","date","formattedDate","Date","getTime","getTimezoneOffset","toISOString","slice","dateFormat","shouldCloseOnSelect","minDate","maxDate","whiteSpace","component","goFormClick","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","length","CTableDataCell","href","name","dispYn","colSpan","span","offset","PaginationComponent","totalCount"],"sourceRoot":""}