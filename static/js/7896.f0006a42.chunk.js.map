{"version":3,"file":"static/js/7896.f0006a42.chunk.js","mappings":"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","sources":["views/system/AdminInfo.js"],"sourcesContent":["import React, { useState,useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate,useLocation } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\n\nimport { getCodeList , throwError} from '../../common/utils'\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst AdminInfo = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n  const location = useLocation();\n  const { userId } = location.state;\n\n  //목록이동\n  const goListClick = () => {\n    navigate('/system/AdminList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setAdminData({ ...adminData, releaseDate: formattedDate })\n  }\n  const [validated, setValidated] = useState(false);\n\n  const [adminData, setAdminData] = useState({\n    \"etc\": \"\",\n    \"id\": \"\",\n    \"name\": \"\",\n    \"password\": \"\",\n    \"passwordChk\": \"\",\n    \"useYn\" : true,\n    \"adminId\" :\"\",\n    \n});\n\n  \n\n  useEffect(() => {\n\n    submitSearchAdmin();\n\n  }, []); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n\n  //앨범 검색 API\n  const submitSearchAdmin = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/admin/' + userId);\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAdminData(data);\n      console.log(\"앨범결과 ----\")\n      console.log(data);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  \n\n  //등록하기 API\n  const submitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(adminData);\n\n    const result = window.confirm('해당 관리자를 수정 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    if(adminData.password || adminData.passwordChk){\n      if(adminData.password != adminData.passwordChk){\n        alert('비밀번호와 비밀번호 확인이 일치하지 않습니다');\n        setAdminData((prevData) => ({\n          ...prevData,\n          passwordChk: '',\n        }));\n        setValidated(false);\n        return;\n      }\n    }\n    \n\n    try {\n      //adminData.rawPassword = adminData.password\n      const response = await axiosInstance.post('/api/admin/'+userId, adminData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      setAdminData({\n        \"etc\": \"\",\n        \"id\": \"\",\n        \"name\": \"\",\n        \"password\": \"\"\n    });\n      alert('등록되었습니다.');\n      navigate('/system/AdminList');\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n  return (\n    <CContainer>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>관리자조회</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                className=\"row g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={submitRegAlbum}\n              >\n                {/* <CCol xs={10} >\n                  <CFormLabel></CFormLabel>\n                </CCol>\n                <CCol xs={2} >\n                  <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                  <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" defaultChecked={adminData.useYn} onChange={(e) => setAdminData({ ...adminData, useYn: e.target.value })} />\n                </CCol> */}\n                 <CCol xs={10} >\n                    <CFormLabel htmlFor=\"validationCustom04\">ID : {userId}</CFormLabel>\n                  </CCol>\n                  <CCol xs={2} >\n                    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                    <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" defaultChecked={adminData.useYn} onChange={(e) => setAdminData({ ...adminData, useYn: e.target.checked })} />\n                  </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputId\">아이디*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputId\" disabled='disabled' required value={adminData.adminId} onChange={(e) => setAdminData({ ...adminData, adminId: e.target.value })} maxLength={10} />\n                  <CFormFeedback invalid>아이디를 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">이름*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputName\"  value={adminData.name} required onChange={(e) => setAdminData({ ...adminData, name: e.target.value })} maxLength={10} />\n                  <CFormFeedback invalid>이름을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputPw\">비밀번호*</CFormLabel>\n                  <CFormInput type=\"password\" id=\"inputPw\" onChange={(e) => setAdminData({ ...adminData, password: e.target.value })} maxLength={20} />\n                  <CFormFeedback invalid>비밀번호을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputPwChk\">비밀번호확인*</CFormLabel>\n                  <CFormInput type=\"password\" id=\"inputPwChk\" onChange={(e) => setAdminData({ ...adminData, passwordChk: e.target.value })} maxLength={20} />\n                  <CFormFeedback invalid>비밀번호확인을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputEtc\">비고</CFormLabel>\n                  <CFormTextarea id=\"inputEtc\" rows=\"3\" value={adminData.etc} onChange={(e) => setAdminData({ ...adminData, etc: e.target.value })} ></CFormTextarea>\n                </CCol>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"수정하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </CContainer>\n  );\n};\n\nexport default AdminInfo;\n"],"names":["AdminInfo","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","location","useLocation","userId","state","selectedDate","setSelectedDate","validated","setValidated","adminData","setAdminData","useEffect","submitSearchAdmin","async","data","axiosInstance","get","console","log","error","throwError","_jsx","CContainer","children","CRow","CCol","_jsxs","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","window","confirm","currentTarget","checkValidity","password","passwordChk","alert","prevData","response","post","headers","stopPropagation","xs","CFormLabel","htmlFor","CFormFeedback","invalid","CFormSwitch","label","id","defaultChecked","useYn","onChange","target","checked","CFormInput","type","disabled","required","value","adminId","maxLength","name","CFormTextarea","rows","etc","CButton","component","color","onClick","goListClick"],"sourceRoot":""}