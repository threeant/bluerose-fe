{"version":3,"file":"static/js/9466.a9e95e55.chunk.js","mappings":"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","sources":["common/ComModal.js","views/manage/EventReg.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState,useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport { getCodeList , throwError} from '../../common/utils'\nimport axios from 'axios'\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\nimport axiosInstance from '../../common/axiosInstance';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst EventReg = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('EVENT')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n\n    /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n    const [alertType, setAlertType] = useState('');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [alertText, setAlertText] = useState('');\n    const [acceptType, setAcceptType] = useState('');\n   \n  \n  \n    const alertPage = (txt) => {\n      setAlertType('alert');\n      setAlertText(txt);\n      setAlertVisible(true);\n    };\n  \n    const confirmPage = (txt, type) => {\n      setAlertType('confirm');\n      setAlertText(txt);\n      setAlertVisible(true);\n      setAcceptType(type);\n    };\n  \n    const handleCloseModal = () => {\n      setAlertVisible(false);\n    };\n    const handleAccept = () => {\n      setAlertVisible(false);\n      if(acceptType === 'reg'){// 선곡\n        submitRegAlbum();\n    }\n  \n      setAcceptType('');\n      \n    };\n  \n\n  //목록이동\n  const goListClick = () => {\n    navigate('/manage/eventList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setAlbumData({ ...albumData, startDate: formattedDate })\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    const formattedDate = date.toISOString().slice(0, 10);\n    \n    setAlbumData({ ...albumData, endDate: formattedDate })\n  }\n  const [validated, setValidated] = useState(false);\n\n  const [albumData, setAlbumData] = useState({\n    //image : '',        //이미지\n    name: '',        //앨범명\n    artist: '',      //아티스트\n    label: '',       //라벨\n    format: '',      //포맷\n    releaseDate: '',      //발매일\n    musicGenre: '',      //장르\n    countryCD: '9',        //발매국가\n    mediaCD: midiaCD[0].id,        //미디어\n    style: '',       //스타일\n    series: '',      //시리즈\n    useYn: true,      //사용여부\n    image: null\n  });\n\n  useEffect(() => {\n    //console.log(midiaCD);\n    //console.log(midiaCD[0].id)\\\n\n  }, []); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n  const [imageData, setImageData] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n\n\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const handleFileChange = (event) => {\n    // console.log(event);\n    // setAlbumData((prevAlbumData) => ({\n    //   ...prevAlbumData,\n    //   image: event.target.files[0]\n    // }));\n\n\n    const selectedImage = event.target.files[0];\n\n    if (selectedImage) {\n      // 이미지 파일인지 확인\n      if (selectedImage.type.startsWith('image/')) {\n        //setImage(selectedImage);\n\n        setAlbumData((prevAlbumData) => ({\n          ...prevAlbumData,\n          image: selectedImage\n        }));\n\n        // 이미지 미리보기 생성\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          setPreviewUrl(reader.result);\n        };\n        reader.readAsDataURL(selectedImage);\n      } else {\n        // 이미지 파일이 아닌 경우 초기화\n        setPreviewUrl(null);\n        setAlbumData((prevAlbumData) => ({\n          ...prevAlbumData,\n          image: null\n        }));\n        alertPage('이미지 파일만 업로드할 수 있습니다.');\n      }\n    }\n\n  };\n\n  const handleRemoveImage = () => {\n    // 이미지 제거\n    setPreviewUrl(null);\n    setAlbumData((prevAlbumData) => ({\n      ...prevAlbumData,\n      image: null\n    }));\n  };\n\n  //등록하기 API\n  const confirmSubmitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(albumData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    //const result = window.confirm('앨범을 등록하시겠습니까?');\n    confirmPage('앨범을 등록하시겠습니까?', 'reg')\n\n    \n  };\n\n\n  //등록하기 API\n  const submitRegAlbum = async () => {\n    \n    try {\n      const response = await axiosInstance.post('/api/albums', albumData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      setAlbumData({\n        name: '',        //앨범명\n        artist: '',      //아티스트\n        label: '',       //라벨\n        format: '',      //포맷\n        releaseDate: '2023-10-28',      //발매일\n        musicGenre: '',      //장르\n        countryCD: '9',        //발매국가\n        mediaCD: midiaCD[0].id,        //미디어\n        style: '',       //스타일\n        series: '',      //시리즈\n        useYn: true,      //사용여부\n        image: null\n      });\n      alertPage('등록되었습니다.');\n      \n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const handleAftFunc = () => {\n    navigate('/music/AlbumList');\n  };\n\n  return (\n    <CContainer>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept} aftFunc={handleAftFunc}/>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>이벤트등록</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                className=\"row g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={confirmSubmitRegAlbum}\n              >\n                <CCol xs={10} >\n                  <CFormLabel></CFormLabel>\n                </CCol>\n                <CCol xs={2} >\n                  <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                  <CFormSwitch label=\"노출여부\" id=\"formSwitchCheckChecked\" defaultChecked={albumData.useYn} onChange={(e) => setAlbumData({ ...albumData, useYn: e.target.value })} />\n                </CCol>\n                <CCol xs={6}>\n                  {previewUrl ? (<CImage rounded thumbnail align=\"center\" src={previewUrl} width={150} height={150} />) : (\n                    <CImage rounded thumbnail align=\"center\" src={process.env.PUBLIC_URL + '/basicImg/w_lp2.png'} width={250} height={150} />\n                  )}\n                </CCol>\n                <CCol xs={6}>\n                  <CCardBody>\n                    <CCardText>\n                      <CFormInput type=\"file\" size=\"lg\" accept=\"image/*\" id=\"formFile\" onChange={handleFileChange} />\n                    </CCardText>\n                  </CCardBody>\n                </CCol>\n                {/* <CCol xs={2}>\n                  <CCardBody>\n                    <CCardText>\n                      {previewUrl ? (\n                        <CButton color=\"secondary\" onClick={handleRemoveImage}>삭제</CButton>) : ('')}\n                    </CCardText>\n                  </CCardBody>\n                </CCol> */}\n\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"lab_media\">이벤트 타입*</CFormLabel>\n                  <CFormSelect id=\"sel_media\" defaultValue={albumData.mediaCD} onChange={(e) => setAlbumData({ ...albumData, mediaCD: e.target.value })}  >\n                    {midiaCD.map((item, index) => (\n                      <option value={item.id} key={index}>{item.name}</option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>미디어를 선택해주세요</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                <CFormLabel htmlFor=\"inputReleaseDate\">이벤트 기간 *</CFormLabel>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                    </div>\n                </CCol>\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputAartist\">이벤트 명*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputAartist\" required onChange={(e) => setAlbumData({ ...albumData, artist: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>아티스트를 입력해주세요.</CFormFeedback>\n                </CCol>\n\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputFormat\">비고</CFormLabel>\n                  <CFormTextarea id=\"inputFormat\" rows=\"3\" onChange={(e) => setAlbumData({ ...albumData, format: e.target.value })} maxLength={250}></CFormTextarea>\n                </CCol>\n                \n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"등록하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </CContainer>\n  );\n};\n\nexport default EventReg;\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","EventReg","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","alertPage","txt","selectedDate","setSelectedDate","selectedDate2","setSelectedDate2","validated","setValidated","albumData","setAlbumData","name","artist","label","format","releaseDate","musicGenre","countryCD","mediaCD","style","series","useYn","image","useEffect","imageData","setImageData","fileContent","setFileContent","previewUrl","setPreviewUrl","submitRegAlbum","async","response","axiosInstance","post","headers","console","log","data","error","throwError","CContainer","ComModal","handleCloseModal","handleAccept","handleAftFunc","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","confirmPage","currentTarget","checkValidity","stopPropagation","xs","CFormLabel","CFormFeedback","invalid","CFormSwitch","defaultChecked","onChange","target","value","CImage","rounded","thumbnail","align","src","width","height","process","CCardText","CFormInput","size","accept","event","selectedImage","files","startsWith","prevAlbumData","reader","FileReader","onloadend","result","readAsDataURL","htmlFor","CFormSelect","defaultValue","map","item","index","display","placeItems","marginRight","cilCalendar","DatePicker","selected","date","formattedDate","toISOString","slice","startDate","dateFormat","shouldCloseOnSelect","minDate","Date","maxDate","whiteSpace","endDate","required","maxLength","CFormTextarea","rows","component","goListClick"],"sourceRoot":""}