{"version":3,"file":"static/js/4721.b22a2323.chunk.js","mappings":"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","sources":["common/appConfig.js","common/axiosInstance.js","views/pages/login/Login.js"],"sourcesContent":["// appConfig.js\nconst appConfig = {\n    apiUrl: 'http://localhost:8080',\n    wsUrl : 'ws://localhost:8080/ws-stomp',\n  };\n  \n\nexport default appConfig;","// axiosInstance.js\n\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport appConfig from '../common/appConfig';\n\nconst axiosInstance = axios.create({\n  baseURL: appConfig.apiUrl , // API의 기본 URL\n  timeout: 5000, // 타임아웃 설정\n});\n// Request 인터셉터 설정\naxiosInstance.interceptors.request.use(\n    \n    \n    (config) => {\n      const accessToken = sessionStorage.getItem('accessToken'); // 세션 스토리지에서 토큰을 가져옴\n      //const accessToken =  \"a2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbQ==\"\n  \n      if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`; // 헤더에 토큰 추가\n      }\n  \n      return config;\n    },\n    (error) => {\n        const statusCode = error.response.status;\n        console.log('>>>error');\n        console.log(error)\n        // const navigate = useNavigate();\n        \n    \n        // // 오류 코드에 따른 분기 처리\n        // switch (statusCode) {\n        //   case 401:\n        //     navigate('/login');\n        //     break;\n        //   case 404:\n        //     navigate('/404');\n        //     break;\n        //   case 500:\n        //     navigate('/500');\n        //     break;\n        //   default:\n        //     navigate('/error');\n        // }\n    \n        return Promise.reject(error);\n    }\n  );\n\nexport default axiosInstance;\n","import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport appConfig from '../../../common/appConfig';\nimport axiosInstance from '../../../common/axiosInstance';\n\nconst Login = () => {\n\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    id: '',\n    password: ''\n  });\n\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    console.log(userData);\n\n    if(!userData.id || !userData.password){\n      alert('아이디와 비밀번호를 입력해 주세요');\n      return;\n    }\n    // 로그인 API 호출 또는 서버로 요청\n    try {\n      \n      const response = await axios.post( appConfig.apiUrl + '/auth/admin/login', userData, {\n        headers: {\n          //'Content-Type': 'multipart/form-data',\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      console.log(response);\n      if (response.status === 200) {\n      \n        // 로그인 성공 처리\n        const accessToken = response.data.tokenInfo.accessToken;\n        sessionStorage.setItem('accessToken',accessToken)\n        \n        axiosInstance.interceptors.request.use(\n          (config) => {\n        \n            if (accessToken) {\n              config.headers.Authorization = `Bearer ${accessToken}`; // 헤더에 토큰 추가\n            }\n        \n            return config;\n          },\n          (error) => {\n            return Promise.reject(error);\n          }\n        );\n\n\n\n          try {\n            //공통코드 \n            const codeResponse = await axiosInstance.get('/api/code', {}, {\n              headers: {\n                'Content-Type': 'application/json',\n              }\n            });\n            console.log(response.data);\n\n                // API 응답에서 데이터 추출\n            const codeData = codeResponse.data;\n            // 데이터를 상태 변수에 저장\n\n            console.log(codeData)\n            const jsonData = JSON.stringify(codeData);\n            sessionStorage.setItem('codeData', jsonData);\n\n\n            // 세션에서 JSON 데이터 가져오기\n            const jsonCodeData = sessionStorage.getItem('codeData');\n\n            // JSON 문자열을 파싱하여 JavaScript 객체로 변환\n            const codeList = JSON.parse(jsonCodeData);\n\n            // userData 객체 사용\n            for (const c of codeList) {\n              //console.log(c);\n              console.log(c.description);\n              console.log(c.code);\n              console.log(c.codes);\n            }\n            navigate('/dashboard');\n            //sessionStorage.removeItem('codeData');\n\n          } catch (error) {\n            console.error('Error fetching data:', error);\n          }\n\n\n      } else {\n        // 로그인 실패 처리\n        alert('로그인 실패');\n        console.error('로그인 실패');\n        console.log(response);\n      }\n    } catch (error) {\n      alert(error.response.data.message)\n      console.error('오류 발생:', error);\n    }\n  }\n\n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput id=\"txtUserId\" placeholder=\"ID\" autoComplete=\"userId\" onChange={(e) => setUserData({ ...userData, id: e.target.value })} />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        id=\"txtPassword\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        onChange={(e) => setUserData({ ...userData, password: e.target.value })}\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"Login\" className=\"px-4\" onClick={handleSubmit} />\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n"],"names":["apiUrl","wsUrl","axiosInstance","axios","create","baseURL","appConfig","timeout","interceptors","request","use","config","accessToken","sessionStorage","getItem","headers","Authorization","concat","error","response","status","console","log","Promise","reject","Login","navigate","useNavigate","userData","setUserData","useState","id","password","_jsx","className","children","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","_jsxs","CForm","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","placeholder","autoComplete","onChange","e","target","value","cilLockLocked","type","xs","CButton","component","color","onClick","async","preventDefault","post","data","tokenInfo","setItem","codeResponse","get","codeData","jsonData","JSON","stringify","jsonCodeData","codeList","parse","c","description","code","codes","alert","message"],"sourceRoot":""}