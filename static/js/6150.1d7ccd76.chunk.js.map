{"version":3,"file":"static/js/6150.1d7ccd76.chunk.js","mappings":"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","sources":["views/music/MusicReqHisList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\n\n\nimport { throwError } from '../../common/utils'\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst MusicReqHisList = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const [selectedDate, setSelectedDate] = useState(null); //등록일 from\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"page\": 1,\n    \"size\": 15\n  });\n\n\n  // 날짜가 선택될 때 호출될 콜백 함수\n  const handleDateChange = date => {\n    console.log(date);\n    setSelectedDate(date);\n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    console.log(formattedDate);\n    //setAlbumSearch({ ...albumSearch, startDate: formattedDate });\n    setAlbumSearch(prevState => ({\n      ...prevState,\n      startDate: formattedDate\n    }));\n\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    setAlbumSearch(prevState => ({\n      ...prevState,\n      endDate: formattedDate\n    }));\n  }\n\n  useEffect(() => {\n    // 7일 전 날짜 계산\n    const todayDate = new Date();\n    const pastDate = new Date(todayDate.getTime() - 7 * 24 * 60 * 60 * 1000); // 7일 전 날짜 계산\n    \n    handleDateChange(pastDate);\n    handleDateChange2(todayDate);\n  }, []);\n\n  //초기화\n  const clickReset = date => {\n\n\n    setAlbumSearch({\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"page\": 1,\n      \"size\": 1\n    });\n    const todayDate = new Date();\n    const pastDate = new Date(todayDate.getTime() - 7 * 24 * 60 * 60 * 1000); // 7일 전 날짜 계산\n    handleDateChange(pastDate);\n    handleDateChange2(todayDate);\n  }\n\n  const goInfoClick = (e, date) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    console.log('goInfoClick : ' + date);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    navigate('/music/musicReqHisInfo', { state: { dateStr :  date} });\n  };\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [albumDatas, setAlbumDatas] = useState({ contents: [] });\n\n  \n\n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    submitSearchAlbums();\n  }\n\n  //페이징\n  const clickPage = (e, page) => {\n    e.preventDefault();\n    albumSearch.page = page;\n    submitSearchAlbums();\n    console.log(\"===page =  : \" + page);\n  }\n\n  //검색 API\n  const submitSearchAlbums = async (e) => {\n    e.preventDefault();\n\n    console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/song-request/history', {\n        params: albumSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>신청곡 히스토리 검색</strong></CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchAlbums}>\n                <CRow className=\"mb-3\">\n                  <CCol md={1}>\n                    <CFormLabel htmlFor=\"inputEmail3\" className=\"col-form-label\">검색일</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumSearch.startDate}\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumSearch.endDate}\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                </CRow>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"reset\" color=\"light\" value=\"초기화\" onClick={clickReset} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"조회하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">날짜</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">신청곡수</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                    albumDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{index + 1}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <a href='/' onClick={(e) => goInfoClick(e, item.date)}>{item.date}</a>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.numberOfSongRequested}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 6, offset: 5 }}>\n                    <CPagination aria-label=\"Page navigation example\">\n                      <CPaginationItem aria-label=\"Previous\" disabled={!albumDatas.first} onClick={(e) => clickPage(e, 1)}>\n                        <span aria-hidden=\"true\">&laquo;</span>\n                      </CPaginationItem>\n                      {Array.from({ length: albumDatas.totalPages }, (_, index) => (\n                        <CPaginationItem key={index} active onClick={(e) => clickPage(e, index + 1)}>{index + 1}</CPaginationItem>\n                      ))}\n                      <CPaginationItem aria-label=\"Next\" disabled={!albumDatas.last}>\n                        <span aria-hidden=\"true\">&raquo;</span>\n                      </CPaginationItem>\n                    </CPagination>\n                  </CCol>\n                  <CCol md={1}>\n                    총 {albumDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default MusicReqHisList\n"],"names":["MusicReqHisList","navigate","useNavigate","selectedDate","setSelectedDate","useState","selectedDate2","setSelectedDate2","albumSearch","setAlbumSearch","handleDateChange","date","console","log","formattedDate","Date","getTime","getTimezoneOffset","toISOString","slice","prevState","startDate","handleDateChange2","endDate","useEffect","todayDate","pastDate","albumDatas","setAlbumDatas","contents","clickPage","e","page","preventDefault","submitSearchAlbums","async","data","axiosInstance","get","params","headers","error","throwError","_jsx","_Fragment","children","CRow","CCol","_jsxs","CCard","className","CCardHeader","CCardBody","CForm","onSubmit","md","CFormLabel","htmlFor","style","display","placeItems","marginRight","CIcon","icon","cilCalendar","size","DatePicker","selected","onChange","dateFormat","shouldCloseOnSelect","minDate","maxDate","value","whiteSpace","xs","CButton","component","type","color","onClick","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","length","map","item","index","CTableDataCell","href","goInfoClick","state","dateStr","numberOfSongRequested","colSpan","span","offset","CPagination","CPaginationItem","disabled","first","Array","from","totalPages","_","active","last","totalCount"],"sourceRoot":""}