{"version":3,"file":"static/js/8489.8a3af7bb.chunk.js","mappings":"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","sources":["common/ComModal.js","views/common/AlbumInfo.js","views/common/PaginationComponent.js","views/common/SongList.js","../node_modules/@coreui/icons/src/free/cil-sync.ts"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList, throwError } from '../../common/utils'\nimport appConfig from '../../common/appConfig';\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\nimport PropTypes from 'prop-types';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n  CSpinner,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nimport axiosInstance from '../../common/axiosInstance';\nconst AlbumInfo = ({ openModal, albumId }) => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  //목록이동\n  const [previewUrl, setPreviewUrl] = useState(null);\n\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setAlbumData({ ...albumData, releaseDate: formattedDate })\n\n  }\n\n  useEffect(() => {\n    console.log('albumId>>>> ' + albumId)\n    submitSearchAlbum();\n\n  }, [albumId]); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n\n\n  const setSongRuntime = (e) => {\n    const value = e.target.value;\n\n    if (/^[\\d:]*$/.test(value)) {\n      setSongReqData({ ...songReqData, runtime: e.target.value });\n    }\n\n  }\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n  **********************************************************************/\n  //앨범 유효성검사\n  const [validated, setValidated] = useState(false);\n\n  //앨범 상세 \n  const [albumData, setAlbumData] = useState();\n\n  // 곡조회리스트\n  const [songDatas, setSongDatas] = useState([]);\n\n  // 곡등록\n  const [songReqData, setSongReqData] = useState(\n    {\n      \"runtime\": \"\",\n      \"trackName\": \"\",\n      \"trackInfo\": \"\"\n    }\n  );\n\n\n\n  //앨범 검색 API\n  const submitSearchAlbum = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/albums/' + albumId);\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumData(data);\n      console.log(\"앨범결과 ----\")\n      console.log(data);\n      if (data.imageUrl) {\n        setPreviewUrl(data.imageUrl);\n      }\n      submitSearchSong();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //곡 검색 API\n  const submitSearchSong = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/albums/' + albumId + '/songs');\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setSongDatas(data);\n      console.log(\"곡 결과 ----\")\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //앨범 수정하기 API\n  const submitUpdateAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(albumData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    const result = window.confirm('수정하시겠습니까?');\n\n    if (!result) {\n      setValidated(false);\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.post('/api/albums/' + albumId, albumData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('수정되었습니다.');\n      setValidated(false);\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //곡 등록 클릭\n  const clickReqSong = (e) => {\n    e.preventDefault();\n\n    if (!songReqData.trackInfo) {\n      alert('Track Number를 입력해 주세요.');\n      return;\n    }\n\n    if (!songReqData.trackName) {\n      alert('Title을 입력해주세요.');\n      return;\n    }\n\n    if (!songReqData.runtime) {\n      alert('Running Time을 입력해주세요/');\n      return;\n    } else {\n      if (/^\\d{0,2}:\\d{0,2}$/.test(songReqData.runtime) == false) {\n        alert('Running Time을 알맞게 입력해주세요 [00:00] 형식 /');\n        return;\n      }\n    }\n\n\n    const result = window.confirm('해당곡을 등록 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitReqSong();\n\n  };\n\n\n  //곡 등록 하기 API\n  const submitReqSong = async () => {\n\n    try {\n      const response = await axiosInstance.post('/api/albums/' + albumId + '/songs', songReqData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('등록되었습니다.');\n      setValidated(false);\n      submitSearchSong();\n      setSongReqData(\n        {\n          \"runtime\": \"\",\n          \"trackName\": \"\",\n          \"trackInfo\": \"\"\n        }\n      );\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  //곡 삭제 클릭\n  const clickDeletSong = (e, songId) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 삭제 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitDeletSong(songId);\n  };\n\n  //곡 삭제 API\n  const submitDeletSong = async (songId) => {\n\n    console.log(songId);\n\n    try {\n      const response = await axiosInstance.delete('/api/songs/' + songId);\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('삭제되었습니다.');\n      setValidated(false);\n      submitSearchSong();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n\n  return (\n    <CContainer>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>앨범조회</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              {albumData ? (\n                <CForm\n                  className=\"row g-3 needs-validation\"\n                  noValidate\n                  validated={validated}\n                  onSubmit={submitUpdateAlbum}\n                >\n                  <CCol xs={10} >\n                    <CFormLabel htmlFor=\"validationCustom04\">ID : {albumId}</CFormLabel>\n                  </CCol>\n                  <CCol xs={2} >\n                    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                    <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" disabled defaultChecked={albumData.useYn} onChange={(e) => setAlbumData({ ...albumData, useYn: e.target.value })} />\n                  </CCol>\n                  <CCol xs={12}>\n                    {previewUrl ? (<CImage rounded thumbnail align=\"center\"  src={appConfig.apiUrl + previewUrl} width={150} height={150} />) : (\n                      <CImage rounded thumbnail align=\"center\" src={process.env.PUBLIC_URL + '/basicImg/w_lp2.png'} width={150} height={150} />\n                    )}\n                    <CCardBody>\n                      <CCardText>\n                        <CFormInput type=\"file\" id=\"formFile\" disabled />\n                      </CCardText>\n                    </CCardBody>\n                  </CCol>\n\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"lab_media\">미디어*</CFormLabel>\n                    <CFormSelect id=\"sel_media\" value={albumData.media} onChange={(e) => setAlbumData({ ...albumData, media: e.target.value })} disabled >\n                      {midiaCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                    <CFormFeedback invalid>미디어를 선택해주세요</CFormFeedback>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputLabel\">Label</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputLabel\" value={albumData.label} onChange={(e) => setAlbumData({ ...albumData, label: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputName\">앨범명*</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputName\" value={albumData.name} required onChange={(e) => setAlbumData({ ...albumData, name: e.target.value })} maxLength={100} disabled />\n                    <CFormFeedback invalid>앨범명을 입력해주세요.</CFormFeedback>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputAartist\">아티스트*</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputAartist\" value={albumData.artist} required onChange={(e) => setAlbumData({ ...albumData, artist: e.target.value })} maxLength={100} disabled />\n                    <CFormFeedback invalid>아티스트를 입력해주세요.</CFormFeedback>\n                  </CCol>\n\n                  <CCol md={12}>\n                    <CFormLabel htmlFor=\"inputSeries\">Series</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputSeries\" value={albumData.series} onChange={(e) => setAlbumData({ ...albumData, series: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n\n                  <CCol xs={12}>\n                    <CFormLabel htmlFor=\"inputFormat\">Format</CFormLabel>\n                    <CFormTextarea id=\"inputFormat\" rows=\"3\" value={albumData.format} onChange={(e) => setAlbumData({ ...albumData, format: e.target.value })} maxLength={250} disabled ></CFormTextarea>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputCountry\">발매국가*</CFormLabel>\n                    <div >\n                      <CFormSelect id=\"inputCountry\" value={albumData.countryCD} onChange={(e) => setAlbumData({ ...albumData, countryCD: e.target.value })} disabled>\n                        {cntryCD.map((item, index) => (\n                          <option value={item.id} key={index}>{item.name}</option>\n                        ))}\n                      </CFormSelect>\n                      <CFormFeedback invalid>발매국가를 선택해주세요.</CFormFeedback>\n                    </div>\n                  </CCol>\n                  <CCol xs={6}>\n                    <CFormLabel htmlFor=\"inputReleaseDate\">발매일</CFormLabel>\n                    <div style={{ display: 'flex', width: '100%' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div style={{ width: '90%' }}>\n                        <DatePicker disabled\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumData.releaseDate}\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                  <CCol md={12}>\n                    <CFormLabel htmlFor=\"txt_genre\">장르</CFormLabel>\n                    <CFormInput type=\"text\" id=\"txt_genre\" value={albumData.musicGenre} onChange={(e) => setAlbumData({ ...albumData, musicGenre: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n                  <CCol md={12}>\n                    <CFormLabel htmlFor=\"txt_style\">Style</CFormLabel>\n                    <CFormInput type=\"text\" id=\"txt_style\" value={albumData.style} onChange={(e) => setAlbumData({ ...albumData, style: e.target.value })} maxLength={100} disabled />\n                  </CCol>\n                  <div className=\"d-grid gap-2\">\n                  </div>\n                </CForm>\n              ) : (<div className=\"d-flex justify-content-center\">\n                <CSpinner />\n              </div>\n              )}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          <strong>곡</strong> <small></small>\n        </CCardHeader>\n        {albumData ? (\n          <CCardBody>\n            <CRow>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staNo\" value=\"No\" readOnly plainText />\n              </CCol>\n              <CCol xs={3}>\n                <CFormInput type=\"text\" id=\"staTrackNumber\" value=\"Track Number*\" readOnly plainText />\n              </CCol>\n              <CCol xs={5}>\n                <CFormInput type=\"text\" id=\"staTitle\" value=\"Title*\" readOnly plainText />\n              </CCol>\n              <CCol xs={2}>\n                <CFormInput type=\"text\" id=\"staRunningTime\" value=\"Running Time*\" readOnly plainText />\n              </CCol>\n            </CRow>\n            {songDatas.map((item, index) => (\n              <CRow key={index}>\n                <CCol xs={1}>\n                  <CFormInput type=\"text\" id={'txtNoReq${index}'} value={songDatas.length - index} readOnly plainText />\n                </CCol>\n                <CCol xs={3}>\n                  <CFormInput type=\"text\" id={'txtTrackNumber${index}'} value={item.trackNumber} readOnly plainText />\n                </CCol>\n                <CCol xs={5}>\n                  <CFormInput type=\"text\" id={'txtTrackName${index}'} value={item.trackName} readOnly plainText />\n                </CCol>\n                <CCol xs={2}>\n                  <CFormInput type=\"text\" id={'txtTrackRuntime${index}'} value={item.runtime} readOnly plainText />\n                </CCol>\n              </CRow>\n            ))}\n          </CCardBody>\n        ) : (<div className=\"d-flex justify-content-center\">\n          <CSpinner />\n        </div>\n        )}\n      </CCard>\n    </CContainer>\n  );\n};\n\nAlbumInfo.propTypes = {\n  openModal: PropTypes.func, // openModal 프로퍼티의 타입을 지정\n  albumId: PropTypes.number, // openModal 프로퍼티의 타입을 지정\n};\n\nexport default AlbumInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CPagination, CPaginationItem } from '@coreui/react';\n\nconst PaginationComponent = ({ totalPages, currentPage, onPageChange }) => {\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxButtons = 5; // 한 번에 보여줄 최대 버튼 수\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n\n    // 현재 페이지를 중심으로 앞뒤로 최대 maxButtons/2 개씩 버튼을 표시합니다.\n    let start = Math.max(1, currentPage - halfMaxButtons);\n    let end = Math.min(totalPages, start + maxButtons - 1);\n\n    // 만약 현재 페이지가 처음 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 1로 설정하고 끝 페이지를 maxButtons 개로 설정합니다.\n    if (currentPage <= halfMaxButtons) {\n      start = 1;\n      end = Math.min(totalPages, maxButtons);\n    }\n    // 만약 현재 페이지가 마지막 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 totalPages - maxButtons + 1로 설정하고 끝 페이지를 totalPages로 설정합니다.\n    else if (currentPage >= totalPages - halfMaxButtons) {\n      start = Math.max(1, totalPages - maxButtons + 1);\n      end = totalPages;\n    }\n\n    // 페이지 버튼을 생성합니다.\n    for (let i = start; i <= end; i++) {\n      items.push(\n        <CPaginationItem key={i} active={i === currentPage} onClick={() => onPageChange(i)}>\n          {i}\n        </CPaginationItem>\n      );\n    }\n    return items;\n  };\n\n  return (\n    <CPagination aria-label=\"Page navigation example\">\n      <CPaginationItem aria-label=\"Previous\" disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}>\n        <span aria-hidden=\"true\">&laquo;</span>\n      </CPaginationItem>\n      {renderPaginationItems()}\n      <CPaginationItem aria-label=\"Next\" disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}>\n        <span aria-hidden=\"true\">&raquo;</span>\n      </CPaginationItem>\n    </CPagination>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationComponent;\n","import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList , throwError} from '../../common/utils'\nimport PaginationComponent from './PaginationComponent';\n\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CFormCheck,\n} from '@coreui/react'\nimport PropTypes from 'prop-types';\n\nimport axiosInstance from '../../common/axiosInstance';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\n\n\n\nconst SongList = ({ openModal, sendDataToParent }) => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n    /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n    const [alertType, setAlertType] = useState('');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [alertText, setAlertText] = useState('');\n    const [acceptType, setAcceptType] = useState('');\n   \n  \n  \n    const alertPage = (txt) => {\n      setAlertType('alert');\n      setAlertText(txt);\n      setAlertVisible(true);\n    };\n  \n    const confirmPage = (txt, type) => {\n      setAlertType('confirm');\n      setAlertText(txt);\n      setAlertVisible(true);\n      setAcceptType(type);\n    };\n  \n    const handleCloseModal = () => {\n      setAlertVisible(false);\n    };\n    const handleAccept = () => {\n      setAlertVisible(false);\n      if(acceptType === 'add'){// 추가\n        submitRegAlbum();\n      }\n  \n      \n    };\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n\n\n  const [selectedDate, setSelectedDate] = useState(null); //등록일 from\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태\n  const [totalPages, setTotalPages] = useState(0); // 현재 페이지 상태\n  const [songChkDatas, setSongChkDatas] = useState([]); //전달할 선택데이터\n\n\n\n  // 날짜가 선택될 때 호출될 콜백 함수\n  const handleDateChange = date => {\n    setSelectedDate(date);\n    if(date){\n      const formattedDate = date.toISOString().slice(0, 10);\n      setSongSearch({ ...songSearch, startCreateDate: formattedDate })\n    }\n\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    if(date){\n      const formattedDate = date.toISOString().slice(0, 10);\n      setSongSearch({ ...songSearch, endCreateDate: formattedDate })\n    }\n    \n  }\n\n  //초기화\n  const clickReset = date => {\n\n    setSelectedDate(null);\n    setSelectedDate2(null);\n\n    setSongSearch({\n      \"artist\": \"\",\n      \"trackName\": \"\",\n      \"endCreateDate\": \"\",\n      \"musicGenre\": \"\",\n      \"name\": \"\",\n      \"page\": 1,\n      \"size\": 10,\n      \"startCreateDate\": \"\",\n      \"mediaCode\": \"\",\n      \"albumName\" : \"\"\n    });\n\n    setCurrentPage(1);\n    setTotalPages(0);\n    setCheckboxStates(Array(songDatas.contents.length).fill(false));\n    setSongDatas({ contents: [] });\n    setSelectAll(false);\n  }\n\n\n\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [songDatas, setSongDatas] = useState({ contents: [] });\n\n  //검색조건\n  const [songSearch, setSongSearch] = useState({});\n\n  // 각 체크박스의 상태를 저장할 배열 상태\n  const [checkboxStates, setCheckboxStates] = useState(Array(songDatas.contents.length).fill(false));\n\n\n\n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    submitSearchSongs();\n  }\n\n  //페이징\n  const clickPage = (e, page) => {\n    e.preventDefault();\n    songSearch.page = page;\n    submitSearchSongs();\n    console.log(\"===page =  : \" + page);\n  }\n\n\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({});\n\n  //페이지 변경\n  const handlePageChange = (page) => {\n    console.log('현재페이지 ');\n    console.log(page);\n    setCurrentPage(page); // 페이지 변경 시 현재 페이지 상태 업데이트\n    submitSearchSongs(page);\n    setCheckboxStates(Array(songDatas.contents.length).fill(false));\n    setSelectAll(false);\n  };\n\n  \n\n  //검색 API\n  const submitSearchSongs = async (page) => {\n    setSongChkDatas([]);\n    console.log(songSearch);\n\n    if(page > -1){\n      setSongSearch(prevState => ({\n        ...prevState,\n        page: page\n      }));\n\n      songSearch.page = page;\n    }\n\n    try {\n      const response = await axiosInstance.get('/api/songs', {\n        params: songSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setSongDatas(data);\n\n      console.log(data);\n      setTotalPages(data.totalPages)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n \n  useEffect(() => {\n    clickReset();\n  }, []);\n\n  const [selectAll, setSelectAll] = useState(false);\n  //체크박스체크\n  const chkSongClick = async(e, item, index) => {\n    // 페이지 이동 방지\n    // var songChkData = {\n    //   \"songId\": id,\n    //   \"tableId\": 0\n    // };\n    if (e.target.checked) {\n      setSongChkDatas((prevData) => [...prevData, item]);\n    } else {\n      setSongChkDatas((prevDatas) => prevDatas.filter(prevData => prevData.songId !== item.songId));\n    }\n    const updatedCheckboxStates = [...checkboxStates];\n    console.log(updatedCheckboxStates);\n    updatedCheckboxStates[index] = !updatedCheckboxStates[index];\n    setCheckboxStates(updatedCheckboxStates);\n    //setSelectAll(updatedCheckboxStates.every((state) => state));\n  };\n\n   \n\n   /**\n    * 전체선택 박스\n    */\n  const handleMasterCheckboxChange = () => {\n    setSelectAll(!selectAll);\n    setCheckboxStates(Array(songDatas.contents.length).fill(!selectAll));\n    if(selectAll == false){\n      var contents = songDatas.contents;\n      console.log(contents);\n      var allChkDataArr = [];\n      if(contents){\n        for(var i = 0 ; i < contents.length; i++){\n          allChkDataArr.push(contents[i]);\n        }\n        setSongChkDatas(allChkDataArr);\n        console.log('allChkDataArr >>');\n        console.log(allChkDataArr);\n      }\n      \n    }else{\n      setSongChkDatas([]);\n    }\n  };\n\n  //추가\n  const confirmSubmitRegAlbum = async (e) => {\n    e.preventDefault();\n    console.log(songChkDatas);\n\n    if (songChkDatas.length == 0) {\n      alertPage('곡을 선택해주세요');\n      return;\n    }\n    confirmPage('해당곡을 등록 하시겠습니까?', 'add')\n  }\n\n  //추가\n  const submitRegAlbum = async () => {\n    setSongChkDatas([]);\n    setSelectAll(false);\n    setCheckboxStates(Array(songDatas.contents.length).fill(false));\n    sendDataToParent(songChkDatas);\n  };\n\n  return (\n    <>\n    <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept}/>\n      \n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>곡검색</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchSongs}>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMedia\" className=\"col-form-label\">미디어</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormSelect id=\"inputMedia\" aria-label=\"미디어\" onChange={(e) => setSongSearch({ ...songSearch, mediaCode: e.target.value })}>\n                      <option value={''}>-전체-</option>\n                      {midiaCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMusicGenre\" className=\"col-form-label\" >곡명</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputMusicGenre\" aria-label=\"곡명\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, trackName: e.target.value })} />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMusicGenre\" className=\"col-form-label\" >장르</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputMusicGenre\" aria-label=\"장르\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, musicGenre: e.target.value })} />\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputName\" className=\"col-form-label\">앨범명</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputName\" aria-label=\"앨범명\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, albumName: e.target.value })} />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputArtist\" className=\"col-form-label\">아티스트</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <CFormInput type=\"text\" id=\"inputArtist\" aria-label=\"아티스트\" placeholder=\"전체\" onChange={(e) => setSongSearch({ ...songSearch, artist: e.target.value })} />\n                  </CCol>\n                  <CCol md={1}>\n                    <CFormLabel htmlFor=\"inputEmail3\" className=\"col-form-label\">등록일</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                </CRow>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={4}>\n                      <CButton component=\"input\" type=\"button\" color=\"info\" value=\"추가\" onClick={confirmSubmitRegAlbum} />\n                    </CCol>\n                    <CCol xs={4}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"reset\" color=\"light\" value=\"초기화\" onClick={clickReset} />\n                        <CButton component=\"input\" type=\"reset\" color=\"primary\" value=\"조회하기\" onClick={(e) => submitSearch(e)} />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">\n                        <input\n\n                            id={'chk_total'}\n                            type=\"checkbox\"\n                            onChange={handleMasterCheckboxChange}\n                            checked={selectAll}\n                        />\n                  \n                    </CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">미디어</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">곡명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Track<br/>Number</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Running<br/>Time</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {songDatas.contents && songDatas.contents.length > 0 ? (\n                    songDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <input\n                            id={'chk_' + index}\n                            type=\"checkbox\"\n                            onChange={(e) => chkSongClick(e, item, index)}\n                            checked={checkboxStates[index]}\n                          />\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        <label htmlFor={'chk_' + index}><strong>{item.songId}</strong></label>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.mediaName}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.albumName}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          <label htmlFor={'chk_' + index}> <strong>{item.trackName}</strong></label>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.trackInfo}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.runtime}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={8} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {songDatas.contents && songDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 5, offset: 5 }}>\n                  <PaginationComponent totalPages={totalPages} currentPage={currentPage} onPageChange={handlePageChange} />\n                    \n                  </CCol>\n                  <CCol md={2}>\n                    총 {songDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nSongList.propTypes = {\n  openModal: PropTypes.func, // openModal 프로퍼티의 타입을 지정\n  sendDataToParent: PropTypes.func,\n};\n\nexport default SongList\n","export var cilSync = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M410.168,133.046,381.21,104.088,464.017,104l-.034-32L328,72.144V208h32V128.132l27.541,27.541A152.5,152.5,0,0,1,279.972,416l.056,32a184.5,184.5,0,0,0,130.14-314.954Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M232.028,104l-.056-32a184.5,184.5,0,0,0-130.14,314.954L130.878,416H48v32H184V312H152v79.868l-27.541-27.541A152.5,152.5,0,0,1,232.028,104Z' class='ci-primary'/>\"];\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","openModal","albumId","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","previewUrl","setPreviewUrl","selectedDate","setSelectedDate","useEffect","console","log","submitSearchAlbum","validated","setValidated","albumData","setAlbumData","songDatas","setSongDatas","songReqData","setSongReqData","async","data","axiosInstance","get","imageUrl","submitSearchSong","error","throwError","CContainer","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","window","confirm","response","post","headers","alert","xs","CFormLabel","htmlFor","CFormFeedback","invalid","CFormSwitch","label","disabled","defaultChecked","useYn","onChange","target","value","CImage","rounded","thumbnail","align","src","appConfig","apiUrl","width","height","process","CCardText","CFormInput","CFormSelect","media","map","item","index","name","maxLength","required","artist","md","series","CFormTextarea","rows","format","countryCD","style","display","placeItems","marginRight","cilCalendar","size","DatePicker","selected","date","formattedDate","toISOString","slice","releaseDate","dateFormat","shouldCloseOnSelect","minDate","Date","maxDate","musicGenre","CSpinner","readOnly","plainText","length","trackNumber","trackName","runtime","totalPages","currentPage","onPageChange","CPagination","CPaginationItem","renderPaginationItems","items","halfMaxButtons","Math","floor","maxButtons","start","max","end","min","i","push","active","sendDataToParent","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","selectedDate2","setSelectedDate2","setCurrentPage","setTotalPages","songChkDatas","setSongChkDatas","clickReset","setSongSearch","setCheckboxStates","Array","contents","fill","setSelectAll","songSearch","checkboxStates","albumSearch","setAlbumSearch","submitSearchSongs","page","prevState","params","selectAll","submitRegAlbum","_Fragment","ComModal","handleCloseModal","handleAccept","mediaCode","placeholder","albumName","startCreateDate","whiteSpace","endCreateDate","component","txt","confirmPage","submitSearch","CTable","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","handleMasterCheckboxChange","allChkDataArr","checked","CTableBody","CTableDataCell","prevData","prevDatas","filter","songId","updatedCheckboxStates","chkSongClick","mediaName","trackInfo","colSpan","span","offset","PaginationComponent","totalCount","cilSync"],"sourceRoot":""}