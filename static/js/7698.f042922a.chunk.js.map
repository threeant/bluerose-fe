{"version":3,"file":"static/js/7698.f042922a.chunk.js","mappings":"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","sources":["views/music/MusicReqHisInfo.js"],"sourcesContent":["import React, { useState,useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\n\nimport { getCodeList,throwError } from '../../common/utils'\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst MusicReqHisInfo = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  //const { searchParam} = location.state;\n  \n\n\n\n\n  //초기화\n  const clickReset = date => {\n\n    setAlbumSearch({\n      \"artist\": \"\",\n      \"endReleaseDate\": \"\",\n      \"musicGenre\": \"\",\n      \"name\": \"\",\n      \"page\": 1,\n      \"size\": 15,\n      \"startReleaseDate\": \"\",\n      \"mediaCode\": \"\"\n    });\n  }\n\n  const goFormClick = () => { //등록화면이동\n    navigate('/music/albumReg');\n  }\n\n  const goInfoClick = (e, id) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    console.log('goInfoClick : ' + id);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    navigate('/music/albumInfo', { state: { albumId: id } });\n  };\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [albumDatas, setAlbumDatas] = useState({ contents: [] });\n\n\n\n  \n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({\n    \"artist\": \"\",\n    \"endReleaseDate\": \"\",\n    \"musicGenre\": \"\",\n    \"name\": \"\",\n    \"page\": 0,\n    \"size\": 15,\n    \"startReleaseDate\": \"\",\n    \"mediaCode\": \"\"\n  });\n\n  const location = useLocation();\n  const dateStr = location.state.dateStr;\n\n  useEffect(() => {\n    console.log(dateStr);\n  }, []);\n\n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    submitSearchAlbums();\n  }\n\n  //페이징\n  const clickPage = (e, page) => {\n    e.preventDefault();\n    albumSearch.page = page;\n    submitSearchAlbums();\n    console.log(\"===page =  : \" + page);\n  }\n\n  //검색 API\n  const submitSearchAlbums = async () => {\n\n    console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: albumSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const submitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: albumSearch\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>{dateStr} 신청곡 목록</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchAlbums}>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">TrackNumber</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">테이블번호</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">신청시간</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                    albumDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} onClick={(e) => goInfoClick(e, item.id)}>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.id}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.name}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.name}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.name}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.name}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.releaseDate}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 6, offset: 5 }}>\n                    <CPagination aria-label=\"Page navigation example\">\n                      <CPaginationItem aria-label=\"Previous\" disabled={!albumDatas.first} onClick={(e) => clickPage(e, 1)}>\n                        <span aria-hidden=\"true\">&laquo;</span>\n                      </CPaginationItem>\n                      {Array.from({ length: albumDatas.totalPages }, (_, index) => (\n                        <CPaginationItem key={index} active onClick={(e) => clickPage(e, index + 1)}>{index + 1}</CPaginationItem>\n                      ))}\n                      <CPaginationItem aria-label=\"Next\" disabled={!albumDatas.last}>\n                        <span aria-hidden=\"true\">&raquo;</span>\n                      </CPaginationItem>\n                    </CPagination>\n                  </CCol>\n                  <CCol md={1}>\n                    총 {albumDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default MusicReqHisInfo\n"],"names":["MusicReqHisInfo","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","albumDatas","setAlbumDatas","contents","albumSearch","setAlbumSearch","dateStr","useLocation","state","useEffect","console","log","clickPage","e","page","preventDefault","submitSearchAlbums","async","data","axiosInstance","get","params","headers","error","throwError","_jsx","_Fragment","children","CRow","CCol","_jsxs","CCard","className","CCardHeader","CCardBody","CForm","onSubmit","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","length","map","item","index","onClick","goInfoClick","id","albumId","CTableDataCell","name","artist","releaseDate","colSpan","md","span","offset","CPagination","CPaginationItem","disabled","first","Array","from","totalPages","_","active","last","totalCount"],"sourceRoot":""}