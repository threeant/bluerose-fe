{"version":3,"file":"static/js/5708.848252df.chunk.js","mappings":"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","sources":["common/ComModal.js","views/manage/TableList.js","../node_modules/@coreui/icons/src/free/cil-sync.ts"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState, useEffect } from 'react'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\nimport { throwError } from '../../common/utils'\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\n\nimport CIcon from '@coreui/icons-react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CFormInput,\n  CRow,\n  CContainer,\n  CSpinner,\n} from '@coreui/react';\nimport {\n  cilSync\n} from '@coreui/icons'\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst TableList = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n    /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n    const [alertType, setAlertType] = useState('');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [alertText, setAlertText] = useState('');\n    const [acceptType, setAcceptType] = useState('');\n   \n  \n  \n    const alertPage = (txt) => {\n      setAlertType('alert');\n      setAlertText(txt);\n      setAlertVisible(true);\n    };\n  \n    const confirmPage = (txt, type) => {\n      setAlertType('confirm');\n      setAlertText(txt);\n      setAlertVisible(true);\n      setAcceptType(type);\n    };\n  \n    const handleCloseModal = () => {\n      setAlertVisible(false);\n    };\n    const handleAccept = () => {\n      setAlertVisible(false);\n      if(acceptType === 'req'){// 등록\n          submitReqTable();\n      }else if(acceptType === 'delete'){// 삭제\n          submitDeletTable();\n      }else if(acceptType === 'disconn'){//연결해제\n          submitDisconnTable();\n      }\n      setAcceptType('');\n      \n    };\n  \n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const location = useLocation();\n\n\n  useEffect(() => {\n\n    submitSearchTable();\n\n  }, []);\n\n  //좌석수 숫자세팅\n  const setNumberTableCnt = (e) => {\n    const value = e.target.value;\n\n    if (value.length <= 3) {\n      setTableReqData({ ...tableReqData, tableName: e.target.value });\n    }\n\n  }\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n  **********************************************************************/\n  // 테이블 리스트\n  const [tableDatas, setTableDatas] = useState([]);\n\n  // 테이블 등록\n  const [tableReqData, setTableReqData] = useState(\n    {\n      \"numberOfSeats\": \"\",\n      \"settingYn\": false,\n      \"tableName\": \"\"\n    }\n  );\n\n\n  //테이블 검색 API\n  const submitSearchTable = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/tables');\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setTableDatas(data);\n      console.log(\"테이블 결과 ----\")\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n  //등록 클릭\n  const clickTableSong = (e) => {\n    e.preventDefault();\n\n    if (!tableReqData.numberOfSeats) {\n      alertPage('테이블 번호를 입력해 주세요.');\n      return;\n    }\n\n    if (!tableReqData.tableName) {\n      alertPage('좌석수를 입력해주세요.');\n      return;\n    }\n\n\n\n    //const result = window.confirm('해당 테이블을 등록 하시겠습니까?');\n    confirmPage('해당 테이블을 등록 하시겠습니까?', 'req');\n\n\n  };\n\n \n\n\n  //등록 하기 API\n  const submitReqTable = async () => {\n\n    try {\n      const response = await axiosInstance.post('/api/tables', tableReqData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n      console.log(response.data);\n      if (response.status === 200) {\n        \n        // 폼 데이터를 초기화합니다.\n        alertPage('등록되었습니다.');\n        submitSearchTable();\n        setTableReqData(\n          {\n            \"numberOfSeats\": \"\",\n            \"settingYn\": false,\n            \"tableName\": \"\"\n          }\n        );\n      } else {\n        alertPage('오류 발생');\n      }\n\n      \n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.error('API 요청 실패:', error);\n      alertPage(error.response.data.message);\n    }\n\n  };\n\n\n  //삭제 클릭\n  const [tableId, setTableId] = useState('');\n\n  const clickDeletTable = (e, pTableId) => {\n    e.preventDefault();\n\n    //const result = window.confirm('해당 테이블을 삭제 하시겠습니까?');\n    confirmPage('해당 테이블을 삭제 하시겠습니까?', 'delete')\n\n\n    setTableId(pTableId);\n  };\n\n  //삭제 API\n  const submitDeletTable = async () => {\n\n\n    try {\n      const response = await axiosInstance.delete('/api/tables/' + tableId);\n\n      console.log('API 응답:', response.data);\n\n      if(response.data && response.data.resultCode == '110'){\n        alertPage('사용중인 테이블은 삭제할 수 없습니다. 연결해제 후 삭제해 주세요.');\n      }else{\n        alertPage('삭제되었습니다.');\n      }\n\n      // 폼 데이터를 초기화합니다.\n      submitSearchTable();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n   //연결해제\n   const clickDisconnTable = (e, tableId) => {\n    e.preventDefault();\n  \n    //const result = window.confirm('해당 테이블을 연결 해제하시겠습니까?');\n    confirmPage('해당 테이블을 연결 해제하시겠습니까?', 'disconn')\n   \n    setTableId(tableId);\n  };\n\n\n  //삭제 API\n  const submitDisconnTable = async () => {\n\n\n    try {\n      const response = await axiosInstance.post('/api/tables/' + tableId +'/disconnect');\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alertPage('해제되었습니다.');\n      submitSearchTable();\n\n      var refreshData  = {\"code\": \"200\", \"msg\": tableId};\n      const response3 = await axiosInstance.post('/api/callRefresh',refreshData);\n\n\n      console.log('API 2:', response3.data);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n  \n\n\n\n  return (\n    <CContainer>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept}/>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          <CButton color=\"light\" onClick={submitSearchTable}>\n            <CIcon icon={cilSync} title=\"Download file\" />\n          </CButton>\n          <strong> 테이블 목록</strong> <small></small>\n        </CCardHeader>\n        {tableDatas ? (\n          <CCardBody>\n            <CRow key='0'>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staNo\" value=\"No\" readOnly plainText />\n              </CCol>\n              <CCol xs={5}>\n                <CFormInput type=\"text\" id=\"staTrackNumber\" value=\"테이블명*\" readOnly plainText />\n              </CCol>\n              <CCol xs={3}>\n                <CFormInput type=\"text\" id=\"staTitle\" value=\"좌석수*\" readOnly plainText />\n              </CCol>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staRunningTime\" value=\"세팅여부\" readOnly plainText />\n              </CCol>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staRunningTime\" value=\"연결해제\" readOnly plainText />\n              </CCol>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staButton\" value=\"삭제\" readOnly plainText />\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staNoReq\" value=\"-\" readOnly plainText />\n              </CCol>\n              <CCol xs={5}>\n                <CFormInput type=\"text\" id=\"inputTableName\" value={tableReqData.tableName} onChange={(e) => setTableReqData({ ...tableReqData, tableName: e.target.value })} maxLength={5} />\n              </CCol>\n              <CCol xs={2}>\n                <CFormInput type=\"number\" id=\"inputTrackNumber\" value={tableReqData.numberOfSeats} onChange={(e) => setTableReqData({ ...tableReqData, numberOfSeats: e.target.value })} />\n              </CCol>\n              \n              <CCol xs={3}>\n                <CButton color=\"info\"  onClick={(e) => clickTableSong(e)}>\n                  추가\n                </CButton>\n              </CCol>\n            </CRow>\n            {tableDatas.map((item, index) => (\n              <CRow key={index}>\n                <CCol xs={1}>\n                  <CFormInput type=\"text\" id={'txtNoReq${index}'} value={item.id} readOnly plainText />\n                </CCol>\n                <CCol xs={5}>\n                  <CFormInput type=\"text\" id={'txtTableNumber${index}'} value={item.tableName} readOnly plainText />\n                  \n                </CCol>\n                <CCol xs={3}>\n                  <CFormInput type=\"text\" id={'txtNumberOfSeats${index}'} value={item.numberOfSeats} readOnly plainText />\n                </CCol>\n                <CCol xs={1}>\n                  <CFormInput type=\"text\" id={'txtSettingYn${index}'} value={item.settingYn? 'O' : 'X'} readOnly plainText />\n                </CCol>\n                <CCol xs={1}>\n                {item.settingYn ?\n                  <CButton color=\"danger\" className=\"mb-3\" onClick={(e) => clickDisconnTable(e, item.id)}>\n                    해제\n                  </CButton>\n                  : '-'}\n                </CCol>\n                <CCol xs={1}>\n                <CButton color=\"dark\" className=\"mb-3\" onClick={(e) => clickDeletTable(e,item.id)}>\n                  삭제\n                </CButton>\n              </CCol>\n              </CRow>\n            ))}\n          </CCardBody>\n        ) : (<div className=\"d-flex justify-content-center\">\n          <CSpinner />\n        </div>\n        )}\n      </CCard>\n    </CContainer >\n  );\n};\n\nexport default TableList;\n","export var cilSync = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M410.168,133.046,381.21,104.088,464.017,104l-.034-32L328,72.144V208h32V128.132l27.541,27.541A152.5,152.5,0,0,1,279.972,416l.056,32a184.5,184.5,0,0,0,130.14-314.954Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M232.028,104l-.056-32a184.5,184.5,0,0,0-130.14,314.954L130.878,416H48v32H184V312H152v79.868l-27.541-27.541A152.5,152.5,0,0,1,232.028,104Z' class='ci-primary'/>\"];\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","TableList","navigate","useNavigate","alertType","setAlertType","useState","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","alertPage","txt","confirmPage","useLocation","useEffect","submitSearchTable","tableDatas","setTableDatas","tableReqData","setTableReqData","async","data","axiosInstance","get","console","log","error","throwError","submitReqTable","response","post","headers","status","message","tableId","setTableId","submitDeletTable","delete","resultCode","submitDisconnTable","refreshData","response3","CContainer","ComModal","handleCloseModal","handleAccept","CCard","className","CCardHeader","cilSync","title","CCardBody","CRow","CCol","xs","CFormInput","value","readOnly","plainText","tableName","onChange","e","target","maxLength","numberOfSeats","preventDefault","clickTableSong","map","item","index","settingYn","clickDisconnTable","clickDeletTable","pTableId","CSpinner"],"sourceRoot":""}