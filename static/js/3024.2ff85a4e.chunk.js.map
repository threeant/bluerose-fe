{"version":3,"file":"static/js/3024.2ff85a4e.chunk.js","mappings":"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","sources":["common/ComModal.js","common/appConfig.js","common/axiosInstance.js","views/pages/login/Login.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","// appConfig.js\nconst appConfig = {\n    apiUrl: 'http://localhost:8080',\n    wsUrl : 'ws://localhost:8080/ws-stomp',\n  };\n  \n\nexport default appConfig;","// axiosInstance.js\n\nimport axios from 'axios';\nimport appConfig from '../common/appConfig';\n\nconst axiosInstance = axios.create({\n  baseURL: appConfig.apiUrl , // API의 기본 URL\n  timeout: 5000, // 타임아웃 설정\n});\n// Request 인터셉터 설정\naxiosInstance.interceptors.request.use(\n    \n    \n    (config) => {\n      const accessToken = sessionStorage.getItem('accessToken'); // 세션 스토리지에서 토큰을 가져옴\n      //const accessToken =  \"a2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbXRva2FyaW10b2thcmltdG9rYXJpbQ==\"\n  \n      if (accessToken) {\n        config.headers.Authorization = `Bearer ${accessToken}`; // 헤더에 토큰 추가\n      }\n  \n      return config;\n    },\n    (error) => {\n        const statusCode = error.response.status;\n        console.log('>>>error');\n        console.log(error)\n        // const navigate = useNavigate();\n        \n    \n        // // 오류 코드에 따른 분기 처리\n        // switch (statusCode) {\n        //   case 401:\n        //     navigate('/login');\n        //     break;\n        //   case 404:\n        //     navigate('/404');\n        //     break;\n        //   case 500:\n        //     navigate('/500');\n        //     break;\n        //   default:\n        //     navigate('/error');\n        // }\n    \n        return Promise.reject(error);\n    }\n  );\n\nexport default axiosInstance;\n","import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CModal,\n  CModalBody,\n  CModalFooter,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport appConfig from '../../../common/appConfig';\nimport axiosInstance from '../../../common/axiosInstance';\nimport ComModal from '../../../common/ComModal'; // 모달 컴포넌트 임포트\n\n\nconst Login = () => {\n\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    id: '',\n    password: ''\n  });\n\n  const [alertType, setAlertType] = useState('');\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertText, setAlertText] = useState('');\n\n\n  const alertPage = (type, txt) => {\n    setAlertType(type);\n    setAlertText(txt);\n    setAlertVisible(true);\n  };\n\n  const handleCloseModal = () => {\n    setAlertVisible(false);\n  };\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if(!userData.id || !userData.password){\n      //alert('아이디와 비밀번호를 입력해 주세요');\n      alertPage('alert', '아이디와 비밀번호를 입력해 주세요.');\n      return;\n    }\n    // 로그인 API 호출 또는 서버로 요청\n    try {\n      \n      const response = await axios.post( appConfig.apiUrl + '/auth/admin/login', userData, {\n        headers: {\n          //'Content-Type': 'multipart/form-data',\n          'Content-Type': 'application/json',\n        }\n      });\n      \n      console.log(response);\n      if (response.status === 200) {\n      \n        // 로그인 성공 처리\n        const accessToken = response.data.tokenInfo.accessToken;\n        sessionStorage.setItem('accessToken',accessToken)\n        \n        axiosInstance.interceptors.request.use(\n          (config) => {\n        \n            if (accessToken) {\n              config.headers.Authorization = `Bearer ${accessToken}`; // 헤더에 토큰 추가\n            }\n        \n            return config;\n          },\n          (error) => {\n            return Promise.reject(error);\n          }\n        );\n\n\n\n          try {\n            //공통코드 \n            const codeResponse = await axiosInstance.get('/api/code', {}, {\n              headers: {\n                'Content-Type': 'application/json',\n              }\n            });\n            console.log(response.data);\n\n                // API 응답에서 데이터 추출\n            const codeData = codeResponse.data;\n            // 데이터를 상태 변수에 저장\n\n            console.log(codeData)\n            const jsonData = JSON.stringify(codeData);\n            sessionStorage.setItem('codeData', jsonData);\n\n\n            // 세션에서 JSON 데이터 가져오기\n            const jsonCodeData = sessionStorage.getItem('codeData');\n\n            // JSON 문자열을 파싱하여 JavaScript 객체로 변환\n            const codeList = JSON.parse(jsonCodeData);\n\n            // userData 객체 사용\n            for (const c of codeList) {\n              //console.log(c);\n              console.log(c.description);\n              console.log(c.code);\n              console.log(c.codes);\n            }\n            navigate('/dashboard');\n            //sessionStorage.removeItem('codeData');\n\n          } catch (error) {\n            console.error('Error fetching data:', error);\n          }\n\n\n      } else {\n        // 로그인 실패 처리\n        //alert('로그인 실패');\n        alertPage('alert', '로그인 오류 [관리자에게 문의하세요.]');\n        console.log(response);\n      }\n    } catch (error) {\n      alertPage('alert', error.response.data.message);\n      //alert(error.response.data.message)\n      console.error('오류 발생:', error);\n    }\n  }\n\n  \n\n\n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} />\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={8}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm>\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">Sign In to your account.</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput id=\"txtUserId\" placeholder=\"ID\" autoComplete=\"userId\" onChange={(e) => setUserData({ ...userData, id: e.target.value })} />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        id=\"txtPassword\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        onChange={(e) => setUserData({ ...userData, password: e.target.value })}\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"Login\" className=\"px-4\" onClick={handleSubmit} />\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","apiUrl","wsUrl","axiosInstance","axios","create","baseURL","appConfig","timeout","interceptors","request","use","config","accessToken","sessionStorage","getItem","headers","Authorization","concat","error","response","status","console","log","Promise","reject","Login","navigate","useNavigate","userData","setUserData","useState","password","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","alertPage","txt","className","ComModal","handleCloseModal","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","CInputGroup","CInputGroupText","cilUser","CFormInput","placeholder","autoComplete","onChange","e","target","value","cilLockLocked","xs","component","async","preventDefault","post","data","tokenInfo","setItem","codeResponse","get","codeData","jsonData","JSON","stringify","jsonCodeData","codeList","parse","c","description","code","codes","message"],"sourceRoot":""}