{"version":3,"file":"static/js/7761.0873fe34.chunk.js","mappings":"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","sources":["views/display/DisplayInfo.js","../node_modules/@coreui/icons/src/free/cil-caret-bottom.ts","../node_modules/@coreui/icons/src/free/cil-caret-top.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilSync,\n  cilCaretTop,\n  cilCaretBottom\n} from '@coreui/icons'\nimport { useNavigate, useLocation} from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList, getCurrentDate, throwError } from '../../common/utils'\nimport SongList from '../common/SongList'; // MyModal 컴포넌트의 경로를 알맞게 설정\nimport AlbumInfo from '../common/AlbumInfo'\nimport axiosInstance from '../../common/axiosInstance';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CFormFeedback,\n  CFormSwitch,\n  CSpinner\n} from '@coreui/react'\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\n\nconst DisplayInfo = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const location = useLocation();\n  const {displayId} = location.state;\n\n  \n  const navigate = useNavigate();\n  const [dispCD] = useState(getCodeList('DISP')); // 전시CD\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n\n  /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n  const [alertType, setAlertType] = useState('');\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertText, setAlertText] = useState('');\n  const [acceptType, setAcceptType] = useState('');\n \n\n\n  const alertPage = (txt) => {\n    setAlertType('alert');\n    setAlertText(txt);\n    setAlertVisible(true);\n  };\n\n  const confirmPage = (txt, type) => {\n    setAlertType('confirm');\n    setAlertText(txt);\n    setAlertVisible(true);\n    setAcceptType(type);\n  };\n\n  const handleCloseModal = () => {\n    setAlertVisible(false);\n  };\n  const handleAccept = () => {\n    setAlertVisible(false);\n    if(acceptType === 'updateDisp'){// 전시정보변경\n      submitUpdateDisplay();\n    }else if(acceptType === 'deletSong'){ //곡삭제\n      submitDeletDisplay();\n    }else if(acceptType === 'updateSongSort'){ // 전시순서변경\n      updateSort();\n    }\n  };\n\n\n\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  useEffect(() => {\n    console.log('displayId>>>> ' + displayId)\n    submitSearchDisplay();\n    submitSearchDisplaySongList();\n\n  }, [displayId]); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n\n\n  const goFormClick = () => { //등록화면이동\n    navigate('/music/albumReg');\n  }\n\n  const [visibleSong, setVisibleSong] = useState(false);\n  const [visibleAlbum, setVisibleAlbum] = useState(false);\n  const [albumId, setAlbumId] = useState();\n  //신청곡 추가 버튼\n  const popMusicAddClick = () => {\n    setVisibleSong(!visibleSong)\n  }\n\n\n  //앨범 팝업 추가 버튼\n  const popAlbumInfoClick = (e, pAlbumId) => {\n    e.preventDefault();\n    setAlbumId(pAlbumId);\n    console.log(pAlbumId);\n    setVisibleAlbum(!visibleAlbum);\n  }\n\n  //목록이동\n  const goListClick = () => {\n    navigate('/display/displayList');\n  };\n\n\n\n\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //전시 유효성검사\n  const [validated, setValidated] = useState(false);\n\n  //전시 상세 \n  //onst [displayData, setDisplayData] = useState();\n  //리스트\n  const [displaySongDatas, setDisplaySongDatas] = useState([]);\n\n  //플레잉곡\n  const [nowPlayingData, setNowPlayingData] = useState({});\n\n  //전시 상세 \n  const [displayUpdateData, setDisplayUpdateData] = useState({});\n\n\n  const handleMoveUp = (index) => {\n    if (index > 0) {\n      const newData = [...displaySongDatas];\n      [newData[index - 1], newData[index]] = [newData[index], newData[index - 1]];\n      setDisplaySongDatas(newData);\n    }\n  };\n\n  const handleMoveDown = (index) => {\n    if (index < displaySongDatas.length - 1) {\n      const newData = [...displaySongDatas];\n      [newData[index], newData[index + 1]] = [newData[index + 1], newData[index]];\n      setDisplaySongDatas(newData);\n    }\n  };\n\n  //초기화후 조회\n  const refreshDisplayInfo = async () => {\n    const dateStr = getCurrentDate();\n    /*const hour = new Date().getHours();\n    if (hour < 6) {\n      dateStr = getAddDate(\"d\", -1, dateStr, \"-\")\n    }\n    */\n\n    submitSearchDisplaySongList(dateStr);\n    \n\n  };\n\n  //전시상세 API\n  const submitSearchDisplay = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/display/' + displayId);\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      //setDisplayData(data);\n      console.log(\"상세결과 ----\")\n      console.log(data);\n      setDisplayUpdateData({\n        codeId : data.displayTypeId\n        , displayCount : data.displayNum\n        , sort :  data.sort\n        , title : data.title\n        , useYn : data.useYn\n      })\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n\n\n  //전시곡 리스트 검색 API\n  const submitSearchDisplaySongList = async (dateStr) => {\n\n\n    try {\n      const response = await axiosInstance.get('/api/display/' + displayId + '/display-content', {\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setDisplaySongDatas(data);\n\n      console.log(data);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n  \n  const [delDisplayContentId, setDelDisplayContentId] = useState('');\n \n  //신청곡 삭제 클릭\n  const clickDeletDisplayInfo = (e, displayContentId) => {\n    e.preventDefault();\n    setDelDisplayContentId(displayContentId);\n    //const result = window.confirm('해당곡을 삭제 하시겠습니까?');\n    confirmPage('해당곡을 삭제 하시겠습니까?', 'deletSong')\n\n    \n  };\n\n  //곡 삭제 API\n  const submitDeletDisplay = async () => {\n\n    console.log(delDisplayContentId);\n\n    try {\n      const response = await axiosInstance.delete('/api/display/' + displayId \n                                          + '/display-content/' + delDisplayContentId);\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alertPage('삭제되었습니다.');\n      refreshDisplayInfo();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const controllSongModal = (openYn) => {\n    setVisibleSong(openYn);\n  }\n\n  const controllAlbumModal = (openYn) => {\n    setVisibleAlbum(openYn);\n  }\n\n  \n   //전시 수정하기 API\n   const confirmUpdateDisplay = async (e) => {\n    e.preventDefault();\n\n    console.log(displayUpdateData);\n    \n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    confirmPage('전시정보를 수정하시겠습니까?', 'updateDisp')\n\n  }\n\n  //전시 수정하기 API\n  const submitUpdateDisplay = async () => {\n    \n\n    try {\n      const response = await axiosInstance.post('/api/display/' + displayId, displayUpdateData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alertPage('변경되었습니다.');\n      setValidated(false);\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n  }\n  const handleDataFromSongList = async(datas) => {\n    // 부모 컴포넌트에서 전달받은 데이터 처리\n    console.log('Data from child:', datas);\n    console.log(datas);\n    var songIdArr = [];\n      for(var i = 0 ; i < datas.length; i++){\n      songIdArr[i] = datas[i].songId;\n    }\n\n  var newSongDatas = {\"songIds\": songIdArr};\n    console.log(newSongDatas);\n    console.log('setNewSongDatas >>> ')\n\n\n    try {\n      const response = await axiosInstance.post('/api/display/' + displayId + '/display-content', newSongDatas, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alertPage('추가되었습니다.');\n      refreshDisplayInfo();\n      \n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n    \n  };\n  //전시순서변경\n  const updateSort = async () => {\n    \n    var contents = displaySongDatas;\n    console.log(contents);\n    var updateContents = [];\n    for(var i = 0; i< contents.length; i++){\n      updateContents.push(contents[i].displayContentId);\n    }\n\n    if(updateContents.length < 1){\n      alertPage('변경되는 데이터가 없습니다.');\n      return;\n    }\n\n    console.log(updateContents);\n    try {\n      const response = await axiosInstance.patch('/api/display/'+displayId+'/display-content', \n        {displayContentIds : updateContents}\n        ,{headers: {\n          'Content-Type': 'application/json',\n        }}\n      );\n\n      // API 응답에서 데이터 추출\n      const data = response;\n      // 데이터를 상태 변수에 저장\n      \n      console.log(data);\n      if(data.status == '200'){\n        alertPage('변경되었습니다.');\n      }\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n  const handleDataFromSongList2 = (datas) => {\n    // 부모 컴포넌트에서 전달받은 데이터 처리\n    console.log('Data from child:', datas);\n    console.log(datas);\n\n    console.log(displaySongDatas);\n\n  datas.map((item)=>{\n    console.log(item)\n    var newData = {\n      \"albumId\": item.albumId,\n      \"albumName\": item.albumName,\n      \"artist\": item.artist,\n      \"displayContentId\": '',\n      \"displayItemId\": item.displayId,\n      \"runtime\": item.runtime,\n      \"songId\": item.songId,\n      \"trackInfo\": item.trackInfo,\n      \"trackName\": item.trackName,\n      \"newYn\" : true\n    }\n    setDisplaySongDatas((prevData) => [...prevData, newData]);\n  })\n    \n    console.log(displaySongDatas);\n    console.log('displaySongDatas >>> ')\n    \n  };\n\n\n\n  return (\n    <>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept}/>\n      \n      <CModal\n        size=\"xl\"\n        visible={visibleSong}\n        onClose={() => setVisibleSong(false)}\n        aria-labelledby=\"OptionalSizesExample2\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"OptionalSizesExample1\">전시곡 추가</CModalTitle>\n        </CModalHeader>\n        <CModalBody><SongList openModal={controllSongModal} sendDataToParent={handleDataFromSongList}/></CModalBody>\n      </CModal>\n      <CModal\n        size=\"xl\"\n        visible={visibleAlbum}\n        onClose={() => setVisibleAlbum(false)}\n        aria-labelledby=\"OptionalSizesExample4\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"OptionalSizesExample3\">앨범정보</CModalTitle>\n        </CModalHeader>\n        <CModalBody><AlbumInfo openModal={controllAlbumModal} albumId={albumId} /></CModalBody>\n      </CModal>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>전시수정</strong></CCardHeader>\n            <CCardBody>\n              {displayUpdateData ? (\n                <CForm\n                  className=\"row g-3 needs-validation\"\n                  noValidate\n                  validated={validated}\n                  onSubmit={confirmUpdateDisplay}\n                >\n                  <CCol xs={10} >\n                    <CFormLabel htmlFor=\"validationCustom04\">ID : {displayId}</CFormLabel>\n                  </CCol>\n                  <CCol xs={2} >\n                    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                    <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\"  checked={displayUpdateData.useYn}  onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, useYn: e.target.checked })} />\n                  </CCol>\n\n\n                  <CCol xs={12}>\n                    <CFormLabel htmlFor=\"inputName\">제목*</CFormLabel>\n                    <CFormInput type=\"text\" id=\"inputName\" value={displayUpdateData.title} required onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, title: e.target.value })} maxLength={100} />\n                    <CFormFeedback invalid>앨범명을 입력해주세요.</CFormFeedback>\n                  </CCol>\n                  <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">노출곡수*</CFormLabel>\n                  <CFormInput type=\"number\" id=\"inputDisplayCount\" value={displayUpdateData.displayCount}  required onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, displayCount: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>노출곡 갯수를 입력해주세요.</CFormFeedback>\n                </CCol>\n                  <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">전시타입*</CFormLabel>\n                  <CFormSelect id=\"sel_media\" value={displayUpdateData.codeId} onChange={(e) => setDisplayUpdateData({ ...displayUpdateData, codeId: e.target.value })} required >\n                    <option value={''} key='-1'>-선택-</option>\n                    {dispCD.map((item, index) => (\n                      <option value={item.id} key={index}>{item.name}</option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>전시타입을 선택해주세요.</CFormFeedback>\n                </CCol>\n                  <div className=\"d-grid gap-2\">\n                    <CRow className=\"justify-content-between\">\n                      <CCol xs={12}>\n                        <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                          <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                          <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"수정하기\" />\n                        </div>\n                      </CCol>\n                    </CRow>\n                  </div>\n                </CForm>\n              ) : (<div className=\"d-flex justify-content-center\">\n                <CSpinner />\n              </div>\n              )}\n            </CCardBody>\n          </CCard>\n\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>곡목록</strong> {displaySongDatas && displaySongDatas.length > 0 ? (<small>총 {displaySongDatas.length\n            }건</small>) : ('')}</CCardHeader>\n            <CCardBody>\n              <div className=\"d-grid gap-2\">\n                <CRow className=\"justify-content-between\">\n                  <CCol xs={12}>\n                    <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                      <CButton component=\"input\" type=\"reset\" color=\"secondary\" value=\"전시곡 추가\" onClick={popMusicAddClick} />\n                      <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"순서변경하기\" onClick={() => confirmPage('전시순서를 변경하시겠습니까?', 'updateSongSort')}/>\n                      <CButton color=\"light\" onClick={refreshDisplayInfo}>\n                        <CIcon icon={cilSync} title=\"Download file\" />\n                      </CButton>\n                    </div>\n                  </CCol>\n                </CRow>\n              </div>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Track Number</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">전시순서</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\"></CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {displaySongDatas && displaySongDatas.length > 0 ? (\n                    displaySongDatas.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          {/* <strong>{index+1}</strong> */}\n                          <strong>{index+1}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong><a href='/' onClick={(e) => popAlbumInfoClick(e, item.albumId)}>{item.albumName}</a></strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.trackName}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        {item.trackInfo}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        {index !== 0  ? (\n                          <CButton color=\"info\" variant=\"outline\" onClick={() => handleMoveUp(index)} disabled={index === 0}>\n                            <CIcon icon={cilCaretTop} title=\"Download file\" />\n                          </CButton>\n                          ) : ('')}\n\n                        {index+1  !== displaySongDatas.length  ? (\n                          <CButton color=\"info\" variant=\"outline\" onClick={() => handleMoveDown(index)} disabled={index === displaySongDatas.length - 1}>\n                            <CIcon icon={cilCaretBottom} title=\"Download file\" />\n                          </CButton>\n                          ) : ('')}\n\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        {item.newYn !== true ? (\n                          <CButton color=\"dark\" shape=\"rounded-pill\" className=\"mb-3\" onClick={(e) => clickDeletDisplayInfo(e, item.displayContentId)}>\n                          삭제\n                        </CButton>\n                        ) : ('[신규]')}\n                          \n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={7} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default DisplayInfo\n","export var cilCaretBottom = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M256.286,408.357,16.333,138.548V104H496v36.45ZM56.892,136,256.358,360.287,457.042,136Z' class='ci-primary'/>\"];\n","export var cilCaretTop = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M496,400.357H16.333V363.908L256.047,96,496,365.81Zm-440.708-32H455.441L255.975,144.07Z' class='ci-primary'/>\"];\n"],"names":["DisplayInfo","location","useLocation","displayId","state","navigate","useNavigate","dispCD","useState","getCodeList","midiaCD","cntryCD","alertType","setAlertType","alertVisible","setAlertVisible","alertText","setAlertText","acceptType","setAcceptType","alertPage","txt","confirmPage","type","useEffect","console","log","submitSearchDisplay","submitSearchDisplaySongList","visibleSong","setVisibleSong","visibleAlbum","setVisibleAlbum","albumId","setAlbumId","validated","setValidated","displaySongDatas","setDisplaySongDatas","nowPlayingData","setNowPlayingData","displayUpdateData","setDisplayUpdateData","refreshDisplayInfo","async","dateStr","getCurrentDate","data","axiosInstance","get","codeId","displayTypeId","displayCount","displayNum","sort","title","useYn","error","throwError","headers","delDisplayContentId","setDelDisplayContentId","submitDeletDisplay","response","delete","submitUpdateDisplay","post","updateSort","contents","updateContents","i","length","push","displayContentId","patch","displayContentIds","status","_jsxs","_Fragment","children","_jsx","ComModal","visible","onClose","handleCloseModal","onAccpet","handleAccept","CModal","size","CModalHeader","CModalTitle","id","CModalBody","SongList","openModal","openYn","sendDataToParent","datas","songIdArr","songId","newSongDatas","AlbumInfo","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","xs","CFormLabel","htmlFor","CFormFeedback","invalid","CFormSwitch","label","checked","onChange","target","CFormInput","value","required","maxLength","CFormSelect","map","item","index","name","CButton","component","color","onClick","goListClick","CSpinner","popMusicAddClick","CIcon","icon","cilSync","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","CTableDataCell","href","popAlbumInfoClick","pAlbumId","albumName","artist","trackName","trackInfo","variant","newData","handleMoveUp","disabled","cilCaretTop","handleMoveDown","cilCaretBottom","newYn","shape","clickDeletDisplayInfo","colSpan"],"sourceRoot":""}