{"version":3,"file":"static/js/5370.53522ec8.chunk.js","mappings":"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","sources":["views/common/PaginationComponent.js","views/music/AlbumList.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CPagination, CPaginationItem } from '@coreui/react';\n\nconst PaginationComponent = ({ totalPages, currentPage, onPageChange }) => {\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxButtons = 5; // 한 번에 보여줄 최대 버튼 수\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n\n    // 현재 페이지를 중심으로 앞뒤로 최대 maxButtons/2 개씩 버튼을 표시합니다.\n    let start = Math.max(1, currentPage - halfMaxButtons);\n    let end = Math.min(totalPages, start + maxButtons - 1);\n\n    // 만약 현재 페이지가 처음 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 1로 설정하고 끝 페이지를 maxButtons 개로 설정합니다.\n    if (currentPage <= halfMaxButtons) {\n      start = 1;\n      end = Math.min(totalPages, maxButtons);\n    }\n    // 만약 현재 페이지가 마지막 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 totalPages - maxButtons + 1로 설정하고 끝 페이지를 totalPages로 설정합니다.\n    else if (currentPage >= totalPages - halfMaxButtons) {\n      start = Math.max(1, totalPages - maxButtons + 1);\n      end = totalPages;\n    }\n\n    // 페이지 버튼을 생성합니다.\n    for (let i = start; i <= end; i++) {\n      items.push(\n        <CPaginationItem key={i} active={i === currentPage} onClick={() => onPageChange(i)}>\n          {i}\n        </CPaginationItem>\n      );\n    }\n    return items;\n  };\n\n  return (\n    <CPagination aria-label=\"Page navigation example\">\n      <CPaginationItem aria-label=\"Previous\" disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}>\n        <span aria-hidden=\"true\">&laquo;</span>\n      </CPaginationItem>\n      {renderPaginationItems()}\n      <CPaginationItem aria-label=\"Next\" disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}>\n        <span aria-hidden=\"true\">&raquo;</span>\n      </CPaginationItem>\n    </CPagination>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationComponent;\n","import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate , useLocation} from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList, throwError } from '../../common/utils'\nimport axiosInstance from '../../common/axiosInstance';\nimport PaginationComponent from '../common/PaginationComponent';\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst AlbumList = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const [selectedDate, setSelectedDate] = useState(null); //등록일 from\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태\n  const [totalPages, setTotalPages] = useState(0); // 현재 페이지 상태\n  //const { searchParam} = location.state;\n\n\n  // 날짜가 선택될 때 호출될 콜백 함수\n  const handleDateChange = date => {\n    debugger;\n    //console.log(date);\n    setSelectedDate(date);\n    if(!date){\n      return;\n    }\n\n    \n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    \n    console.log(formattedDate);\n    setAlbumSearch({ ...albumSearch, startReleaseDate: formattedDate })\n\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    if(!date){\n      return;\n    }\n\n    \n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    setAlbumSearch({ ...albumSearch, endReleaseDate: formattedDate })\n  }\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({\n    \"artist\": \"\",\n    \"endReleaseDate\": \"\",\n    \"musicGenre\": \"\",\n    \"name\": \"\",\n    \"page\": 0,\n    \"size\": 15,\n    \"startReleaseDate\": \"\",\n    \"mediaCode\": \"\"\n  });\n\n  const [albumSearchFlg, setAlbumSearchFlg] = useState(false);\n\n  \n\n  //초기화\n  const clickReset = date => {\n\n    setSelectedDate(null);\n    setSelectedDate2(null);\n\n    setAlbumSearch({\n      \"artist\": \"\",\n      \"endReleaseDate\": \"\",\n      \"musicGenre\": \"\",\n      \"name\": \"\",\n      \"page\": 1,\n      \"size\": 15,\n      \"startReleaseDate\": \"\",\n      \"mediaCode\": \"\"\n    });\n  }\n\n  const goFormClick = () => { //등록화면이동\n    navigate('/music/albumReg');\n  }\n\n  const goInfoClick = (e, id) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    //console.log('goInfoClick : ' + id);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    //const newQuery = encodeURIComponent(albumSearch);\n    //setSearchQuery(newQuery);\n    localStorage.setItem('alblumListSearch', JSON.stringify(albumSearch));\n    navigate('/music/albumInfo', { state: { albumId: id , listSearch : albumSearch} });\n    //history.push('/music/albumInfo'+id);\n  };\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [albumDatas, setAlbumDatas] = useState({ contents: [] });\n\n  \n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    handlePageChange(1);\n  }\n\n  //페이지 변경\n  const handlePageChange = (page) => {\n    //console.log('현재페이지 ');\n    //console.log(page);\n    setCurrentPage(page); // 페이지 변경 시 현재 페이지 상태 업데이트\n    submitSearchAlbums(page);\n  };\n\n  useEffect(() => {\n    \n    const dataFromStorage = JSON.parse(localStorage.getItem('alblumListSearch'));\n\n    if (dataFromStorage) {\n      setAlbumSearch(dataFromStorage);\n      handlePageChange(dataFromStorage.page);\n      setAlbumSearchFlg(true);\n      localStorage.removeItem('alblumListSearch');\n      \n    }else{\n      submitSearchAlbums(0);\n    }\n\n  }, []);\n\n  useEffect(() => {\n    if (albumSearchFlg) {\n      handlePageChange(albumSearch.page); // albumSearch가 변경될 때만 호출됨\n      localStorage.removeItem('alblumListSearch');\n    }\n  }, [albumSearchFlg]);\n\n  //검색 API\n  const submitSearchAlbums = async (page) => {\n\n    if(page > -1){\n      setAlbumSearch(prevState => ({\n        ...prevState,\n        page: page\n      }));\n\n      albumSearch.page = page;\n    }\n\n    \n\n    console.log(albumSearch);\n\n\n    if(albumSearch.endReleaseDate || albumSearch.startReleaseDate){\n      if(!albumSearch.endReleaseDate){\n        alert('등록일 기간을 정확히 입력해주세요.')\n        return;\n      }\n      if(!albumSearch.startReleaseDate){\n        alert('등록일 기간을 정확히 입력해주세요.')\n        return;\n      }\n    }\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: albumSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data);\n      setTotalPages(data.totalPages);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      //console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const submitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    //console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: albumSearch\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      //console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      //console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>앨범검색</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchAlbums}>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMedia\" className=\"col-form-label\">미디어</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormSelect id=\"inputMedia\" aria-label=\"미디어\" value={albumSearch.mediaCode} onChange={(e) => setAlbumSearch({ ...albumSearch, mediaCode: e.target.value })}>\n                      <option>-전체-</option>\n                      {midiaCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputMusicGenre\" className=\"col-form-label\" >장르</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputMusicGenre\" aria-label=\"장르\" value={albumSearch.musicGenre} placeholder=\"전체\" onChange={(e) => setAlbumSearch({ ...albumSearch, musicGenre: e.target.value })} />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputName\" className=\"col-form-label\">앨범명</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormInput type=\"text\" id=\"inputName\" aria-label=\"앨범명\" placeholder=\"전체\" value={albumSearch.name} onChange={(e) => setAlbumSearch({ ...albumSearch, name: e.target.value })} />\n                  </CCol>\n                  <CCol xs={1}>\n                    <CFormLabel htmlFor=\"inputArtist\" className=\"col-form-label\">아티스트</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <CFormInput type=\"text\" id=\"inputArtist\" aria-label=\"아티스트\" placeholder=\"전체\" value={albumSearch.artist} onChange={(e) => setAlbumSearch({ ...albumSearch, artist: e.target.value })} />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  {/* <CCol xs={1}>\n                    <CFormLabel htmlFor=\"txt_country\" className=\"col-form-label\">발매국가</CFormLabel>\n                  </CCol>\n                  <CCol xs={5}>\n                    <CFormSelect id=\"txt_country\" aria-label=\"발매국가\" onChange={(e) => setAlbumSearch({ ...albumSearch, artist: e.target.value })}>\n                      <option>-전체-</option>\n                      {cntryCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                  </CCol> */}\n                  <CCol md={1}>\n                    <CFormLabel htmlFor=\"inputEmail3\" className=\"col-form-label\">등록일</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumSearch.startReleaseDate}\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumSearch.endReleaseDate}\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                </CRow>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={4}>\n                      <CButton component=\"input\" type=\"button\" color=\"danger\" value=\"등록하기\" onClick={goFormClick} />\n                    </CCol>\n                    <CCol xs={4}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"reset\" color=\"light\" value=\"초기화\" onClick={clickReset} />\n                        <CButton component=\"input\" color=\"primary\" type=\"button\" value=\"조회하기\" onClick={submitSearch} />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">미디어</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">발매일</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                    albumDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} onClick={(e) => goInfoClick(e, item.id)}>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.id}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{item.mediaName}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          <a href='/' onClick={(e) => goInfoClick(e, item.id)}>{item.name}</a>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.releaseDate}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 6, offset: 5 }}>\n                  <PaginationComponent totalPages={totalPages} currentPage={currentPage} onPageChange={handlePageChange} />\n                    {/* <CPagination aria-label=\"Page navigation example\">\n                      <CPaginationItem aria-label=\"Previous\" disabled={!albumDatas.first} onClick={(e) => clickPage(e, 1)}>\n                        <span aria-hidden=\"true\">&laquo;</span>\n                      </CPaginationItem>\n                      {Array.from({ length: albumDatas.totalPages }, (_, index) => (\n                        <CPaginationItem key={index} active onClick={(e) => clickPage(e, index + 1)}>{index + 1}</CPaginationItem>\n                      ))}\n                      <CPaginationItem aria-label=\"Next\" disabled={!albumDatas.last}>\n                        <span aria-hidden=\"true\">&raquo;</span>\n                      </CPaginationItem>\n                    </CPagination> */}\n                  </CCol>\n                  <CCol md={1}>\n                    총 {albumDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default AlbumList\n"],"names":["_ref","totalPages","currentPage","onPageChange","_jsxs","CPagination","children","_jsx","CPaginationItem","disabled","onClick","renderPaginationItems","items","halfMaxButtons","Math","floor","maxButtons","start","max","end","min","i","push","active","AlbumList","navigate","useNavigate","midiaCD","useLocation","useState","getCodeList","cntryCD","selectedDate","setSelectedDate","selectedDate2","setSelectedDate2","setCurrentPage","setTotalPages","searchQuery","setSearchQuery","albumSearch","setAlbumSearch","albumSearchFlg","setAlbumSearchFlg","goInfoClick","e","id","preventDefault","localStorage","setItem","JSON","stringify","state","albumId","listSearch","albumDatas","setAlbumDatas","contents","handlePageChange","page","submitSearchAlbums","useEffect","dataFromStorage","parse","getItem","removeItem","async","prevState","console","log","endReleaseDate","startReleaseDate","alert","data","axiosInstance","get","params","headers","error","throwError","_Fragment","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","onSubmit","xs","CFormLabel","htmlFor","CFormSelect","value","mediaCode","onChange","target","map","item","index","name","CFormInput","type","musicGenre","placeholder","md","artist","style","display","placeItems","marginRight","CIcon","icon","cilCalendar","size","DatePicker","selected","date","formattedDate","Date","getTime","getTimezoneOffset","toISOString","slice","dateFormat","shouldCloseOnSelect","minDate","maxDate","whiteSpace","CButton","component","color","goFormClick","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","length","CTableDataCell","mediaName","href","releaseDate","colSpan","span","offset","PaginationComponent","totalCount"],"sourceRoot":""}