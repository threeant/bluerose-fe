{"version":3,"file":"static/js/9792.d5e7862e.chunk.js","mappings":"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","sources":["views/common/PaginationComponent.js","views/music/MusicReqHisInfo.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CPagination, CPaginationItem } from '@coreui/react';\n\nconst PaginationComponent = ({ totalPages, currentPage, onPageChange }) => {\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxButtons = 5; // 한 번에 보여줄 최대 버튼 수\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n\n    // 현재 페이지를 중심으로 앞뒤로 최대 maxButtons/2 개씩 버튼을 표시합니다.\n    let start = Math.max(1, currentPage - halfMaxButtons);\n    let end = Math.min(totalPages, start + maxButtons - 1);\n\n    // 만약 현재 페이지가 처음 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 1로 설정하고 끝 페이지를 maxButtons 개로 설정합니다.\n    if (currentPage <= halfMaxButtons) {\n      start = 1;\n      end = Math.min(totalPages, maxButtons);\n    }\n    // 만약 현재 페이지가 마지막 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 totalPages - maxButtons + 1로 설정하고 끝 페이지를 totalPages로 설정합니다.\n    else if (currentPage >= totalPages - halfMaxButtons) {\n      start = Math.max(1, totalPages - maxButtons + 1);\n      end = totalPages;\n    }\n\n    // 페이지 버튼을 생성합니다.\n    for (let i = start; i <= end; i++) {\n      items.push(\n        <CPaginationItem key={i} active={i === currentPage} onClick={() => onPageChange(i)}>\n          {i}\n        </CPaginationItem>\n      );\n    }\n    return items;\n  };\n\n  return (\n    <CPagination aria-label=\"Page navigation example\">\n      <CPaginationItem aria-label=\"Previous\" disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}>\n        <span aria-hidden=\"true\">&laquo;</span>\n      </CPaginationItem>\n      {renderPaginationItems()}\n      <CPaginationItem aria-label=\"Next\" disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}>\n        <span aria-hidden=\"true\">&raquo;</span>\n      </CPaginationItem>\n    </CPagination>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationComponent;\n","import React, { useState,useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\nimport PaginationComponent from '../common/PaginationComponent';\nimport { getCodeList,throwError } from '../../common/utils'\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst MusicReqHisInfo = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  //const { searchParam} = location.state;\n  \n\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태\n  const [totalPages, setTotalPages] = useState(0); // 현재 페이지 상태\n\n\n  //초기화\n  const clickReset = date => {\n\n    setAlbumSearch({\n      \"artist\": \"\",\n      \"endReleaseDate\": \"\",\n      \"musicGenre\": \"\",\n      \"name\": \"\",\n      \"page\": 1,\n      \"size\": 15,\n      \"startReleaseDate\": \"\",\n      \"mediaCode\": \"\"\n    });\n  }\n\n  const goFormClick = () => { //등록화면이동\n    navigate('/music/albumReg');\n  }\n\n  const goInfoClick = (e, id) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    console.log('goInfoClick : ' + id);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    navigate('/music/albumInfo', { state: { albumId: id } });\n  };\n\n  const location = useLocation();\n  const dateStr = location.state.dateStr;\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [albumDatas, setAlbumDatas] = useState({ contents: [] });\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({\n    \"page\": 0,\n    \"size\": 30,\n    \"startDate\": location.state.dateStr\n  });\n\n \n\n  useEffect(() => {\n    console.log(dateStr);\n    submitSearchAlbums();\n  }, []);\n\n\n  //페이지 변경\n  const handlePageChange = (page) => {\n    //console.log('현재페이지 ');\n    //console.log(page);\n    setCurrentPage(page); // 페이지 변경 시 현재 페이지 상태 업데이트\n    submitSearchAlbums(page);\n  };\n\n  //페이징\n  const clickPage = (e, page) => {\n    e.preventDefault();\n    albumSearch.page = page;\n    submitSearchAlbums();\n    console.log(\"===page =  : \" + page);\n  }\n\n  //검색 API\n  const submitSearchAlbums = async (page) => {\n\n\n    if(page > -1){\n      setAlbumSearch(prevState => ({\n        ...prevState,\n        page: page\n      }));\n\n      albumSearch.page = page;\n    }\n\n    \n\n    console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/song-request/history/list', {\n        params: albumSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data);\n      setTotalPages(data.totalPages);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const submitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/albums', {\n        params: albumSearch\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  return (\n    <>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>{dateStr} 신청곡 목록</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchAlbums}>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">TrackNumber</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">테이블번호</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">신청시간</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                    albumDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{index+1}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.albumName}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.trackNumber}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.title}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.tableNumber}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.requestedAt}\n                        </CTableDataCell>\n                        \n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 6, offset: 5 }}>\n                  <PaginationComponent totalPages={totalPages} currentPage={currentPage} onPageChange={handlePageChange} />\n                  </CCol>\n                  <CCol md={1}>\n                    총 {albumDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default MusicReqHisInfo\n"],"names":["_ref","totalPages","currentPage","onPageChange","_jsxs","CPagination","children","_jsx","CPaginationItem","disabled","onClick","renderPaginationItems","items","halfMaxButtons","Math","floor","maxButtons","start","max","end","min","i","push","active","MusicReqHisInfo","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","setCurrentPage","setTotalPages","location","useLocation","dateStr","state","albumDatas","setAlbumDatas","contents","albumSearch","setAlbumSearch","useEffect","console","log","submitSearchAlbums","async","page","prevState","data","axiosInstance","get","params","headers","error","throwError","_Fragment","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","onSubmit","CTable","align","hover","responsive","CTableHead","color","CTableRow","CTableHeaderCell","CTableBody","length","map","item","index","CTableDataCell","albumName","artist","trackNumber","title","tableNumber","requestedAt","colSpan","md","span","offset","PaginationComponent","totalCount"],"sourceRoot":""}