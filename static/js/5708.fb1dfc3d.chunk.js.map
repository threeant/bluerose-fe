{"version":3,"file":"static/js/5708.fb1dfc3d.chunk.js","mappings":"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","sources":["views/manage/TableList.js","../node_modules/@coreui/icons/src/free/cil-sync.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\nimport { throwError } from '../../common/utils'\n\n\nimport CIcon from '@coreui/icons-react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CFormInput,\n  CRow,\n  CContainer,\n  CSpinner,\n} from '@coreui/react';\nimport {\n  cilSync\n} from '@coreui/icons'\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst TableList = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const location = useLocation();\n\n\n  useEffect(() => {\n\n    submitSearchTable();\n\n  }, []);\n\n  //좌석수 숫자세팅\n  const setNumberTableCnt = (e) => {\n    const value = e.target.value;\n\n    if (value.length <= 3) {\n      setTableReqData({ ...tableReqData, tableName: e.target.value });\n    }\n\n  }\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n  **********************************************************************/\n  // 테이블 리스트\n  const [tableDatas, setTableDatas] = useState([]);\n\n  // 테이블 등록\n  const [tableReqData, setTableReqData] = useState(\n    {\n      \"numberOfSeats\": \"\",\n      \"settingYn\": false,\n      \"tableName\": \"\"\n    }\n  );\n\n\n  //테이블 검색 API\n  const submitSearchTable = async () => {\n\n    try {\n      const response = await axiosInstance.get('/api/tables');\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setTableDatas(data);\n      console.log(\"테이블 결과 ----\")\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n  //등록 클릭\n  const clickTableSong = (e) => {\n    e.preventDefault();\n\n    if (!tableReqData.numberOfSeats) {\n      alert('테이블 번호를 입력해 주세요.');\n      return;\n    }\n\n    if (!tableReqData.tableName) {\n      alert('좌석수를 입력해주세요.');\n      return;\n    }\n\n\n\n    const result = window.confirm('해당 테이블을 등록 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitReqTable();\n\n  };\n\n \n\n\n  //등록 하기 API\n  const submitReqTable = async () => {\n\n    try {\n      const response = await axiosInstance.post('/api/tables', tableReqData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n      console.log(response.data);\n      if (response.status === 200) {\n        \n        // 폼 데이터를 초기화합니다.\n        alert('등록되었습니다.');\n        submitSearchTable();\n        setTableReqData(\n          {\n            \"numberOfSeats\": \"\",\n            \"settingYn\": false,\n            \"tableName\": \"\"\n          }\n        );\n      } else {\n        alert('오류 발생');\n      }\n\n      \n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.error('API 요청 실패:', error);\n      alert(error.response.data.message);\n    }\n\n  };\n\n\n  //삭제 클릭\n  const clickDeletTable = (e, tableId) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당 테이블을 삭제 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitDeletTable(tableId);\n  };\n\n  //삭제 API\n  const submitDeletTable = async (tableId) => {\n\n\n    try {\n      const response = await axiosInstance.delete('/api/tables/' + tableId);\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('삭제되었습니다.');\n      submitSearchTable();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n\n   //연결해제\n   const clickDisconnTable = (e, tableId) => {\n    e.preventDefault();\n  \n    const result = window.confirm('해당 테이블을 연결 해제하시겠습니까?');\n   \n    if (!result) {\n      return;\n    }\n  \n    submitDisconnTable(tableId);\n  };\n\n\n  //삭제 API\n  const submitDisconnTable = async (tableId) => {\n\n\n    try {\n      const response = await axiosInstance.post('/api/tables/' + tableId +'/disconnect');\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('해제되었습니다.');\n      submitSearchTable();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n  \n\n\n\n  return (\n    <CContainer>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          <CButton color=\"light\" onClick={submitSearchTable}>\n            <CIcon icon={cilSync} title=\"Download file\" />\n          </CButton>\n          <strong> 테이블 목록</strong> <small></small>\n        </CCardHeader>\n        {tableDatas ? (\n          <CCardBody>\n            <CRow>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staNo\" value=\"No\" readOnly plainText />\n              </CCol>\n              <CCol xs={5}>\n                <CFormInput type=\"text\" id=\"staTrackNumber\" value=\"테이블번호*\" readOnly plainText />\n              </CCol>\n              <CCol xs={3}>\n                <CFormInput type=\"text\" id=\"staTitle\" value=\"좌석수*\" readOnly plainText />\n              </CCol>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staRunningTime\" value=\"세팅여부\" readOnly plainText />\n              </CCol>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staRunningTime\" value=\"연결해제\" readOnly plainText />\n              </CCol>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staButton\" value=\"삭제\" readOnly plainText />\n              </CCol>\n            </CRow>\n            <CRow>\n              <CCol xs={1}>\n                <CFormInput type=\"text\" id=\"staNoReq\" value=\"-\" readOnly plainText />\n              </CCol>\n              <CCol xs={5}>\n                <CFormInput type=\"text\" id=\"inputTableName\" value={tableReqData.tableName} onChange={(e) => setTableReqData({ ...tableReqData, tableName: e.target.value })} maxLength={5} />\n              </CCol>\n              <CCol xs={2}>\n                <CFormInput type=\"number\" id=\"inputTrackNumber\" value={tableReqData.numberOfSeats} onChange={(e) => setTableReqData({ ...tableReqData, numberOfSeats: e.target.value })} />\n              </CCol>\n              \n              <CCol xs={3}>\n                <CButton color=\"info\"  onClick={(e) => clickTableSong(e)}>\n                  추가\n                </CButton>\n              </CCol>\n            </CRow>\n            {tableDatas.map((item, index) => (\n              <CRow key={index}>\n                <CCol xs={1}>\n                  <CFormInput type=\"text\" id={'txtNoReq${index}'} value={tableDatas.length - index} readOnly plainText />\n                </CCol>\n                <CCol xs={5}>\n                  <CFormInput type=\"text\" id={'txtTableNumber${index}'} value={item.tableName} readOnly plainText />\n                  \n                </CCol>\n                <CCol xs={3}>\n                  <CFormInput type=\"text\" id={'txtNumberOfSeats${index}'} value={item.numberOfSeats} readOnly plainText />\n                </CCol>\n                <CCol xs={1}>\n                  <CFormInput type=\"text\" id={'txtSettingYn${index}'} value={item.settingYn? 'O' : 'X'} readOnly plainText />\n                </CCol>\n                <CCol xs={1}>\n                {item.settingYn ?\n                  <CButton color=\"danger\" className=\"mb-3\" onClick={(e) => clickDisconnTable(e, item.id)}>\n                    해제\n                  </CButton>\n                  : '-'}\n                </CCol>\n                <CCol xs={1}>\n                <CButton color=\"dark\" className=\"mb-3\" onClick={(e) => clickDeletTable(e,item.id)}>\n                  삭제\n                </CButton>\n              </CCol>\n              </CRow>\n            ))}\n          </CCardBody>\n        ) : (<div className=\"d-flex justify-content-center\">\n          <CSpinner />\n        </div>\n        )}\n      </CCard>\n    </CContainer >\n  );\n};\n\nexport default TableList;\n","export var cilSync = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M410.168,133.046,381.21,104.088,464.017,104l-.034-32L328,72.144V208h32V128.132l27.541,27.541A152.5,152.5,0,0,1,279.972,416l.056,32a184.5,184.5,0,0,0,130.14-314.954Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M232.028,104l-.056-32a184.5,184.5,0,0,0-130.14,314.954L130.878,416H48v32H184V312H152v79.868l-27.541-27.541A152.5,152.5,0,0,1,232.028,104Z' class='ci-primary'/>\"];\n"],"names":["TableList","navigate","useNavigate","useLocation","useEffect","submitSearchTable","tableDatas","setTableDatas","useState","tableReqData","setTableReqData","async","data","axiosInstance","get","console","log","error","throwError","submitReqTable","response","post","headers","status","alert","message","submitDeletTable","delete","tableId","submitDisconnTable","_jsx","CContainer","children","_jsxs","CCard","className","CCardHeader","CButton","color","onClick","CIcon","icon","cilSync","title","CCardBody","CRow","CCol","xs","CFormInput","type","id","value","readOnly","plainText","tableName","onChange","e","target","maxLength","numberOfSeats","preventDefault","window","confirm","clickTableSong","map","item","index","length","settingYn","clickDisconnTable","clickDeletTable","CSpinner"],"sourceRoot":""}