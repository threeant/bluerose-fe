{"version":3,"file":"static/js/6867.2d65219c.chunk.js","mappings":"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","sources":["common/ComModal.js","views/common/PaginationComponent.js","views/music/MusicReqHisList.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CPagination, CPaginationItem } from '@coreui/react';\n\nconst PaginationComponent = ({ totalPages, currentPage, onPageChange }) => {\n  const renderPaginationItems = () => {\n    const items = [];\n    const maxButtons = 5; // 한 번에 보여줄 최대 버튼 수\n    const halfMaxButtons = Math.floor(maxButtons / 2);\n\n    // 현재 페이지를 중심으로 앞뒤로 최대 maxButtons/2 개씩 버튼을 표시합니다.\n    let start = Math.max(1, currentPage - halfMaxButtons);\n    let end = Math.min(totalPages, start + maxButtons - 1);\n\n    // 만약 현재 페이지가 처음 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 1로 설정하고 끝 페이지를 maxButtons 개로 설정합니다.\n    if (currentPage <= halfMaxButtons) {\n      start = 1;\n      end = Math.min(totalPages, maxButtons);\n    }\n    // 만약 현재 페이지가 마지막 페이지 근처에 위치해 있을 경우,\n    // 시작 페이지를 totalPages - maxButtons + 1로 설정하고 끝 페이지를 totalPages로 설정합니다.\n    else if (currentPage >= totalPages - halfMaxButtons) {\n      start = Math.max(1, totalPages - maxButtons + 1);\n      end = totalPages;\n    }\n\n    // 페이지 버튼을 생성합니다.\n    for (let i = start; i <= end; i++) {\n      items.push(\n        <CPaginationItem key={i} active={i === currentPage} onClick={() => onPageChange(i)}>\n          {i}\n        </CPaginationItem>\n      );\n    }\n    return items;\n  };\n\n  return (\n    <CPagination aria-label=\"Page navigation example\">\n      <CPaginationItem aria-label=\"Previous\" disabled={currentPage === 1} onClick={() => onPageChange(currentPage - 1)}>\n        <span aria-hidden=\"true\">&laquo;</span>\n      </CPaginationItem>\n      {renderPaginationItems()}\n      <CPaginationItem aria-label=\"Next\" disabled={currentPage === totalPages} onClick={() => onPageChange(currentPage + 1)}>\n        <span aria-hidden=\"true\">&raquo;</span>\n      </CPaginationItem>\n    </CPagination>\n  );\n};\n\nPaginationComponent.propTypes = {\n  totalPages: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n};\n\nexport default PaginationComponent;\n","import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\n\nimport PaginationComponent from '../common/PaginationComponent';\nimport { throwError } from '../../common/utils'\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n} from '@coreui/react'\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst MusicReqHisList = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const [selectedDate, setSelectedDate] = useState(null); //등록일 from\n  const [selectedDate2, setSelectedDate2] = useState(null); // 등록일 to\n\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태\n  const [totalPages, setTotalPages] = useState(0); // 현재 페이지 상태\n\n  /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n  const [alertType, setAlertType] = useState('');\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertText, setAlertText] = useState('');\n  const [acceptType, setAcceptType] = useState('');\n \n\n\n  const alertPage = (txt) => {\n    setAlertType('alert');\n    setAlertText(txt);\n    setAlertVisible(true);\n  };\n\n  const confirmPage = (txt, type) => {\n    setAlertType('confirm');\n    setAlertText(txt);\n    setAlertVisible(true);\n    setAcceptType(type);\n  };\n\n  const handleCloseModal = () => {\n    setAlertVisible(false);\n  };\n  const handleAccept = () => {\n    setAlertVisible(false);\n    \n\n    setAcceptType('');\n    \n  };\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({\n    \"startDate\": \"\",\n    \"endDate\": \"\",\n    \"page\": 1,\n    \"size\": 15\n  });\n\n  //페이지 변경\n  const handlePageChange = (page) => {\n    //console.log('현재페이지 ');\n    //console.log(page);\n    setCurrentPage(page); // 페이지 변경 시 현재 페이지 상태 업데이트\n    submitSearchAlbums(page);\n  };\n\n\n  // 날짜가 선택될 때 호출될 콜백 함수\n  const handleDateChange = date => {\n    console.log(date);\n    setSelectedDate(date);\n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    console.log(formattedDate);\n    //setAlbumSearch({ ...albumSearch, startDate: formattedDate });\n    setAlbumSearch(prevState => ({\n      ...prevState,\n      startDate: formattedDate\n    }));\n\n  }\n  const handleDateChange2 = date => {\n    setSelectedDate2(date);\n    const localDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)); // 로컬 시간대로 조정\n    const formattedDate = localDate.toISOString().slice(0, 10);\n    setAlbumSearch(prevState => ({\n      ...prevState,\n      endDate: formattedDate\n    }));\n  }\n\n  useEffect(() => {\n    // 7일 전 날짜 계산\n    const todayDate = new Date();\n    const pastDate = new Date(todayDate.getTime() - 7 * 24 * 60 * 60 * 1000); // 7일 전 날짜 계산\n    \n    handleDateChange(pastDate);\n    handleDateChange2(todayDate);\n\n    //submitSearchAlbums(0);\n  }, []);\n\n  //초기화\n  const clickReset = date => {\n\n\n    setAlbumSearch({\n      \"startDate\": \"\",\n      \"endDate\": \"\",\n      \"page\": 1,\n      \"size\": 1\n    });\n    const todayDate = new Date();\n    const pastDate = new Date(todayDate.getTime() - 7 * 24 * 60 * 60 * 1000); // 7일 전 날짜 계산\n    handleDateChange(pastDate);\n    handleDateChange2(todayDate);\n  }\n\n  const goInfoClick = (e, date) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    console.log('goInfoClick : ' + date);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    navigate('/music/musicReqHisInfo', { state: { dateStr :  date} });\n  };\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [albumDatas, setAlbumDatas] = useState({ contents: [] });\n\n  \n\n\n  //검색 API\n  const submitSearchAlbums = async (page) => {\n\n    console.log(albumSearch);\n    if(page > -1){\n      setAlbumSearch(prevState => ({\n        ...prevState,\n        page: page\n      }));\n\n      albumSearch.page = page;\n    }\n\n    \n\n    console.log(albumSearch);\n\n\n      if(!albumSearch.startDate || !albumSearch.endDate){\n        alertPage('등록일 기간을 정확히 입력해주세요.')\n        return;\n      }\n    \n\n\n    try {\n      const response = await axiosInstance.get('/api/song-request/history', {\n        params: albumSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setAlbumDatas(data);\n\n      console.log(data);\n\n      console.log(data);\n      setTotalPages(data.totalPages);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  return (\n    <>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept}/>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>신청곡 히스토리 검색</strong></CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" onSubmit={submitSearchAlbums}>\n                <CRow className=\"mb-3\">\n                  <CCol md={1}>\n                    <CFormLabel htmlFor=\"inputEmail3\" className=\"col-form-label\">검색일</CFormLabel>\n                  </CCol>\n                  <CCol md={5}>\n                    <div style={{ display: 'flex' }}>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate}\n                          onChange={handleDateChange}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumSearch.startDate}\n                        />\n                      </div>\n                      <div style={{ whiteSpace: 'pre-wrap', display: 'grid', placeItems: 'center' }}>\n                        <span> ~ </span>\n                      </div>\n                      <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                        <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                      </div>\n                      <div>\n                        <DatePicker\n                          selected={selectedDate2}\n                          onChange={handleDateChange2}\n                          dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                          shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                          minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                          maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                          className=\"DatePicker\"\n                          value={albumSearch.endDate}\n                        />\n                      </div>\n                    </div>\n                  </CCol>\n                </CRow>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"reset\" color=\"light\" value=\"초기화\" onClick={clickReset} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"조회하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">날짜</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">신청곡수</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                    albumDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{index + 1}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <a href='/' onClick={(e) => goInfoClick(e, item.date)}>{item.date}</a>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.numberOfSongRequested}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {albumDatas.contents && albumDatas.contents.length > 0 ? (\n                <CRow>\n                  <CCol md={{ span: 6, offset: 5 }}>\n                  <PaginationComponent totalPages={totalPages} currentPage={currentPage} onPageChange={handlePageChange} />\n                  </CCol>\n                  <CCol md={1}>\n                    총 {albumDatas.totalCount}건\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default MusicReqHisList\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","totalPages","currentPage","onPageChange","CPagination","CPaginationItem","disabled","renderPaginationItems","items","halfMaxButtons","Math","floor","maxButtons","start","max","end","min","i","push","active","MusicReqHisList","navigate","useNavigate","selectedDate","setSelectedDate","useState","selectedDate2","setSelectedDate2","setCurrentPage","setTotalPages","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","albumSearch","setAlbumSearch","handleDateChange","date","console","log","formattedDate","Date","getTime","getTimezoneOffset","toISOString","slice","prevState","startDate","handleDateChange2","endDate","useEffect","todayDate","pastDate","albumDatas","setAlbumDatas","contents","submitSearchAlbums","async","page","txt","data","axiosInstance","get","params","headers","error","throwError","_Fragment","ComModal","handleCloseModal","handleAccept","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","onSubmit","md","CFormLabel","htmlFor","style","display","placeItems","marginRight","cilCalendar","size","DatePicker","selected","onChange","dateFormat","shouldCloseOnSelect","minDate","maxDate","value","whiteSpace","xs","component","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","length","map","item","index","CTableDataCell","href","e","goInfoClick","preventDefault","state","dateStr","numberOfSongRequested","colSpan","span","offset","PaginationComponent","totalCount"],"sourceRoot":""}