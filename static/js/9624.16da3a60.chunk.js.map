{"version":3,"file":"static/js/9624.16da3a60.chunk.js","mappings":"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","sources":["views/music/MusicReq.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cilSync\n} from '@coreui/icons'\nimport { useNavigate } from 'react-router-dom'\nimport { getCodeList, getCurrentDate, throwError } from '../../common/utils'\nimport SongList from '../common/SongList'; // MyModal 컴포넌트의 경로를 알맞게 설정\nimport AlbumInfo from '../common/AlbumInfo'\nimport axiosInstance from '../../common/axiosInstance';\nimport { Client } from \"@stomp/stompjs\";\nimport appConfig from '../../common/appConfig';\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody\n} from '@coreui/react'\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\n\nconst MusicReq = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n  //앨범아이디\n  const [albumId, setAlbumId] = useState();\n\n  const [stompClient, setStompClient] = useState(null); // 소켓클라이언트\n  \n\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  useEffect(() => {\n    setSocket();\n    refreshMusicReq(); //신청곡 조회\n    \n    submitSearchNowPlayingCondition(); // 신청곡 상태조회\n    \n    //callHeader();\n  }, []); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n\n\n  const callHeader = () => {//헤더 초기화 하도록\n      const response = axiosInstance.get('/api/callRefresh', {\n        \"code\": \"string\",\n        \"msg\": \"string\"\n    },{\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  const setSocket = async  () => {\n    console.log('>>>>!!?');\n    const stompConfig = {\n      connectHeaders: {},\n      brokerURL: appConfig.wsUrl,\n      debug: function (str) {\n        console.log('STOMP ADMIN: ' + str);\n      },\n      // reconnectDelay: 200,\n      forceBinaryWSFrames: true,\n      appendMissingNULLonIncoming: true,\n      onConnect: function (frame) {\n          console.log('Connected to server.');\n          console.log('connected >>>> ADMIN');\n            \n      },\n      onStompError: (frame) => {\n        console.log('Additional details: ' + frame.body);\n      },\n      onMessage: function (message) {\n        // 서버로부터 메시지를 수신할 때의 처리\n        console.log('>>>여깁니다 받았Received message:', message.body);\n      }\n    };\n\n    const client = new Client(stompConfig);\n    setStompClient(client);\n    client.activate();\n    \n    client.onConnect = (frame) => {\n      client.subscribe('/topic/request-song', function (message) {\n        console.log('>>>>ADMIN !>>');\n        console.log(JSON.parse(message.body));\n        var rtnTxt = JSON.parse(message.body);\n        //parentFunction(rtnTxt.type);\n       \n        \n        if(rtnTxt.type == 'APP_REQUEST_SONG'){\n          console.log('DISPLAY : ADMIN_UPDATE_PLAYING!!! >> '+rtnTxt.requestSongSize);\n         // var newRequestSongSize = rtnTxt.requestSongSize;\n         refreshMusicReq();\n\n         console.log('SONG_REQ!!!!!!!!!!');\n\n          //(1)admin 에서 헤더 새 신청곡 갯수 update  (2)admin 신청곡 리스트 update \n          \n        }\n      });\n    }\n  }\n  const goFormClick = () => { //등록화면이동\n    navigate('/music/albumReg');\n  }\n\n  const [visibleSong, setVisibleSong] = useState(false);\n  const [visibleAlbum, setVisibleAlbum] = useState(false)\n  //신청곡 추가 버튼\n  const popMusicAddClick = () => {\n    setVisibleSong(!visibleSong)\n  }\n\n\n  //앨범 팝업 추가 버튼\n  const popAlbumInfoClick = (e, pAlbumId) => {\n    e.preventDefault();\n    setAlbumId(pAlbumId);\n    setVisibleAlbum(!visibleAlbum);\n  }\n\n\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //신청곡리스트\n  const [musicReqDatas, setMusicReqDatas] = useState({ contents: [] });\n\n  //플레잉곡\n  const [nowPlayingData, setNowPlayingData] = useState({});\n\n  //플레잉곡\n  const [nowPlayingConditionData, setNowPlayingCondtionData] = useState({});\n\n\n  //신청곡 시작/정지 여부 조회 API\n  const submitSearchNowPlayingCondition = async () => {\n\n\n    try {\n      const response = await axiosInstance.get('/api/song-request/condition', {\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      console.log(\"현재??\");\n      console.log(data);\n      setNowPlayingCondtionData(data);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n  }\n\n\n  //초기화후 조회\n  const refreshMusicReq = async () => {\n    const dateStr = getCurrentDate();\n    /*const hour = new Date().getHours();\n    if (hour < 6) {\n      dateStr = getAddDate(\"d\", -1, dateStr, \"-\")\n    }\n    */\n\n    submitSearchMusicReq(dateStr);\n    submitSearchNowPlaying(dateStr);\n\n  }\n\n\n  //신청곡 리스트 검색 API\n  const submitSearchMusicReq = async (dateStr) => {\n\n\n    try {\n      const response = await axiosInstance.get('/api/song-request', {\n        params: {\n          \"date\": dateStr\n        },\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setMusicReqDatas(data);\n\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n  //신청곡 리스트 검색 API\n  const submitSearchNowPlaying = async (dateStr) => {\n\n\n    try {\n      const response = await axiosInstance.get('/api/song-request/now-playing', {\n        params: {\n          \"date\": dateStr\n        },\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setNowPlayingData(data);\n\n      console.log(data)\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n  //신청곡 선곡 클릭\n  const clickSelectMusicReq = (e, musicReqId) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 선곡 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitSelectMusicReq(musicReqId);\n  };\n\n\n  //신청곡 선곡 API\n  const submitSelectMusicReq = async (musicReqId) => {\n\n    console.log(musicReqId);\n\n    try {\n      const response = await axiosInstance.post('/api/song-request/now-playing/register',\n        {\n          \"songRequestId\": musicReqId\n        }\n        ,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('선곡되었습니다.');\n      refreshMusicReq();\n\n\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n  //신청곡 삭제 클릭\n  const clickDeletMusicReq = (e, musicReqId) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 삭제 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitDeletSong(musicReqId);\n  };\n\n  //곡 삭제 API\n  const submitDeletSong = async (musicReqId) => {\n\n    console.log(musicReqId);\n\n    try {\n      const response = await axiosInstance.delete('/api/song-request/' + musicReqId);\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('삭제되었습니다.');\n      refreshMusicReq();\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const controllSongModal = (openYn) => {\n    setVisibleSong(openYn);\n  }\n\n  const controllAlbumModal = (openYn) => {\n    setVisibleAlbum(openYn);\n  }\n\n  //신청곡 시작 정지 조건 변경 클릭\n  const clickConditonChange = (e, startYn) => {\n    e.preventDefault();\n\n    var msg = '신청곡을 중단 하시겠습니까?';\n\n    if (startYn) {\n      msg = '신청곡을 받기 하시겠습니까?';\n    }\n\n    const result = window.confirm(msg);\n\n    if (!result) {\n      return;\n    }\n\n\n    submitClickConditonChange(startYn);\n  };\n\n\n\n  //신청곡 시작 정지 조건 변경 API\n  const submitClickConditonChange = async (startYn) => {\n\n\n    try {\n\n      const response = await axiosInstance.post('/api/song-request/condition',\n        {\n          \"requestSongAvailable\": startYn\n        }\n        ,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        });\n\n      console.log('API 응답:', response.data);\n\n      alert('변경되었습니다.');\n      refreshMusicReq(); //신청곡 조회\n      submitSearchNowPlayingCondition(); // 신청곡 상태조회\n\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n\n  //신청곡 완료 클릭\n  const clickCompleteMusicReq = (e) => {\n    e.preventDefault();\n\n    const result = window.confirm('해당곡을 완료 하시겠습니까?');\n\n    if (!result) {\n      return;\n    }\n\n    submitCompleteMusicReq();\n  };\n\n\n  //신청곡 완료 API\n  const submitCompleteMusicReq = async () => {\n\n\n    try {\n      const response = await axiosInstance.post('/api/song-request/now-playing/complete');\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert('곡이 끝났습니다.');\n      refreshMusicReq();\n\n\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  }\n\n // 신청곡 추가 callback\n  const handleDataFromSongList = async(datas) => {\n    // 부모 컴포넌트에서 전달받은 데이터 처리\n    console.log('Data from child:', datas);\n    console.log(datas);\n    var songIdArr = [];\n      for(var i = 0 ; i < datas.length; i++){\n      songIdArr[i] = {\n        \"songId\": datas[i].songId,\n        \"tableId\": 1\n      };\n    }\n\n    try {\n      const response = await axiosInstance.post('/api/song-request', songIdArr, {\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        });\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      alert(' 추가 되었습니다.');\n      refreshMusicReq(); //신청곡 조회\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n    \n  };\n\n\n  return (\n    <>\n      <CModal\n        size=\"xl\"\n        visible={visibleSong}\n        onClose={() => setVisibleSong(false)}\n        aria-labelledby=\"OptionalSizesExample2\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"OptionalSizesExample1\">신청곡 추가</CModalTitle>\n        </CModalHeader>\n        <CModalBody><SongList openModal={controllSongModal} sendDataToParent={handleDataFromSongList}/></CModalBody>\n      </CModal>\n      <CModal\n        size=\"xl\"\n        visible={visibleAlbum}\n        onClose={() => setVisibleAlbum(false)}\n        aria-labelledby=\"OptionalSizesExample4\"\n      >\n        <CModalHeader>\n          <CModalTitle id=\"OptionalSizesExample3\">앨범정보</CModalTitle>\n        </CModalHeader>\n        <CModalBody><AlbumInfo openModal={controllAlbumModal} albumId={albumId} /></CModalBody>\n      </CModal>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>신청곡관리</strong></CCardHeader>\n            <CCardBody>\n              <CRow className=\"justify-content-between\">\n                <CCol xs={12}>\n                  <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                    {nowPlayingConditionData.requestSongAvailable ? (<CButton component=\"input\" type=\"reset\" color=\"danger\" value=\"신청곡정지\" onClick={(e) => clickConditonChange(e, false)} />)\n                      : (<CButton component=\"input\" color=\"info\" value=\"신청곡시작\" onClick={(e) => clickConditonChange(e, true)} />)}\n\n                  </div>\n                </CCol>\n              </CRow>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\"></CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">TrackNumber</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Running Time</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {nowPlayingData && nowPlayingData.id != null ? (\n                    <CTableRow v-for=\"item in tableItems\"  >\n                      <CTableHeaderCell className=\"text-center\" color=\"light\">Now Playing</CTableHeaderCell>\n                      <CTableDataCell className=\"text-center\">\n                        <strong><a href='/' onClick={(e) => popAlbumInfoClick(e, nowPlayingData.albumId)}>{nowPlayingData.albumName}</a></strong>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <strong>{nowPlayingData.artist}</strong>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <strong>{nowPlayingData.trackNumber}</strong>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <strong>{nowPlayingData.title}</strong>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <strong>{nowPlayingData.runningTime}</strong>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableHeaderCell color=\"light\" className=\"text-center\">Now Playing</CTableHeaderCell>\n                        <CTableDataCell className=\"text-center\" colSpan={5} key={0}>\n                          -\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {nowPlayingData && nowPlayingData.id != null ? (\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" color=\"success\" value=\"곡완료\" onClick={(e) => clickCompleteMusicReq(e)} />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              ) : ('')}\n            </CCardBody>\n          </CCard>\n\n          <CCard className=\"mb-4\">\n            <CCardHeader><strong>신청곡목록</strong> <small>  오전 6시에 초기화 됩니다.</small> {musicReqDatas.contents && musicReqDatas.contents.length > 0 ? (<small>총 {musicReqDatas.contents.length\n            }건</small>) : ('')}</CCardHeader>\n            <CCardBody>\n              <div className=\"d-grid gap-2\">\n                <CRow className=\"justify-content-between\">\n                  <CCol xs={12}>\n                    <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                      <CButton component=\"input\" type=\"reset\" color=\"secondary\" value=\"신청곡 추가\" onClick={popMusicAddClick} />\n                      <CButton color=\"light\" onClick={refreshMusicReq}>\n                        <CIcon icon={cilSync} title=\"Download file\" />\n                      </CButton>\n                    </div>\n                  </CCol>\n                </CRow>\n              </div>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">앨범명</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">아티스트</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Track Number</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Title</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Table Number</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\"></CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Running Time</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {musicReqDatas && musicReqDatas.length > 0 ? (\n                    musicReqDatas.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{index+1}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          <strong><a href='/' onClick={(e) => popAlbumInfoClick(e, item.albumId)}>{item.albumName}</a></strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.artist}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.trackNumber}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                          {item.title}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.tableName == '0' ? '관리자' : item.tableName}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          <CButton color=\"success\" shape=\"rounded-pill\" className=\"mb-3\" onClick={(e) => clickSelectMusicReq(e, item.songRequestId)}>\n                            선곡\n                          </CButton>\n                          <CButton color=\"dark\" shape=\"rounded-pill\" className=\"mb-3\" onClick={(e) => clickDeletMusicReq(e, item.songRequestId)}>\n                            삭제\n                          </CButton>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.runningTime}\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={7} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default MusicReq\n"],"names":["MusicReq","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","albumId","setAlbumId","stompClient","setStompClient","useEffect","setSocket","refreshMusicReq","submitSearchNowPlayingCondition","async","console","log","stompConfig","connectHeaders","brokerURL","appConfig","wsUrl","debug","str","forceBinaryWSFrames","appendMissingNULLonIncoming","onConnect","frame","onStompError","body","onMessage","message","client","Client","activate","subscribe","JSON","parse","rtnTxt","type","requestSongSize","visibleSong","setVisibleSong","visibleAlbum","setVisibleAlbum","popAlbumInfoClick","e","pAlbumId","preventDefault","musicReqDatas","setMusicReqDatas","contents","nowPlayingData","setNowPlayingData","nowPlayingConditionData","setNowPlayingCondtionData","data","axiosInstance","get","headers","error","throwError","dateStr","getCurrentDate","submitSearchMusicReq","submitSearchNowPlaying","params","submitSelectMusicReq","musicReqId","response","post","alert","submitDeletSong","delete","clickConditonChange","startYn","msg","window","confirm","submitClickConditonChange","submitCompleteMusicReq","_jsxs","_Fragment","children","CModal","size","visible","onClose","_jsx","CModalHeader","CModalTitle","id","CModalBody","SongList","openModal","openYn","sendDataToParent","datas","songIdArr","i","length","songId","AlbumInfo","CRow","CCol","CCard","className","CCardHeader","CCardBody","xs","requestSongAvailable","CButton","component","color","value","onClick","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","CTableDataCell","href","albumName","artist","trackNumber","title","runningTime","colSpan","clickCompleteMusicReq","popMusicAddClick","CIcon","icon","cilSync","map","item","index","tableName","shape","clickSelectMusicReq","songRequestId","clickDeletMusicReq"],"sourceRoot":""}