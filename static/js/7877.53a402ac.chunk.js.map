{"version":3,"file":"static/js/7877.53a402ac.chunk.js","mappings":"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","sources":["common/ComModal.js","views/system/AdminReg.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axiosInstance from '../../common/axiosInstance';\n\nimport { getCodeList, throwError } from '../../common/utils'\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst AdminReg = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n\n    /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n    const [alertType, setAlertType] = useState('');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [alertText, setAlertText] = useState('');\n    const [acceptType, setAcceptType] = useState('');\n    const [alertAftType, setAlertAftType] = useState('');\n   \n  \n  \n    const alertPage = (txt) => {\n      setAlertType('alert');\n      setAlertText(txt);\n      setAlertVisible(true);\n    };\n  \n    const confirmPage = (txt, type) => {\n      setAlertType('confirm');\n      setAlertText(txt);\n      setAlertVisible(true);\n      setAcceptType(type);\n    };\n  \n    const handleCloseModal = () => {\n      setAlertVisible(false);\n    };\n    const handleAccept = () => {\n      setAlertVisible(false);\n      if(acceptType === 'req'){// 등록\n        submitRegAlbum();\n      }\n      setAcceptType('');\n      \n    };\n  \n  \n  \n    const handleAftFunc = () => {\n      if(alertAftType === 'req'){// 등록\n        navigate('/system/AdminList');\n      }\n      setAlertAftType('');\n      \n    };\n  \n\n  //목록이동\n  const goListClick = () => {\n    navigate('/system/AdminList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setAdminData({ ...adminData, releaseDate: formattedDate })\n  }\n  const [validated, setValidated] = useState(false);\n\n  const [adminData, setAdminData] = useState({\n      \"etc\": \"\",\n      \"id\": \"\",\n      \"name\": \"\",\n      \"password\": \"\",\n      \"passwordChk\": \"\",\n      \"useYn\" : true\n      \n  });\n\n  \n\n  //등록하기 API\n  const confirmSubmitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(adminData);\n\n\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    \n\n    if(adminData.password != adminData.passwordChk){\n      alertPage('비밀번호와 비밀번호 확인이 일치하지 않습니다');\n      setAdminData((prevData) => ({\n        ...prevData,\n        passwordChk: '',\n      }));\n      setValidated(false);\n      return;\n    }\n\n    //const result = window.confirm('해당 관리자를 등록 하시겠습니까?');\n\n    confirmPage('해당 관리자를 등록 하시겠습니까?', 'req')\n\n    // if (!result) {\n    //   return;\n    // }\n  }\n\n  const submitRegAlbum = async () => {\n\n    try {\n      const response = await axiosInstance.post('/api/admin', adminData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      setAdminData({\n        \"etc\": \"\",\n        \"id\": \"\",\n        \"name\": \"\",\n        \"password\": \"\"\n    });\n      alertPage('등록되었습니다.');\n      setAlertAftType('req');\n      \n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n  return (\n    <CContainer>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept} aftFunc={handleAftFunc}/>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>관리자등록</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                className=\"row g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={confirmSubmitRegAlbum}\n              >\n                {/* <CCol xs={10} >\n                  <CFormLabel></CFormLabel>\n                </CCol>\n                <CCol xs={2} >\n                  <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                  <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" defaultChecked={adminData.useYn} onChange={(e) => setAdminData({ ...adminData, useYn: e.target.value })} />\n                </CCol> */}\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputId\">아이디*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputId\" required onChange={(e) => setAdminData({ ...adminData, id: e.target.value })} maxLength={10} />\n                  <CFormFeedback invalid>아이디를 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">이름*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputName\" required onChange={(e) => setAdminData({ ...adminData, name: e.target.value })} maxLength={10} />\n                  <CFormFeedback invalid>이름을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputPw\">비밀번호*</CFormLabel>\n                  <CFormInput type=\"password\" id=\"inputPw\" required onChange={(e) => setAdminData({ ...adminData, password: e.target.value })} maxLength={20} />\n                  <CFormFeedback invalid>비밀번호을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputPwChk\">비밀번호확인*</CFormLabel>\n                  <CFormInput type=\"password\" id=\"inputPwChk\" required onChange={(e) => setAdminData({ ...adminData, passwordChk: e.target.value })} maxLength={20} />\n                  <CFormFeedback invalid>비밀번호확인을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputEtc\">비고</CFormLabel>\n                  <CFormTextarea id=\"inputEtc\" rows=\"3\" onChange={(e) => setAdminData({ ...adminData, etc: e.target.value })} ></CFormTextarea>\n                </CCol>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"등록하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </CContainer>\n  );\n};\n\nexport default AdminReg;\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","AdminReg","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","alertAftType","setAlertAftType","alertPage","txt","selectedDate","setSelectedDate","validated","setValidated","adminData","setAdminData","submitRegAlbum","async","response","axiosInstance","post","headers","console","log","data","error","throwError","CContainer","ComModal","handleCloseModal","handleAccept","handleAftFunc","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","confirmPage","currentTarget","checkValidity","password","passwordChk","prevData","stopPropagation","xs","CFormLabel","htmlFor","CFormInput","required","onChange","target","value","maxLength","CFormFeedback","invalid","name","CFormTextarea","rows","etc","component","goListClick"],"sourceRoot":""}