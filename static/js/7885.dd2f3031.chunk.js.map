{"version":3,"file":"static/js/7885.dd2f3031.chunk.js","mappings":"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","sources":["views/display/DisplayReg.js"],"sourcesContent":["import React, { useState } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList ,throwError} from '../../common/utils'\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\nimport axiosInstance from '../../common/axiosInstance';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst DisplayReg = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n  const [dispCD] = useState(getCodeList('DISP')); // 전시CD\n\n  //목록이동\n  const goListClick = () => {\n    navigate('/display/displayList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setDisplayData({ ...displayData, releaseDate: formattedDate })\n  }\n  const [validated, setValidated] = useState(false);\n\n  const [displayData, setDisplayData] = useState({\n    //image : '',        //이미지\n    title: '',        //제목\n    sort: 0,      //전시순서\n    codeId: '1',        //전시타입\n    useYn: true,      //사용여부\n    displayCount : 0\n  });\n\n  //등록하기 API\n  const submitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(displayData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    try {\n      const response = await axiosInstance.post('/api/display', displayData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      setDisplayData({\n          //image : '',        //이미지\n          title: '',        //제목\n          sort: 0,      //전시순서\n          codeId: '1',        //전시타입\n          useYn: true,      //사용여부\n          displayCount : 0\n        });\n      alert('등록되었습니다.');\n      navigate('/display/displayList');\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n  return (\n    <CContainer>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>전시등록</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                className=\"row g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={submitRegAlbum}\n              >\n                {/* <CCol xs={10} >\n                  <CFormLabel></CFormLabel>\n                </CCol>\n                <CCol xs={2} >\n                  <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                  <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" defaultChecked={displayData.useYn} onChange={(e) => setDisplayData({ ...displayData, useYn: e.target.value })} />\n                </CCol> */}\n\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputName\">제목*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputName\" required onChange={(e) => setDisplayData({ ...displayData, title: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>제목을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">노출곡수*</CFormLabel>\n                  <CFormInput type=\"number\" id=\"inputDisplayCount\" required onChange={(e) => setDisplayData({ ...displayData, displayCount: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>노출곡 갯수를 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">전시타입*</CFormLabel>\n                  <CFormSelect id=\"sel_media\" defaultValue={displayData.codeId} onChange={(e) => setDisplayData({ ...displayData, codeId: e.target.value })}  >\n                    {dispCD.map((item, index) => (\n                      <option value={item.id} key={index}>{item.name}</option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>제목을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"등록하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </CContainer>\n  );\n};\n\nexport default DisplayReg;\n"],"names":["DisplayReg","navigate","useNavigate","dispCD","useState","getCodeList","selectedDate","setSelectedDate","validated","setValidated","displayData","setDisplayData","title","sort","codeId","useYn","displayCount","_jsx","CContainer","children","CRow","CCol","_jsxs","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","async","e","preventDefault","console","log","currentTarget","checkValidity","response","axiosInstance","post","headers","data","alert","error","throwError","stopPropagation","xs","CFormLabel","htmlFor","CFormInput","type","id","required","onChange","target","value","maxLength","CFormFeedback","invalid","CFormSelect","defaultValue","map","item","index","name","CButton","component","color","onClick","goListClick"],"sourceRoot":""}