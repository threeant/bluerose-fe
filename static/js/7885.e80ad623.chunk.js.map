{"version":3,"file":"static/js/7885.e80ad623.chunk.js","mappings":"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","sources":["common/ComModal.js","views/display/DisplayReg.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport { getCodeList ,throwError} from '../../common/utils'\nimport axiosInstance from '../../common/axiosInstance';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CRow,\n  CContainer,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst DisplayReg = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n  const [dispCD] = useState(getCodeList('DISP')); // 전시CD\n\n    /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n    const [alertType, setAlertType] = useState('');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [alertText, setAlertText] = useState('');\n    const [acceptType, setAcceptType] = useState('');\n   \n  \n  \n    const alertPage = (txt) => {\n      setAlertType('alert');\n      setAlertText(txt);\n      setAlertVisible(true);\n    };\n  \n    const confirmPage = (txt, type) => {\n      setAlertType('confirm');\n      setAlertText(txt);\n      setAlertVisible(true);\n      setAcceptType(type);\n    };\n  \n    const handleCloseModal = () => {\n      console.log('??')\n      setAlertVisible(false);\n      //navigate('/display/displayList')\n    };\n\n    const handleAftFunc = () => {\n      navigate('/display/displayList');\n    };\n\n\n    const handleAccept = () => {\n      setAlertVisible(false);\n      if(acceptType === 'reg'){// 추가\n          submitRegDisp();\n      }\n  \n      \n    };\n\n  //목록이동\n  const goListClick = () => {\n    navigate('/display/displayList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setDisplayData({ ...displayData, releaseDate: formattedDate })\n  }\n  const [validated, setValidated] = useState(false);\n\n  const [displayData, setDisplayData] = useState({\n    //image : '',        //이미지\n    title: '',        //제목\n    sort: 0,      //전시순서\n    codeId: '1',        //전시타입\n    useYn: true,      //사용여부\n    displayCount : 0\n  });\n\n  //등록하기 API\n  const confirmSubmitRegDisp = async (e) => {\n    e.preventDefault();\n\n    console.log(displayData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    confirmPage('전시를 등록 하시겠습니까?', 'reg');\n  }\n\n  //등록하기 API\n  const submitRegDisp = async () => {\n    \n\n    try {\n      const response = await axiosInstance.post('/api/display', displayData, {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      setDisplayData({\n          //image : '',        //이미지\n          title: '',        //제목\n          sort: 0,      //전시순서\n          codeId: '1',        //전시타입\n          useYn: true,      //사용여부\n          displayCount : 0\n        });\n      alertPage('등록되었습니다.');\n      //navigate('/display/displayList');\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n  return (\n    <CContainer>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept} aftFunc={handleAftFunc}/>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>전시등록</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                className=\"row g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={confirmSubmitRegDisp}\n              >\n\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputName\">제목*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputName\" required onChange={(e) => setDisplayData({ ...displayData, title: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>제목을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">노출곡수*</CFormLabel>\n                  <CFormInput type=\"number\" id=\"inputDisplayCount\" required onChange={(e) => setDisplayData({ ...displayData, displayCount: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>노출곡 갯수를 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">전시타입*</CFormLabel>\n                  <CFormSelect id=\"sel_media\" defaultValue={displayData.codeId} onChange={(e) => setDisplayData({ ...displayData, codeId: e.target.value })}  >\n                    {dispCD.map((item, index) => (\n                      <option value={item.id} key={index}>{item.name}</option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>제목을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"등록하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </CContainer>\n  );\n};\n\nexport default DisplayReg;\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","DisplayReg","navigate","useNavigate","dispCD","useState","getCodeList","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","selectedDate","setSelectedDate","validated","setValidated","displayData","setDisplayData","title","sort","codeId","useYn","displayCount","submitRegDisp","async","response","axiosInstance","post","headers","console","log","data","txt","error","throwError","CContainer","ComModal","handleCloseModal","handleAccept","handleAftFunc","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","confirmPage","currentTarget","checkValidity","stopPropagation","xs","CFormLabel","htmlFor","CFormInput","required","onChange","target","value","maxLength","CFormFeedback","invalid","CFormSelect","defaultValue","map","item","index","name","component","goListClick"],"sourceRoot":""}