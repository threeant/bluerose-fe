{"version":3,"file":"static/js/3683.bcb77461.chunk.js","mappings":"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","sources":["common/ComModal.js","views/display/DisplayList.js","../node_modules/@coreui/icons/src/free/cil-caret-bottom.ts","../node_modules/@coreui/icons/src/free/cil-caret-top.ts"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState , useEffect} from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport { throwError } from '../../common/utils'\nimport axiosInstance from '../../common/axiosInstance';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\n\nimport {\n  cilCaretTop,\n  cilCaretBottom\n} from '@coreui/icons'\nimport {\n  CAvatar,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CFormSelect,\n  CFormLabel,\n  CFormInput,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CFormCheck,\n  CFormSwitch\n} from '@coreui/react'\n\nimport {\n  cilCalendar\n} from '@coreui/icons'\n\nconst DisplayList = () => {\n  /**********************************************************************\n   * 공통코드 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  /**********************************************************************\n   * 화면 영역\n  **********************************************************************/\n  const [alertType, setAlertType] = useState('');\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertText, setAlertText] = useState('');\n  const [acceptType, setAcceptType] = useState('');\n  \n\n\n  const alertPage = (txt) => {\n    setAlertType('alert');\n    setAlertText(txt);\n    setAlertVisible(true);\n  };\n\n  const confirmPage = (txt, type) => {\n    setAlertType('confirm');\n    setAlertText(txt);\n    setAlertVisible(true);\n    setAcceptType(type);\n  };\n\n  const handleCloseModal = () => {\n    setAlertVisible(false);\n  };\n  const handleAccept = () => {\n    setAlertVisible(false);\n    if(acceptType === 'update'){// 전시순서변경\n      updateSort();\n    }\n  };\n\n\n\n  \n  const goFormClick = () => { //등록화면이동\n    navigate('/display/displayReg');\n  }\n\n  const goInfoClick = (e, id) => {\n    // 페이지 이동 방지\n    e.preventDefault();\n    console.log('goInfoClick : ' + id);\n\n    // 새로운 동작 실행\n    // 예시: id를 이용한 페이지 이동 또는 다른 동작 수행\n    navigate('/display/displayInfo', { state: { displayId: id } });\n  };\n\n  /**********************************************************************\n  * 비즈니스로직 영역\n **********************************************************************/\n  //리스트\n  const [displayDatas, setDisplayDatas] = useState({ contents: [] });\n\n  //검색조건\n  const [albumSearch, setAlbumSearch] = useState({\n    \"page\": 1,\n    \"size\": 9999\n  });\n\n  useEffect(() => {\n    submitSearchDisplay();\n\n  },[]);\n\n  //조회하기\n  const submitSearch = (e) => {\n    e.preventDefault();\n    submitSearchDisplay();\n  }\n\n  //페이징\n  const clickPage = (e, page) => {\n    e.preventDefault();\n    albumSearch.page = page;\n    submitSearchDisplay();\n    console.log(\"===page =  : \" + page);\n  }\n\n  //검색 API\n  const submitSearchDisplay = async () => {\n    console.log(albumSearch);\n\n    try {\n      const response = await axiosInstance.get('/api/display', {\n        params: albumSearch,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response.data;\n      // 데이터를 상태 변수에 저장\n      setDisplayDatas(data);\n\n      console.log(data);\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n\n\n    }\n\n  };\n\n   \n\n  //전시순서변경\n  const updateSort = async () => {\n    \n    \n    var contents = displayDatas.contents;\n    console.log(displayDatas.contents);\n    var updateContents = [];\n    for(var i = 0; i< contents.length; i++){\n      updateContents.push(contents[i].displayItemId);\n    }\n\n    console.log(updateContents);\n    try {\n      const response = await axiosInstance.post('/api/display/sort', \n        updateContents\n      ,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      // API 응답에서 데이터 추출\n      const data = response;\n      // 데이터를 상태 변수에 저장\n      \n      console.log(data);\n      if(data.status == '200'){\n        alertPage('변경되었습니다.');\n      }\n\n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const changeSort = (e, downYn) => {\n    e.preventDefault();\n  }\n\n  // 버튼 클릭 시 배열 순서 변경\n  const handleMoveUp = (e, currentIndex) => {\n    e.preventDefault();\n  \n    // Ensure that the currentIndex is within valid bounds\n    if (currentIndex > 0) {\n      // Create a copy of the contents array to avoid directly modifying state\n      const newContents = [...displayDatas.contents];\n  \n      // Swap the current item with the previous item\n      [newContents[currentIndex], newContents[currentIndex - 1]] = [\n        newContents[currentIndex - 1],\n        newContents[currentIndex]\n      ];\n  \n      // Update the state with the modified contents\n      setDisplayDatas({\n        ...displayDatas,\n        contents: newContents\n      });\n    }\n  };\n  \n\n  const handleMoveDown = (e, currentIndex) => {\n    e.preventDefault();\n  \n    // Ensure that the currentIndex is within valid bounds\n    if (currentIndex < displayDatas.contents.length - 1) {\n      // Create a copy of the contents array to avoid directly modifying state\n      const newContents = [...displayDatas.contents];\n  \n      // Swap the current item with the next item\n      [newContents[currentIndex], newContents[currentIndex + 1]] = [\n        newContents[currentIndex + 1],\n        newContents[currentIndex]\n      ];\n  \n      // Update the state with the modified contents\n      setDisplayDatas({\n        ...displayDatas,\n        contents: newContents\n      });\n    }\n  };\n  \n\n  return (\n    <>\n     <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept}/>\n      <CRow>\n        <CCol>\n          <CCard className=\"mb-4\">\n            <CCardHeader>메인항목리스트</CCardHeader>\n            <CCardBody>\n              <CForm className=\"row\" >\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                  <CCol xs={3}>\n                      <div className=\"d-grid gap-2 d-md-flex\">\n                        <CButton component=\"input\" type=\"button\" color=\"success\" value=\"등록하기\" onClick={goFormClick} />\n                        <CButton component=\"input\" type=\"button\" color=\"danger\" value=\"전시순서변경\" onClick={() => confirmPage('전시순서를 변경하시겠습니까?', 'update')} />\n                      </div>\n                    </CCol>\n                    <CCol xs={9}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" color=\"primary\" type=\"button\" value=\"조회하기\" onClick={submitSearch}/>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n              <br />\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">No</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">제목</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">전시순서</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">노출곡수</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">사용여부</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {displayDatas.contents && displayDatas.contents.length > 0 ? (\n                    displayDatas.contents.map((item, index) => (\n                      <CTableRow v-for=\"item in tableItems\" key={index} >\n                        <CTableDataCell className=\"text-center\">\n                          <strong>{index+1}</strong>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-left\">\n                        <a href='/' onClick={(e) => goInfoClick(e, item.displayItemId)}>{item.title}</a>\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                        {index != 0  ? (\n                          <CButton color=\"info\" variant=\"outline\" onClick={(e) => handleMoveUp(e, index)} >\n                            <CIcon icon={cilCaretTop} title=\"UP\" />\n                          </CButton>\n                          \n                        ) : ('')}\n                        {index+1  != displayDatas.contents.length  ? (\n                          <CButton color=\"info\" variant=\"outline\" onClick={(e) => handleMoveDown(e, index)}>\n                            <CIcon icon={cilCaretBottom} title=\"DOWN\" />\n                          </CButton>\n                        ) : ('')}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {item.songCount}/{item.displayNum}\n                        </CTableDataCell>\n                        <CTableDataCell className=\"text-center\">\n                          {/* <CFormSwitch defaultChecked={item.useYn} disabled /> */}\n                          <CFormCheck  defaultChecked={item.useYn} disabled/>\n                        </CTableDataCell>\n                      </CTableRow>\n                    ))\n                  ) :\n                    (\n                      <CTableRow v-for=\"item in tableItems\" >\n                        <CTableDataCell className=\"text-center\" colSpan={6} key={0}>\n                          조회된 데이터가 없습니다.\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  }\n                </CTableBody>\n              </CTable>\n              <br />\n              {displayDatas.contents && displayDatas.contents.length > 0 ? (\n                <CRow>\n                  {/* <CCol md={{ span: 6, offset: 5 }}>\n                    <CPagination aria-label=\"Page navigation example\">\n                      <CPaginationItem aria-label=\"Previous\" disabled={displayDatas.first} onClick={(e) => clickPage(e, 1)}>\n                        <span aria-hidden=\"true\">&laquo;</span>\n                      </CPaginationItem>\n                      {Array.from({ length: displayDatas.totalPages }, (_, index) => (\n                        <CPaginationItem\n                        key={`page-${index + 1}`}\n                        className={index + 1 === displayDatas.number ? 'active' : ''}\n                        onClick={(e) => clickPage(e, index + 1)}\n                      >\n                        {index + 1}</CPaginationItem>\n                      ))}\n                      <CPaginationItem aria-label=\"Next\" disabled={displayDatas.last}>\n                        <span aria-hidden=\"true\">&raquo;</span>\n                      </CPaginationItem>\n                    </CPagination>\n                  </CCol> */}\n                  <CCol md={12}>\n                  <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                    총 {displayDatas.totalCount}건\n                    </div>\n                  </CCol>\n                </CRow>\n              ) : ''}\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </>\n  )\n}\n\nexport default DisplayList\n","export var cilCaretBottom = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M256.286,408.357,16.333,138.548V104H496v36.45ZM56.892,136,256.358,360.287,457.042,136Z' class='ci-primary'/>\"];\n","export var cilCaretTop = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M496,400.357H16.333V363.908L256.047,96,496,365.81Zm-440.708-32H455.441L255.975,144.07Z' class='ci-primary'/>\"];\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","DisplayList","navigate","useNavigate","alertType","setAlertType","useState","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","displayDatas","setDisplayDatas","contents","albumSearch","setAlbumSearch","useEffect","submitSearchDisplay","async","console","log","data","axiosInstance","get","params","headers","error","throwError","updateSort","txt","updateContents","i","length","push","displayItemId","post","status","_Fragment","ComModal","handleCloseModal","handleAccept","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","xs","component","value","goFormClick","confirmPage","e","preventDefault","CTable","align","hover","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","map","item","index","CTableDataCell","href","goInfoClick","state","displayId","title","variant","handleMoveUp","currentIndex","newContents","cilCaretTop","handleMoveDown","cilCaretBottom","songCount","displayNum","CFormCheck","defaultChecked","useYn","disabled","colSpan","md","totalCount"],"sourceRoot":""}