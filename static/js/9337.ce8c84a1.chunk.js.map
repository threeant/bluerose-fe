{"version":3,"file":"static/js/9337.ce8c84a1.chunk.js","mappings":"+OASA,MASMA,EAAeA,CAACC,EAASC,EAASC,EAAYC,KAEhDC,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACLC,UAAU,SACVN,QAASA,EACTC,QAASA,EACT,kBAAgB,4BAA2BM,SAAA,EAE3CC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAAAF,UACXC,EAAAA,EAAAA,KAACE,EAAAA,GAAW,CAACC,GAAG,4BAA2BJ,UAACC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAACC,KAAMC,EAAAA,SAE3DN,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAAR,SACRL,KAEHE,EAAAA,EAAAA,MAACY,EAAAA,GAAY,CAAAT,SAAA,EACXC,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,MAAM,YAAYC,QAASlB,EAAQM,SAAC,kBAG7CC,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,MAAM,UAAUC,QAAShB,EAASI,SAAE,uBAO/Ca,EAAaA,CAACpB,EAASC,EAASC,EAAYmB,KAChD,MAAMC,EAAgBA,KACpBrB,IACGoB,GACDA,GACF,EAGF,OACEjB,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACLC,UAAU,SACVN,QAASA,EACTC,QAASqB,EACT,kBAAgB,4BAA2Bf,SAAA,EAE3CC,EAAAA,EAAAA,KAACC,EAAAA,GAAY,CAAAF,UACXC,EAAAA,EAAAA,KAACE,EAAAA,GAAW,CAACC,GAAG,4BAA2BJ,UAACC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAACC,KAAMC,EAAAA,SAE3DN,EAAAA,EAAAA,KAACO,EAAAA,GAAU,CAAAR,SACRL,KAEHM,EAAAA,EAAAA,KAACQ,EAAAA,GAAY,CAAAT,UACXC,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAACC,MAAM,YAAYC,QAASG,EAAcf,SAAC,qBAI9C,EAcb,EA1EiBgB,IAA+D,IAA9D,KAAEC,EAAI,QAAExB,EAAO,QAAEC,EAAO,UAAEC,EAAS,SAAGuB,EAAQ,QAAEJ,GAAQE,EACxE,MAAW,WAARC,EACOzB,EAAaC,EAASC,EAASC,EAAWuB,GACnC,SAARD,EACCJ,EAAWpB,EAASC,EAASC,EAAWmB,QAD5C,CAEN,C,gMCuBF,MA0UA,EA1UiBK,KAKf,MAAMC,GAAWC,EAAAA,EAAAA,OAEVC,IAAWC,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAY,WAChCC,IAAWF,EAAAA,EAAAA,WAASC,EAAAA,EAAAA,IAAY,WAM9BE,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,KACpCK,EAAcC,IAAmBN,EAAAA,EAAAA,WAAS,IAC1C5B,EAAWmC,IAAgBP,EAAAA,EAAAA,UAAS,KACpCQ,EAAYC,IAAiBT,EAAAA,EAAAA,UAAS,IAIvCU,EAAaC,IACjBP,EAAa,SACbG,EAAaI,GACbL,GAAgB,EAAK,GA4BlBM,EAAcC,IAAmBb,EAAAA,EAAAA,UAAS,OAM1Cc,EAAWC,IAAgBf,EAAAA,EAAAA,WAAS,IAEpCgB,EAAWC,IAAgBjB,EAAAA,EAAAA,UAAS,CAEzCkB,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,YAAa,GACbC,WAAY,GACZC,UAAW,IACXC,QAAS1B,EAAQ,GAAGlB,GACpB6C,MAAO,GACPC,OAAQ,GACRC,OAAO,EACPC,MAAO,QAGTC,EAAAA,EAAAA,YAAU,QAIP,IACH,MAAOC,EAAWC,IAAgBhC,EAAAA,EAAAA,UAAS,OACpCiC,EAAaC,IAAkBlC,EAAAA,EAAAA,UAAS,KAGxCmC,EAAYC,IAAiBpC,EAAAA,EAAAA,UAAS,MAqEvCqC,EAAiBC,UAErB,IACE,MAAMC,QAAiBC,EAAAA,EAAcC,KAAK,cAAezB,EAAW,CAClE0B,QAAS,CACP,eAAgB,yBAIpBC,QAAQC,IAAI,oBAAWL,EAASM,MAGhC5B,EAAa,CACXC,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACRC,YAAa,aACbC,WAAY,GACZC,UAAW,IACXC,QAAS1B,EAAQ,GAAGlB,GACpB6C,MAAO,GACPC,OAAQ,GACRC,OAAO,EACPC,MAAO,OAETnB,EAAU,8CAEZ,CAAE,MAAOoC,GAEPH,QAAQC,IAAIE,IACZC,EAAAA,EAAAA,IAAWD,EAAMjD,EACnB,GAQF,OACEvB,EAAAA,EAAAA,MAAC0E,EAAAA,GAAU,CAAAvE,SAAA,EACTC,EAAAA,EAAAA,KAACuE,EAAAA,EAAQ,CAACvD,KAAMS,EAAWjC,QAASmC,EAAclC,QAlK3B+E,KACvB5C,GAAgB,EAAM,EAiKuDlC,UAAWA,EAAWuB,SA/JhFwD,KACnB7C,GAAgB,GACE,QAAfE,GACD6B,IAGF5B,EAAc,GAAG,EAyJ0GlB,QANzG6D,KACpBvD,EAAS,mBAAmB,KAM1BnB,EAAAA,EAAAA,KAAC2E,EAAAA,GAAI,CAAA5E,UACHC,EAAAA,EAAAA,KAAC4E,EAAAA,GAAI,CAAA7E,UACHH,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CAACC,UAAU,OAAM/E,SAAA,EACrBH,EAAAA,EAAAA,MAACmF,EAAAA,GAAW,CAAAhF,SAAA,EACVC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,6BAAa,KAACC,EAAAA,EAAAA,KAAA,gBAExBA,EAAAA,EAAAA,KAACgF,EAAAA,GAAS,CAAAjF,UACRH,EAAAA,EAAAA,MAACqF,EAAAA,GAAK,CACJH,UAAU,2BACVI,YAAU,EACV9C,UAAWA,EACX+C,SAzEgBvB,UAC5BwB,EAAEC,iBAEFpB,QAAQC,IAAI5B,GACZD,GAAa,GAhHOiD,IAACrD,EAAKjB,GAkHG,IADhBoE,EAAEG,cACNC,iBAlHYvD,EAwHT,uEAxHcjB,EAwHG,MAvH3BU,EAAa,WACbG,EAAaI,GACbL,GAAgB,GAChBG,EAAcf,IA+GdoE,EAAEK,iBAK+B,EA6DS1F,SAAA,EAEhCC,EAAAA,EAAAA,KAAC4E,EAAAA,GAAI,CAACc,GAAI,GAAG3F,UACXC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,OAEb/F,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC4F,EAAAA,GAAa,CAACC,SAAO,EAAA9F,SAAC,uCACvBC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAW,CAACpD,MAAM,2BAAOvC,GAAG,yBAAyB4F,eAAgBzD,EAAUY,MAAO8C,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWY,MAAOkC,EAAEa,OAAOC,cAEvJlG,EAAAA,EAAAA,KAAC4E,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SACT0D,GAAczD,EAAAA,EAAAA,KAACmG,EAAAA,GAAM,CAACC,SAAO,EAACC,WAAS,EAACC,MAAM,SAASC,IAAK9C,EAAY+C,MAAO,IAAKC,OAAQ,OAC3FzG,EAAAA,EAAAA,KAACmG,EAAAA,GAAM,CAACC,SAAO,EAACC,WAAS,EAACC,MAAM,SAASC,IAAKG,kCAAgDF,MAAO,IAAKC,OAAQ,SAKtHzG,EAAAA,EAAAA,KAAC4E,EAAAA,GAAI,CAACc,GAAI,EAAE3F,UACVC,EAAAA,EAAAA,KAACgF,EAAAA,GAAS,CAAAjF,UACRC,EAAAA,EAAAA,KAAC2G,EAAAA,GAAS,CAAA5G,UACRC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAO6F,KAAK,KAAKC,OAAO,UAAU3G,GAAG,WAAW6F,SA7I3De,IAQxB,MAAMC,EAAgBD,EAAMd,OAAOgB,MAAM,GAEzC,GAAID,EAEF,GAAIA,EAAchG,KAAKkG,WAAW,UAAW,CAG3C3E,GAAc4E,IAAa,IACtBA,EACHhE,MAAO6D,MAIT,MAAMI,EAAS,IAAIC,WACnBD,EAAOE,UAAY,KACjB5D,EAAc0D,EAAOG,OAAO,EAE9BH,EAAOI,cAAcR,EACvB,MAEEtD,EAAc,MACdnB,GAAc4E,IAAa,IACtBA,EACHhE,MAAO,SAETnB,EAAU,kGAEd,WAuHYpC,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,YAAW1H,SAAC,yBAChCC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAW,CAACvH,GAAG,YAAYwH,aAAcrF,EAAUS,QAASiD,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWS,QAASqC,EAAEa,OAAOC,QAASnG,SACnIsB,EAAQuG,KAAI,CAACC,EAAMC,KAClB9H,EAAAA,EAAAA,KAAA,UAAQkG,MAAO2B,EAAK1H,GAAGJ,SAAc8H,EAAKrF,MAAbsF,QAGjC9H,EAAAA,EAAAA,KAAC4F,EAAAA,GAAa,CAACC,SAAO,EAAA9F,SAAC,sEAEzBH,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,aAAY1H,SAAC,WACjCC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAOb,GAAG,aAAa6F,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWI,MAAO0C,EAAEa,OAAOC,QAAU6B,UAAW,UAE7HnI,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,YAAW1H,SAAC,yBAChCC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAOb,GAAG,YAAY6H,UAAQ,EAAChC,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWE,KAAM4C,EAAEa,OAAOC,QAAU6B,UAAW,OAClI/H,EAAAA,EAAAA,KAAC4F,EAAAA,GAAa,CAACC,SAAO,EAAA9F,SAAC,uEAEzBH,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,eAAc1H,SAAC,+BACnCC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAOb,GAAG,eAAe6H,UAAQ,EAAChC,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWG,OAAQ2C,EAAEa,OAAOC,QAAU6B,UAAW,OACvI/H,EAAAA,EAAAA,KAAC4F,EAAAA,GAAa,CAACC,SAAO,EAAA9F,SAAC,6EAGzBH,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACqD,GAAI,GAAGlI,SAAA,EACXC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,cAAa1H,SAAC,YAClCC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAOb,GAAG,cAAc6F,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWW,OAAQmC,EAAEa,OAAOC,QAAU6B,UAAW,UAG/HnI,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,GAAG3F,SAAA,EACXC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,cAAa1H,SAAC,YAClCC,EAAAA,EAAAA,KAACkI,EAAAA,GAAa,CAAC/H,GAAG,cAAcgI,KAAK,IAAInC,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWK,OAAQyC,EAAEa,OAAOC,QAAU6B,UAAW,UAE/HnI,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,eAAc1H,SAAC,+BACnCH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAW,CAACvH,GAAG,eAAe6F,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWQ,UAAWsC,EAAEa,OAAOC,QAASnG,SACvGyB,EAAQoG,KAAI,CAACC,EAAMC,KAClB9H,EAAAA,EAAAA,KAAA,UAAQkG,MAAO2B,EAAK1H,GAAGJ,SAAc8H,EAAKrF,MAAbsF,QAGjC9H,EAAAA,EAAAA,KAAC4F,EAAAA,GAAa,CAACC,SAAO,EAAA9F,SAAC,gFAG3BH,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACc,GAAI,EAAE3F,SAAA,EACVC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,mBAAkB1H,SAAC,wBACvCH,EAAAA,EAAAA,MAAA,OAAKoD,MAAO,CAAEoF,QAAS,OAAQ5B,MAAO,QAASzG,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,OAAKgD,MAAO,CAAEoF,QAAS,OAAQC,WAAY,SAAUC,YAAa,GAAIvI,UACpEC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CAAC0E,UAAU,iBAAiBzE,KAAMkI,EAAAA,EAAa1B,KAAK,UAE5D7G,EAAAA,EAAAA,KAAA,OAAKgD,MAAO,CAAEwD,MAAO,OAAQzG,UAC3BC,EAAAA,EAAAA,KAACwI,IAAU,CACTC,SAAUvG,EACV8D,SAhPG0C,IACvB,MAAMC,EAAgBD,EAAKE,cAAcC,MAAM,EAAG,IAClD1G,EAAgBuG,GAChBnG,EAAa,IAAKD,EAAWM,YAAa+F,GAAgB,EA8OtCG,WAAY,aACZC,qBAAmB,EACnBC,QAAS,IAAIC,KAAK,cAClBC,QAAS,IAAID,KACbnE,UAAU,wBAKlBlF,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACqD,GAAI,GAAGlI,SAAA,EACXC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,aAAY1H,SAAC,kBACjCC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAOb,GAAG,aAAa6F,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWO,WAAYuC,EAAEa,OAAOC,QAAU6B,UAAW,UAElInI,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAACqD,GAAI,GAAGlI,SAAA,EACXC,EAAAA,EAAAA,KAAC2F,EAAAA,GAAU,CAAC8B,QAAQ,WAAU1H,SAAC,WAC/BC,EAAAA,EAAAA,KAAC4G,EAAAA,GAAU,CAAC5F,KAAK,OAAOb,GAAG,WAAW6F,SAAWZ,GAAM7C,EAAa,IAAKD,EAAWU,MAAOoC,EAAEa,OAAOC,QAAU6B,UAAW,UAE3H/H,EAAAA,EAAAA,KAAA,OAAK8E,UAAU,eAAc/E,UAC3BC,EAAAA,EAAAA,KAAC2E,EAAAA,GAAI,CAACG,UAAU,0BAAyB/E,UACvCC,EAAAA,EAAAA,KAAC4E,EAAAA,GAAI,CAACc,GAAI,GAAG3F,UACXH,EAAAA,EAAAA,MAAA,OAAKkF,UAAU,gDAA+C/E,SAAA,EAC5DC,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAAC0I,UAAU,QAAQnI,KAAK,SAASN,MAAM,QAAQwF,MAAM,eAAKvF,QA1QpEyI,KAClBjI,EAAS,mBAAmB,KA0QRnB,EAAAA,EAAAA,KAACS,EAAAA,GAAO,CAAC0I,UAAU,QAAQzI,MAAM,UAAUM,KAAK,SAASkF,MAAM,oDAUtE,C","sources":["common/ComModal.js","views/music/AlbumReg.js"],"sourcesContent":["// ComModal.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CModal, CModalBody, CModalFooter, CButton,CModalHeader,CModalTitle  } from '@coreui/react';\nimport {\n  cilBell,\n} from '@coreui/icons';\nimport CIcon from '@coreui/icons-react'\n\nconst ComModal = ({ type, visible, onClose, alertText , onAccpet, aftFunc}) => {\n  if(type == 'confirm') {\n    return  ComfirmModal(visible, onClose, alertText, onAccpet);\n  }else if(type == 'alert') {\n    return  AlertModal(visible, onClose, alertText, aftFunc);\n  }\n  \n};\n\nconst ComfirmModal = (visible, onClose, alertText , onAccect) => {\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onClose}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onClose}>\n          취소\n        </CButton>\n        <CButton color=\"primary\" onClick={onAccect} >확인</CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nconst AlertModal = (visible, onClose, alertText , aftFunc) => {\n  const onCloseAction = () => {\n    onClose();\n    if(aftFunc){\n      aftFunc();\n    }\n    \n  }\n  return (\n    <CModal\n      alignment=\"center\"\n      visible={visible}\n      onClose={onCloseAction}\n      aria-labelledby=\"VerticallyCenteredExample\"\n    >\n      <CModalHeader>\n        <CModalTitle id=\"VerticallyCenteredExample\"><CIcon icon={cilBell} /></CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {alertText}\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"secondary\" onClick={onCloseAction}>\n          확인\n        </CButton>\n      </CModalFooter>\n    </CModal>\n  );\n}\n\n\nComModal.propTypes = {\n  type: PropTypes.string.isRequired, // visible prop의 타입 및 필수 여부\n  visible: PropTypes.bool.isRequired, // visible prop의 타입 및 필수 여부\n  onClose: PropTypes.func.isRequired, // onClose prop의 타입 및 필수 여부\n  alertText: PropTypes.string.isRequired, // alertText prop의 타입 및 필수 여부\n  onAccpet: PropTypes.func, // onClose prop의 타입 및 필수 여부\n  aftFunc: PropTypes.func, // alert 완료후 추처리 prop의 타입 및 필수 여부\n};\n\nexport default ComModal;\n","import React, { useState,useEffect } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport CIcon from '@coreui/icons-react'\nimport { useNavigate } from 'react-router-dom'\nimport { getCodeList , throwError} from '../../common/utils'\nimport axios from 'axios'\nimport {\n  cilCalendar,\n  cifUs,\n} from '@coreui/icons';\nimport axiosInstance from '../../common/axiosInstance';\nimport ComModal from '../../common/ComModal'; // 모달 컴포넌트 임포트\n\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CCardImage,\n  CCardText,\n  CFormTextarea,\n  CContainer,\n  CImage,\n  CFormSwitch,\n} from '@coreui/react';\nimport ReactImg from 'src/assets/images/image400.jpg'\nconst AlbumReg = () => {\n\n  /**********************************************************************\n   * 공통 영역\n  **********************************************************************/\n  const navigate = useNavigate();\n\n  const [midiaCD] = useState(getCodeList('MEDIA')); // 미디어CD\n  const [cntryCD] = useState(getCodeList('CNTRY')); // 발매국가CD\n\n\n    /**********************************************************************\n   * 메세지영역\n  **********************************************************************/\n    const [alertType, setAlertType] = useState('');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [alertText, setAlertText] = useState('');\n    const [acceptType, setAcceptType] = useState('');\n   \n  \n  \n    const alertPage = (txt) => {\n      setAlertType('alert');\n      setAlertText(txt);\n      setAlertVisible(true);\n    };\n  \n    const confirmPage = (txt, type) => {\n      setAlertType('confirm');\n      setAlertText(txt);\n      setAlertVisible(true);\n      setAcceptType(type);\n    };\n  \n    const handleCloseModal = () => {\n      setAlertVisible(false);\n    };\n    const handleAccept = () => {\n      setAlertVisible(false);\n      if(acceptType === 'reg'){// 선곡\n        submitRegAlbum();\n    }\n  \n      setAcceptType('');\n      \n    };\n  \n\n  //목록이동\n  const goListClick = () => {\n    navigate('/music/albumList');\n  };\n  const [selectedDate, setSelectedDate] = useState(null);\n  const handleDateChange = date => {\n    const formattedDate = date.toISOString().slice(0, 10);\n    setSelectedDate(date);\n    setAlbumData({ ...albumData, releaseDate: formattedDate })\n  }\n  const [validated, setValidated] = useState(false);\n\n  const [albumData, setAlbumData] = useState({\n    //image : '',        //이미지\n    name: '',        //앨범명\n    artist: '',      //아티스트\n    label: '',       //라벨\n    format: '',      //포맷\n    releaseDate: '',      //발매일\n    musicGenre: '',      //장르\n    countryCD: '9',        //발매국가\n    mediaCD: midiaCD[0].id,        //미디어\n    style: '',       //스타일\n    series: '',      //시리즈\n    useYn: true,      //사용여부\n    image: null\n  });\n\n  useEffect(() => {\n    //console.log(midiaCD);\n    //console.log(midiaCD[0].id)\\\n\n  }, []); // 빈 배열을 넣어 처음 한 번만 실행되도록 설정\n  const [imageData, setImageData] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n\n\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const handleFileChange = (event) => {\n    // console.log(event);\n    // setAlbumData((prevAlbumData) => ({\n    //   ...prevAlbumData,\n    //   image: event.target.files[0]\n    // }));\n\n\n    const selectedImage = event.target.files[0];\n\n    if (selectedImage) {\n      // 이미지 파일인지 확인\n      if (selectedImage.type.startsWith('image/')) {\n        //setImage(selectedImage);\n\n        setAlbumData((prevAlbumData) => ({\n          ...prevAlbumData,\n          image: selectedImage\n        }));\n\n        // 이미지 미리보기 생성\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          setPreviewUrl(reader.result);\n        };\n        reader.readAsDataURL(selectedImage);\n      } else {\n        // 이미지 파일이 아닌 경우 초기화\n        setPreviewUrl(null);\n        setAlbumData((prevAlbumData) => ({\n          ...prevAlbumData,\n          image: null\n        }));\n        alertPage('이미지 파일만 업로드할 수 있습니다.');\n      }\n    }\n\n  };\n\n  const handleRemoveImage = () => {\n    // 이미지 제거\n    setPreviewUrl(null);\n    setAlbumData((prevAlbumData) => ({\n      ...prevAlbumData,\n      image: null\n    }));\n  };\n\n  //등록하기 API\n  const confirmSubmitRegAlbum = async (e) => {\n    e.preventDefault();\n\n    console.log(albumData);\n    setValidated(true);\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      return;\n    }\n\n    //const result = window.confirm('앨범을 등록하시겠습니까?');\n    confirmPage('앨범을 등록하시겠습니까?', 'reg')\n\n    \n  };\n\n\n  //등록하기 API\n  const submitRegAlbum = async () => {\n    \n    try {\n      const response = await axiosInstance.post('/api/albums', albumData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        }\n      });\n\n      console.log('API 응답:', response.data);\n\n      // 폼 데이터를 초기화합니다.\n      setAlbumData({\n        name: '',        //앨범명\n        artist: '',      //아티스트\n        label: '',       //라벨\n        format: '',      //포맷\n        releaseDate: '2023-10-28',      //발매일\n        musicGenre: '',      //장르\n        countryCD: '9',        //발매국가\n        mediaCD: midiaCD[0].id,        //미디어\n        style: '',       //스타일\n        series: '',      //시리즈\n        useYn: true,      //사용여부\n        image: null\n      });\n      alertPage('등록되었습니다.');\n      \n    } catch (error) {\n      // API 요청이 실패한 경우 에러를 처리할 수 있습니다.\n      console.log(error);\n      throwError(error,navigate);\n    }\n\n  };\n\n  const handleAftFunc = () => {\n    navigate('/music/AlbumList');\n  };\n\n  return (\n    <CContainer>\n      <ComModal type={alertType} visible={alertVisible} onClose={handleCloseModal} alertText={alertText} onAccpet={handleAccept} aftFunc={handleAftFunc}/>\n      <CRow>\n        <CCol >\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>앨범등록</strong> <small></small>\n            </CCardHeader>\n            <CCardBody>\n              <CForm\n                className=\"row g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={confirmSubmitRegAlbum}\n              >\n                <CCol xs={10} >\n                  <CFormLabel></CFormLabel>\n                </CCol>\n                <CCol xs={2} >\n                  <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                  <CFormSwitch label=\"사용여부\" id=\"formSwitchCheckChecked\" defaultChecked={albumData.useYn} onChange={(e) => setAlbumData({ ...albumData, useYn: e.target.value })} />\n                </CCol>\n                <CCol xs={3}>\n                  {previewUrl ? (<CImage rounded thumbnail align=\"center\" src={previewUrl} width={150} height={150} />) : (\n                    <CImage rounded thumbnail align=\"center\" src={process.env.PUBLIC_URL + '/basicImg/w_lp2.png'} width={150} height={150} />\n                  )}\n\n\n                </CCol>\n                <CCol xs={9}>\n                  <CCardBody>\n                    <CCardText>\n                      <CFormInput type=\"file\" size=\"lg\" accept=\"image/*\" id=\"formFile\" onChange={handleFileChange} />\n                    </CCardText>\n                  </CCardBody>\n                </CCol>\n                {/* <CCol xs={2}>\n                  <CCardBody>\n                    <CCardText>\n                      {previewUrl ? (\n                        <CButton color=\"secondary\" onClick={handleRemoveImage}>삭제</CButton>) : ('')}\n                    </CCardText>\n                  </CCardBody>\n                </CCol> */}\n\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"lab_media\">미디어*</CFormLabel>\n                  <CFormSelect id=\"sel_media\" defaultValue={albumData.mediaCD} onChange={(e) => setAlbumData({ ...albumData, mediaCD: e.target.value })}  >\n                    {midiaCD.map((item, index) => (\n                      <option value={item.id} key={index}>{item.name}</option>\n                    ))}\n                  </CFormSelect>\n                  <CFormFeedback invalid>미디어를 선택해주세요</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputLabel\">Label</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputLabel\" onChange={(e) => setAlbumData({ ...albumData, label: e.target.value })} maxLength={100} />\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputName\">앨범명*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputName\" required onChange={(e) => setAlbumData({ ...albumData, name: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>앨범명을 입력해주세요.</CFormFeedback>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputAartist\">아티스트*</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputAartist\" required onChange={(e) => setAlbumData({ ...albumData, artist: e.target.value })} maxLength={100} />\n                  <CFormFeedback invalid>아티스트를 입력해주세요.</CFormFeedback>\n                </CCol>\n\n                <CCol md={12}>\n                  <CFormLabel htmlFor=\"inputSeries\">Series</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputSeries\" onChange={(e) => setAlbumData({ ...albumData, series: e.target.value })} maxLength={100} />\n                </CCol>\n\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputFormat\">Format</CFormLabel>\n                  <CFormTextarea id=\"inputFormat\" rows=\"3\" onChange={(e) => setAlbumData({ ...albumData, format: e.target.value })} maxLength={250}></CFormTextarea>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputCountry\">발매국가*</CFormLabel>\n                  <div >\n                    <CFormSelect id=\"inputCountry\" onChange={(e) => setAlbumData({ ...albumData, countryCD: e.target.value })}>\n                      {cntryCD.map((item, index) => (\n                        <option value={item.id} key={index}>{item.name}</option>\n                      ))}\n                    </CFormSelect>\n                    <CFormFeedback invalid>발매국가를 선택해주세요.</CFormFeedback>\n                  </div>\n                </CCol>\n                <CCol xs={6}>\n                  <CFormLabel htmlFor=\"inputReleaseDate\">발매일</CFormLabel>\n                  <div style={{ display: 'flex', width: '100%' }}>\n                    <div style={{ display: 'grid', placeItems: 'center', marginRight: 5 }}>\n                      <CIcon className=\"text-secondary\" icon={cilCalendar} size=\"lg\" />\n                    </div>\n                    <div style={{ width: '90%' }}>\n                      <DatePicker\n                        selected={selectedDate}\n                        onChange={handleDateChange}\n                        dateFormat={'yyyy-MM-dd'} // 날짜 형태\n                        shouldCloseOnSelect // 날짜를 선택하면 datepicker가 자동으로 닫힘\n                        minDate={new Date('2000-01-01')} // minDate 이전 날짜 선택 불가\n                        maxDate={new Date()} // maxDate 이후 날짜 선택 불가\n                        className=\"DatePicker\"\n                      />\n                    </div>\n                  </div>\n                </CCol>\n                <CCol md={12}>\n                  <CFormLabel htmlFor=\"inputGenre\">장르</CFormLabel>\n                  <CFormInput type=\"text\" id=\"inputGenre\" onChange={(e) => setAlbumData({ ...albumData, musicGenre: e.target.value })} maxLength={100} />\n                </CCol>\n                <CCol md={12}>\n                  <CFormLabel htmlFor=\"txtStyle\">Style</CFormLabel>\n                  <CFormInput type=\"text\" id=\"txtStyle\" onChange={(e) => setAlbumData({ ...albumData, style: e.target.value })} maxLength={100} />\n                </CCol>\n                <div className=\"d-grid gap-2\">\n                  <CRow className=\"justify-content-between\">\n                    <CCol xs={12}>\n                      <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                        <CButton component=\"input\" type=\"button\" color=\"light\" value=\"목록\" onClick={goListClick} />\n                        <CButton component=\"input\" color=\"primary\" type=\"submit\" value=\"등록하기\" />\n                      </div>\n                    </CCol>\n                  </CRow>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow >\n    </CContainer>\n  );\n};\n\nexport default AlbumReg;\n"],"names":["ComfirmModal","visible","onClose","alertText","onAccect","_jsxs","CModal","alignment","children","_jsx","CModalHeader","CModalTitle","id","CIcon","icon","cilBell","CModalBody","CModalFooter","CButton","color","onClick","AlertModal","aftFunc","onCloseAction","_ref","type","onAccpet","AlbumReg","navigate","useNavigate","midiaCD","useState","getCodeList","cntryCD","alertType","setAlertType","alertVisible","setAlertVisible","setAlertText","acceptType","setAcceptType","alertPage","txt","selectedDate","setSelectedDate","validated","setValidated","albumData","setAlbumData","name","artist","label","format","releaseDate","musicGenre","countryCD","mediaCD","style","series","useYn","image","useEffect","imageData","setImageData","fileContent","setFileContent","previewUrl","setPreviewUrl","submitRegAlbum","async","response","axiosInstance","post","headers","console","log","data","error","throwError","CContainer","ComModal","handleCloseModal","handleAccept","handleAftFunc","CRow","CCol","CCard","className","CCardHeader","CCardBody","CForm","noValidate","onSubmit","e","preventDefault","confirmPage","currentTarget","checkValidity","stopPropagation","xs","CFormLabel","CFormFeedback","invalid","CFormSwitch","defaultChecked","onChange","target","value","CImage","rounded","thumbnail","align","src","width","height","process","CCardText","CFormInput","size","accept","event","selectedImage","files","startsWith","prevAlbumData","reader","FileReader","onloadend","result","readAsDataURL","htmlFor","CFormSelect","defaultValue","map","item","index","maxLength","required","md","CFormTextarea","rows","display","placeItems","marginRight","cilCalendar","DatePicker","selected","date","formattedDate","toISOString","slice","dateFormat","shouldCloseOnSelect","minDate","Date","maxDate","component","goListClick"],"sourceRoot":""}